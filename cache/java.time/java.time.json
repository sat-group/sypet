{
  "java.time": [
    {
      "name": "getZone",
      "retType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.Clock$FixedClock",
      "isConstructor": false,
      "method": "<java.time.Clock$FixedClock: java.time.ZoneId getZone()>"
    },
    {
      "name": "withZone",
      "retType": "java.time.Clock",
      "argType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.Clock$FixedClock",
      "isConstructor": false,
      "method": "<java.time.Clock$FixedClock: java.time.Clock withZone(java.time.ZoneId)>"
    },
    {
      "name": "millis",
      "retType": "long",
      "isStatic": false,
      "hostClass": "java.time.Clock$FixedClock",
      "isConstructor": false,
      "method": "<java.time.Clock$FixedClock: long millis()>"
    },
    {
      "name": "instant",
      "retType": "java.time.Instant",
      "isStatic": false,
      "hostClass": "java.time.Clock$FixedClock",
      "isConstructor": false,
      "method": "<java.time.Clock$FixedClock: java.time.Instant instant()>"
    },
    {
      "name": "equals",
      "retType": "boolean",
      "argType": "java.lang.Object",
      "isStatic": false,
      "hostClass": "java.time.Clock$FixedClock",
      "isConstructor": false,
      "method": "<java.time.Clock$FixedClock: boolean equals(java.lang.Object)>"
    },
    {
      "name": "getZone",
      "retType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.Clock$OffsetClock",
      "isConstructor": false,
      "method": "<java.time.Clock$OffsetClock: java.time.ZoneId getZone()>"
    },
    {
      "name": "withZone",
      "retType": "java.time.Clock",
      "argType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.Clock$OffsetClock",
      "isConstructor": false,
      "method": "<java.time.Clock$OffsetClock: java.time.Clock withZone(java.time.ZoneId)>"
    },
    {
      "name": "millis",
      "retType": "long",
      "isStatic": false,
      "hostClass": "java.time.Clock$OffsetClock",
      "isConstructor": false,
      "method": "<java.time.Clock$OffsetClock: long millis()>"
    },
    {
      "name": "instant",
      "retType": "java.time.Instant",
      "isStatic": false,
      "hostClass": "java.time.Clock$OffsetClock",
      "isConstructor": false,
      "method": "<java.time.Clock$OffsetClock: java.time.Instant instant()>"
    },
    {
      "name": "equals",
      "retType": "boolean",
      "argType": "java.lang.Object",
      "isStatic": false,
      "hostClass": "java.time.Clock$OffsetClock",
      "isConstructor": false,
      "method": "<java.time.Clock$OffsetClock: boolean equals(java.lang.Object)>"
    },
    {
      "name": "getZone",
      "retType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.Clock$SystemClock",
      "isConstructor": false,
      "method": "<java.time.Clock$SystemClock: java.time.ZoneId getZone()>"
    },
    {
      "name": "withZone",
      "retType": "java.time.Clock",
      "argType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.Clock$SystemClock",
      "isConstructor": false,
      "method": "<java.time.Clock$SystemClock: java.time.Clock withZone(java.time.ZoneId)>"
    },
    {
      "name": "millis",
      "retType": "long",
      "isStatic": false,
      "hostClass": "java.time.Clock$SystemClock",
      "isConstructor": false,
      "method": "<java.time.Clock$SystemClock: long millis()>"
    },
    {
      "name": "instant",
      "retType": "java.time.Instant",
      "isStatic": false,
      "hostClass": "java.time.Clock$SystemClock",
      "isConstructor": false,
      "method": "<java.time.Clock$SystemClock: java.time.Instant instant()>"
    },
    {
      "name": "equals",
      "retType": "boolean",
      "argType": "java.lang.Object",
      "isStatic": false,
      "hostClass": "java.time.Clock$SystemClock",
      "isConstructor": false,
      "method": "<java.time.Clock$SystemClock: boolean equals(java.lang.Object)>"
    },
    {
      "name": "getZone",
      "retType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.Clock$TickClock",
      "isConstructor": false,
      "method": "<java.time.Clock$TickClock: java.time.ZoneId getZone()>"
    },
    {
      "name": "withZone",
      "retType": "java.time.Clock",
      "argType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.Clock$TickClock",
      "isConstructor": false,
      "method": "<java.time.Clock$TickClock: java.time.Clock withZone(java.time.ZoneId)>"
    },
    {
      "name": "millis",
      "retType": "long",
      "isStatic": false,
      "hostClass": "java.time.Clock$TickClock",
      "isConstructor": false,
      "method": "<java.time.Clock$TickClock: long millis()>"
    },
    {
      "name": "instant",
      "retType": "java.time.Instant",
      "isStatic": false,
      "hostClass": "java.time.Clock$TickClock",
      "isConstructor": false,
      "method": "<java.time.Clock$TickClock: java.time.Instant instant()>"
    },
    {
      "name": "equals",
      "retType": "boolean",
      "argType": "java.lang.Object",
      "isStatic": false,
      "hostClass": "java.time.Clock$TickClock",
      "isConstructor": false,
      "method": "<java.time.Clock$TickClock: boolean equals(java.lang.Object)>"
    },
    {
      "name": "systemUTC",
      "retType": "java.time.Clock",
      "isStatic": true,
      "hostClass": "java.time.Clock",
      "isConstructor": false,
      "method": "<java.time.Clock: java.time.Clock systemUTC()>"
    },
    {
      "name": "systemDefaultZone",
      "retType": "java.time.Clock",
      "isStatic": true,
      "hostClass": "java.time.Clock",
      "isConstructor": false,
      "method": "<java.time.Clock: java.time.Clock systemDefaultZone()>"
    },
    {
      "name": "system",
      "retType": "java.time.Clock",
      "argType": "java.time.ZoneId",
      "isStatic": true,
      "hostClass": "java.time.Clock",
      "isConstructor": false,
      "method": "<java.time.Clock: java.time.Clock system(java.time.ZoneId)>"
    },
    {
      "name": "tickSeconds",
      "retType": "java.time.Clock",
      "argType": "java.time.ZoneId",
      "isStatic": true,
      "hostClass": "java.time.Clock",
      "isConstructor": false,
      "method": "<java.time.Clock: java.time.Clock tickSeconds(java.time.ZoneId)>"
    },
    {
      "name": "tickMinutes",
      "retType": "java.time.Clock",
      "argType": "java.time.ZoneId",
      "isStatic": true,
      "hostClass": "java.time.Clock",
      "isConstructor": false,
      "method": "<java.time.Clock: java.time.Clock tickMinutes(java.time.ZoneId)>"
    },
    {
      "name": "tick",
      "retType": "java.time.Clock",
      "argType": "java.time.Clock",
      "argType": "java.time.Duration",
      "isStatic": true,
      "hostClass": "java.time.Clock",
      "isConstructor": false,
      "method": "<java.time.Clock: java.time.Clock tick(java.time.Clock,java.time.Duration)>"
    },
    {
      "name": "fixed",
      "retType": "java.time.Clock",
      "argType": "java.time.Instant",
      "argType": "java.time.ZoneId",
      "isStatic": true,
      "hostClass": "java.time.Clock",
      "isConstructor": false,
      "method": "<java.time.Clock: java.time.Clock fixed(java.time.Instant,java.time.ZoneId)>"
    },
    {
      "name": "offset",
      "retType": "java.time.Clock",
      "argType": "java.time.Clock",
      "argType": "java.time.Duration",
      "isStatic": true,
      "hostClass": "java.time.Clock",
      "isConstructor": false,
      "method": "<java.time.Clock: java.time.Clock offset(java.time.Clock,java.time.Duration)>"
    },
    {
      "name": "getZone",
      "retType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.Clock",
      "isConstructor": false,
      "method": "<java.time.Clock: java.time.ZoneId getZone()>"
    },
    {
      "name": "withZone",
      "retType": "java.time.Clock",
      "argType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.Clock",
      "isConstructor": false,
      "method": "<java.time.Clock: java.time.Clock withZone(java.time.ZoneId)>"
    },
    {
      "name": "millis",
      "retType": "long",
      "isStatic": false,
      "hostClass": "java.time.Clock",
      "isConstructor": false,
      "method": "<java.time.Clock: long millis()>"
    },
    {
      "name": "instant",
      "retType": "java.time.Instant",
      "isStatic": false,
      "hostClass": "java.time.Clock",
      "isConstructor": false,
      "method": "<java.time.Clock: java.time.Instant instant()>"
    },
    {
      "name": "equals",
      "retType": "boolean",
      "argType": "java.lang.Object",
      "isStatic": false,
      "hostClass": "java.time.Clock",
      "isConstructor": false,
      "method": "<java.time.Clock: boolean equals(java.lang.Object)>"
    },
    {
      "name": "java.time.DateTimeException",
      "retType": "java.time.DateTimeException",
      "argType": "java.lang.String",
      "isStatic": false,
      "hostClass": "java.time.DateTimeException",
      "isConstructor": true,
      "method": "<java.time.DateTimeException: void <init>(java.lang.String)>"
    },
    {
      "name": "java.time.DateTimeException",
      "retType": "java.time.DateTimeException",
      "argType": "java.lang.String",
      "argType": "java.lang.Throwable",
      "isStatic": false,
      "hostClass": "java.time.DateTimeException",
      "isConstructor": true,
      "method": "<java.time.DateTimeException: void <init>(java.lang.String,java.lang.Throwable)>"
    },
    {
      "name": "values",
      "retType": "java.time.DayOfWeek[]",
      "isStatic": true,
      "hostClass": "java.time.DayOfWeek",
      "isConstructor": false,
      "method": "<java.time.DayOfWeek: java.time.DayOfWeek[] values()>"
    },
    {
      "name": "valueOf",
      "retType": "java.time.DayOfWeek",
      "argType": "java.lang.String",
      "isStatic": true,
      "hostClass": "java.time.DayOfWeek",
      "isConstructor": false,
      "method": "<java.time.DayOfWeek: java.time.DayOfWeek valueOf(java.lang.String)>"
    },
    {
      "name": "of",
      "retType": "java.time.DayOfWeek",
      "argType": "int",
      "isStatic": true,
      "hostClass": "java.time.DayOfWeek",
      "isConstructor": false,
      "method": "<java.time.DayOfWeek: java.time.DayOfWeek of(int)>"
    },
    {
      "name": "from",
      "retType": "java.time.DayOfWeek",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": true,
      "hostClass": "java.time.DayOfWeek",
      "isConstructor": false,
      "method": "<java.time.DayOfWeek: java.time.DayOfWeek 'from'(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "getValue",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.DayOfWeek",
      "isConstructor": false,
      "method": "<java.time.DayOfWeek: int getValue()>"
    },
    {
      "name": "getDisplayName",
      "retType": "java.lang.String",
      "argType": "java.time.format.TextStyle",
      "argType": "java.util.Locale",
      "isStatic": false,
      "hostClass": "java.time.DayOfWeek",
      "isConstructor": false,
      "method": "<java.time.DayOfWeek: java.lang.String getDisplayName(java.time.format.TextStyle,java.util.Locale)>"
    },
    {
      "name": "isSupported",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.DayOfWeek",
      "isConstructor": false,
      "method": "<java.time.DayOfWeek: boolean isSupported(java.time.temporal.TemporalField)>"
    },
    {
      "name": "range",
      "retType": "java.time.temporal.ValueRange",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.DayOfWeek",
      "isConstructor": false,
      "method": "<java.time.DayOfWeek: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
    },
    {
      "name": "get",
      "retType": "int",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.DayOfWeek",
      "isConstructor": false,
      "method": "<java.time.DayOfWeek: int get(java.time.temporal.TemporalField)>"
    },
    {
      "name": "getLong",
      "retType": "long",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.DayOfWeek",
      "isConstructor": false,
      "method": "<java.time.DayOfWeek: long getLong(java.time.temporal.TemporalField)>"
    },
    {
      "name": "plus",
      "retType": "java.time.DayOfWeek",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.DayOfWeek",
      "isConstructor": false,
      "method": "<java.time.DayOfWeek: java.time.DayOfWeek plus(long)>"
    },
    {
      "name": "minus",
      "retType": "java.time.DayOfWeek",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.DayOfWeek",
      "isConstructor": false,
      "method": "<java.time.DayOfWeek: java.time.DayOfWeek minus(long)>"
    },
    {
      "name": "query",
      "retType": "java.lang.Object",
      "argType": "java.time.temporal.TemporalQuery",
      "isStatic": false,
      "hostClass": "java.time.DayOfWeek",
      "isConstructor": false,
      "method": "<java.time.DayOfWeek: java.lang.Object query(java.time.temporal.TemporalQuery)>"
    },
    {
      "name": "adjustInto",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.Temporal",
      "isStatic": false,
      "hostClass": "java.time.DayOfWeek",
      "isConstructor": false,
      "method": "<java.time.DayOfWeek: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>"
    },
    {
      "name": "ofDays",
      "retType": "java.time.Duration",
      "argType": "long",
      "isStatic": true,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: java.time.Duration ofDays(long)>"
    },
    {
      "name": "ofHours",
      "retType": "java.time.Duration",
      "argType": "long",
      "isStatic": true,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: java.time.Duration ofHours(long)>"
    },
    {
      "name": "ofMinutes",
      "retType": "java.time.Duration",
      "argType": "long",
      "isStatic": true,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: java.time.Duration ofMinutes(long)>"
    },
    {
      "name": "ofSeconds",
      "retType": "java.time.Duration",
      "argType": "long",
      "isStatic": true,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: java.time.Duration ofSeconds(long)>"
    },
    {
      "name": "ofSeconds",
      "retType": "java.time.Duration",
      "argType": "long",
      "argType": "long",
      "isStatic": true,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: java.time.Duration ofSeconds(long,long)>"
    },
    {
      "name": "ofMillis",
      "retType": "java.time.Duration",
      "argType": "long",
      "isStatic": true,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: java.time.Duration ofMillis(long)>"
    },
    {
      "name": "ofNanos",
      "retType": "java.time.Duration",
      "argType": "long",
      "isStatic": true,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: java.time.Duration ofNanos(long)>"
    },
    {
      "name": "of",
      "retType": "java.time.Duration",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": true,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: java.time.Duration of(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "from",
      "retType": "java.time.Duration",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": true,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: java.time.Duration 'from'(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "parse",
      "retType": "java.time.Duration",
      "argType": "java.lang.CharSequence",
      "isStatic": true,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: java.time.Duration parse(java.lang.CharSequence)>"
    },
    {
      "name": "between",
      "retType": "java.time.Duration",
      "argType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.Temporal",
      "isStatic": true,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: java.time.Duration between(java.time.temporal.Temporal,java.time.temporal.Temporal)>"
    },
    {
      "name": "get",
      "retType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: long get(java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "getUnits",
      "retType": "java.util.List",
      "isStatic": false,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: java.util.List getUnits()>"
    },
    {
      "name": "isZero",
      "retType": "boolean",
      "isStatic": false,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: boolean isZero()>"
    },
    {
      "name": "isNegative",
      "retType": "boolean",
      "isStatic": false,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: boolean isNegative()>"
    },
    {
      "name": "getSeconds",
      "retType": "long",
      "isStatic": false,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: long getSeconds()>"
    },
    {
      "name": "getNano",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: int getNano()>"
    },
    {
      "name": "withSeconds",
      "retType": "java.time.Duration",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: java.time.Duration withSeconds(long)>"
    },
    {
      "name": "withNanos",
      "retType": "java.time.Duration",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: java.time.Duration withNanos(int)>"
    },
    {
      "name": "plus",
      "retType": "java.time.Duration",
      "argType": "java.time.Duration",
      "isStatic": false,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: java.time.Duration plus(java.time.Duration)>"
    },
    {
      "name": "plus",
      "retType": "java.time.Duration",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: java.time.Duration plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "plusDays",
      "retType": "java.time.Duration",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: java.time.Duration plusDays(long)>"
    },
    {
      "name": "plusHours",
      "retType": "java.time.Duration",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: java.time.Duration plusHours(long)>"
    },
    {
      "name": "plusMinutes",
      "retType": "java.time.Duration",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: java.time.Duration plusMinutes(long)>"
    },
    {
      "name": "plusSeconds",
      "retType": "java.time.Duration",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: java.time.Duration plusSeconds(long)>"
    },
    {
      "name": "plusMillis",
      "retType": "java.time.Duration",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: java.time.Duration plusMillis(long)>"
    },
    {
      "name": "plusNanos",
      "retType": "java.time.Duration",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: java.time.Duration plusNanos(long)>"
    },
    {
      "name": "minus",
      "retType": "java.time.Duration",
      "argType": "java.time.Duration",
      "isStatic": false,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: java.time.Duration minus(java.time.Duration)>"
    },
    {
      "name": "minus",
      "retType": "java.time.Duration",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: java.time.Duration minus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minusDays",
      "retType": "java.time.Duration",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: java.time.Duration minusDays(long)>"
    },
    {
      "name": "minusHours",
      "retType": "java.time.Duration",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: java.time.Duration minusHours(long)>"
    },
    {
      "name": "minusMinutes",
      "retType": "java.time.Duration",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: java.time.Duration minusMinutes(long)>"
    },
    {
      "name": "minusSeconds",
      "retType": "java.time.Duration",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: java.time.Duration minusSeconds(long)>"
    },
    {
      "name": "minusMillis",
      "retType": "java.time.Duration",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: java.time.Duration minusMillis(long)>"
    },
    {
      "name": "minusNanos",
      "retType": "java.time.Duration",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: java.time.Duration minusNanos(long)>"
    },
    {
      "name": "multipliedBy",
      "retType": "java.time.Duration",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: java.time.Duration multipliedBy(long)>"
    },
    {
      "name": "dividedBy",
      "retType": "java.time.Duration",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: java.time.Duration dividedBy(long)>"
    },
    {
      "name": "negated",
      "retType": "java.time.Duration",
      "isStatic": false,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: java.time.Duration negated()>"
    },
    {
      "name": "abs",
      "retType": "java.time.Duration",
      "isStatic": false,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: java.time.Duration abs()>"
    },
    {
      "name": "addTo",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.Temporal",
      "isStatic": false,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: java.time.temporal.Temporal addTo(java.time.temporal.Temporal)>"
    },
    {
      "name": "subtractFrom",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.Temporal",
      "isStatic": false,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: java.time.temporal.Temporal subtractFrom(java.time.temporal.Temporal)>"
    },
    {
      "name": "toDays",
      "retType": "long",
      "isStatic": false,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: long toDays()>"
    },
    {
      "name": "toHours",
      "retType": "long",
      "isStatic": false,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: long toHours()>"
    },
    {
      "name": "toMinutes",
      "retType": "long",
      "isStatic": false,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: long toMinutes()>"
    },
    {
      "name": "toMillis",
      "retType": "long",
      "isStatic": false,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: long toMillis()>"
    },
    {
      "name": "toNanos",
      "retType": "long",
      "isStatic": false,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: long toNanos()>"
    },
    {
      "name": "equals",
      "retType": "boolean",
      "argType": "java.lang.Object",
      "isStatic": false,
      "hostClass": "java.time.Duration",
      "isConstructor": false,
      "method": "<java.time.Duration: boolean equals(java.lang.Object)>"
    },
    {
      "name": "now",
      "retType": "java.time.Instant",
      "isStatic": true,
      "hostClass": "java.time.Instant",
      "isConstructor": false,
      "method": "<java.time.Instant: java.time.Instant now()>"
    },
    {
      "name": "now",
      "retType": "java.time.Instant",
      "argType": "java.time.Clock",
      "isStatic": true,
      "hostClass": "java.time.Instant",
      "isConstructor": false,
      "method": "<java.time.Instant: java.time.Instant now(java.time.Clock)>"
    },
    {
      "name": "ofEpochSecond",
      "retType": "java.time.Instant",
      "argType": "long",
      "isStatic": true,
      "hostClass": "java.time.Instant",
      "isConstructor": false,
      "method": "<java.time.Instant: java.time.Instant ofEpochSecond(long)>"
    },
    {
      "name": "ofEpochSecond",
      "retType": "java.time.Instant",
      "argType": "long",
      "argType": "long",
      "isStatic": true,
      "hostClass": "java.time.Instant",
      "isConstructor": false,
      "method": "<java.time.Instant: java.time.Instant ofEpochSecond(long,long)>"
    },
    {
      "name": "ofEpochMilli",
      "retType": "java.time.Instant",
      "argType": "long",
      "isStatic": true,
      "hostClass": "java.time.Instant",
      "isConstructor": false,
      "method": "<java.time.Instant: java.time.Instant ofEpochMilli(long)>"
    },
    {
      "name": "from",
      "retType": "java.time.Instant",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": true,
      "hostClass": "java.time.Instant",
      "isConstructor": false,
      "method": "<java.time.Instant: java.time.Instant 'from'(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "parse",
      "retType": "java.time.Instant",
      "argType": "java.lang.CharSequence",
      "isStatic": true,
      "hostClass": "java.time.Instant",
      "isConstructor": false,
      "method": "<java.time.Instant: java.time.Instant parse(java.lang.CharSequence)>"
    },
    {
      "name": "isSupported",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.Instant",
      "isConstructor": false,
      "method": "<java.time.Instant: boolean isSupported(java.time.temporal.TemporalField)>"
    },
    {
      "name": "isSupported",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.Instant",
      "isConstructor": false,
      "method": "<java.time.Instant: boolean isSupported(java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "range",
      "retType": "java.time.temporal.ValueRange",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.Instant",
      "isConstructor": false,
      "method": "<java.time.Instant: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
    },
    {
      "name": "get",
      "retType": "int",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.Instant",
      "isConstructor": false,
      "method": "<java.time.Instant: int get(java.time.temporal.TemporalField)>"
    },
    {
      "name": "getLong",
      "retType": "long",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.Instant",
      "isConstructor": false,
      "method": "<java.time.Instant: long getLong(java.time.temporal.TemporalField)>"
    },
    {
      "name": "getEpochSecond",
      "retType": "long",
      "isStatic": false,
      "hostClass": "java.time.Instant",
      "isConstructor": false,
      "method": "<java.time.Instant: long getEpochSecond()>"
    },
    {
      "name": "getNano",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.Instant",
      "isConstructor": false,
      "method": "<java.time.Instant: int getNano()>"
    },
    {
      "name": "with",
      "retType": "java.time.Instant",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.Instant",
      "isConstructor": false,
      "method": "<java.time.Instant: java.time.Instant 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "with",
      "retType": "java.time.Instant",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.Instant",
      "isConstructor": false,
      "method": "<java.time.Instant: java.time.Instant 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "truncatedTo",
      "retType": "java.time.Instant",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.Instant",
      "isConstructor": false,
      "method": "<java.time.Instant: java.time.Instant truncatedTo(java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "plus",
      "retType": "java.time.Instant",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.Instant",
      "isConstructor": false,
      "method": "<java.time.Instant: java.time.Instant plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "plus",
      "retType": "java.time.Instant",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.Instant",
      "isConstructor": false,
      "method": "<java.time.Instant: java.time.Instant plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "plusSeconds",
      "retType": "java.time.Instant",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.Instant",
      "isConstructor": false,
      "method": "<java.time.Instant: java.time.Instant plusSeconds(long)>"
    },
    {
      "name": "plusMillis",
      "retType": "java.time.Instant",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.Instant",
      "isConstructor": false,
      "method": "<java.time.Instant: java.time.Instant plusMillis(long)>"
    },
    {
      "name": "plusNanos",
      "retType": "java.time.Instant",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.Instant",
      "isConstructor": false,
      "method": "<java.time.Instant: java.time.Instant plusNanos(long)>"
    },
    {
      "name": "minus",
      "retType": "java.time.Instant",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.Instant",
      "isConstructor": false,
      "method": "<java.time.Instant: java.time.Instant minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "minus",
      "retType": "java.time.Instant",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.Instant",
      "isConstructor": false,
      "method": "<java.time.Instant: java.time.Instant minus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minusSeconds",
      "retType": "java.time.Instant",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.Instant",
      "isConstructor": false,
      "method": "<java.time.Instant: java.time.Instant minusSeconds(long)>"
    },
    {
      "name": "minusMillis",
      "retType": "java.time.Instant",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.Instant",
      "isConstructor": false,
      "method": "<java.time.Instant: java.time.Instant minusMillis(long)>"
    },
    {
      "name": "minusNanos",
      "retType": "java.time.Instant",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.Instant",
      "isConstructor": false,
      "method": "<java.time.Instant: java.time.Instant minusNanos(long)>"
    },
    {
      "name": "query",
      "retType": "java.lang.Object",
      "argType": "java.time.temporal.TemporalQuery",
      "isStatic": false,
      "hostClass": "java.time.Instant",
      "isConstructor": false,
      "method": "<java.time.Instant: java.lang.Object query(java.time.temporal.TemporalQuery)>"
    },
    {
      "name": "adjustInto",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.Temporal",
      "isStatic": false,
      "hostClass": "java.time.Instant",
      "isConstructor": false,
      "method": "<java.time.Instant: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>"
    },
    {
      "name": "until",
      "retType": "long",
      "argType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.Instant",
      "isConstructor": false,
      "method": "<java.time.Instant: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "atOffset",
      "retType": "java.time.OffsetDateTime",
      "argType": "java.time.ZoneOffset",
      "isStatic": false,
      "hostClass": "java.time.Instant",
      "isConstructor": false,
      "method": "<java.time.Instant: java.time.OffsetDateTime atOffset(java.time.ZoneOffset)>"
    },
    {
      "name": "atZone",
      "retType": "java.time.ZonedDateTime",
      "argType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.Instant",
      "isConstructor": false,
      "method": "<java.time.Instant: java.time.ZonedDateTime atZone(java.time.ZoneId)>"
    },
    {
      "name": "toEpochMilli",
      "retType": "long",
      "isStatic": false,
      "hostClass": "java.time.Instant",
      "isConstructor": false,
      "method": "<java.time.Instant: long toEpochMilli()>"
    },
    {
      "name": "isAfter",
      "retType": "boolean",
      "argType": "java.time.Instant",
      "isStatic": false,
      "hostClass": "java.time.Instant",
      "isConstructor": false,
      "method": "<java.time.Instant: boolean isAfter(java.time.Instant)>"
    },
    {
      "name": "isBefore",
      "retType": "boolean",
      "argType": "java.time.Instant",
      "isStatic": false,
      "hostClass": "java.time.Instant",
      "isConstructor": false,
      "method": "<java.time.Instant: boolean isBefore(java.time.Instant)>"
    },
    {
      "name": "equals",
      "retType": "boolean",
      "argType": "java.lang.Object",
      "isStatic": false,
      "hostClass": "java.time.Instant",
      "isConstructor": false,
      "method": "<java.time.Instant: boolean equals(java.lang.Object)>"
    },
    {
      "name": "minus",
      "retType": "java.time.temporal.Temporal",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.Instant",
      "isConstructor": false,
      "method": "<java.time.Instant: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minus",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.Instant",
      "isConstructor": false,
      "method": "<java.time.Instant: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "plus",
      "retType": "java.time.temporal.Temporal",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.Instant",
      "isConstructor": false,
      "method": "<java.time.Instant: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "plus",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.Instant",
      "isConstructor": false,
      "method": "<java.time.Instant: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "with",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.Instant",
      "isConstructor": false,
      "method": "<java.time.Instant: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "with",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.Instant",
      "isConstructor": false,
      "method": "<java.time.Instant: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "now",
      "retType": "java.time.LocalDate",
      "isStatic": true,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.LocalDate now()>"
    },
    {
      "name": "now",
      "retType": "java.time.LocalDate",
      "argType": "java.time.ZoneId",
      "isStatic": true,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.LocalDate now(java.time.ZoneId)>"
    },
    {
      "name": "now",
      "retType": "java.time.LocalDate",
      "argType": "java.time.Clock",
      "isStatic": true,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.LocalDate now(java.time.Clock)>"
    },
    {
      "name": "of",
      "retType": "java.time.LocalDate",
      "argType": "int",
      "argType": "java.time.Month",
      "argType": "int",
      "isStatic": true,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.LocalDate of(int,java.time.Month,int)>"
    },
    {
      "name": "of",
      "retType": "java.time.LocalDate",
      "argType": "int",
      "argType": "int",
      "argType": "int",
      "isStatic": true,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.LocalDate of(int,int,int)>"
    },
    {
      "name": "ofYearDay",
      "retType": "java.time.LocalDate",
      "argType": "int",
      "argType": "int",
      "isStatic": true,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.LocalDate ofYearDay(int,int)>"
    },
    {
      "name": "ofEpochDay",
      "retType": "java.time.LocalDate",
      "argType": "long",
      "isStatic": true,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.LocalDate ofEpochDay(long)>"
    },
    {
      "name": "from",
      "retType": "java.time.LocalDate",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": true,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.LocalDate 'from'(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "parse",
      "retType": "java.time.LocalDate",
      "argType": "java.lang.CharSequence",
      "isStatic": true,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.LocalDate parse(java.lang.CharSequence)>"
    },
    {
      "name": "parse",
      "retType": "java.time.LocalDate",
      "argType": "java.lang.CharSequence",
      "argType": "java.time.format.DateTimeFormatter",
      "isStatic": true,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.LocalDate parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)>"
    },
    {
      "name": "isSupported",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: boolean isSupported(java.time.temporal.TemporalField)>"
    },
    {
      "name": "isSupported",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: boolean isSupported(java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "range",
      "retType": "java.time.temporal.ValueRange",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
    },
    {
      "name": "get",
      "retType": "int",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: int get(java.time.temporal.TemporalField)>"
    },
    {
      "name": "getLong",
      "retType": "long",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: long getLong(java.time.temporal.TemporalField)>"
    },
    {
      "name": "getChronology",
      "retType": "java.time.chrono.IsoChronology",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.chrono.IsoChronology getChronology()>"
    },
    {
      "name": "getEra",
      "retType": "java.time.chrono.Era",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.chrono.Era getEra()>"
    },
    {
      "name": "getYear",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: int getYear()>"
    },
    {
      "name": "getMonthValue",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: int getMonthValue()>"
    },
    {
      "name": "getMonth",
      "retType": "java.time.Month",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.Month getMonth()>"
    },
    {
      "name": "getDayOfMonth",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: int getDayOfMonth()>"
    },
    {
      "name": "getDayOfYear",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: int getDayOfYear()>"
    },
    {
      "name": "getDayOfWeek",
      "retType": "java.time.DayOfWeek",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.DayOfWeek getDayOfWeek()>"
    },
    {
      "name": "isLeapYear",
      "retType": "boolean",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: boolean isLeapYear()>"
    },
    {
      "name": "lengthOfMonth",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: int lengthOfMonth()>"
    },
    {
      "name": "lengthOfYear",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: int lengthOfYear()>"
    },
    {
      "name": "with",
      "retType": "java.time.LocalDate",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.LocalDate 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "with",
      "retType": "java.time.LocalDate",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.LocalDate 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "withYear",
      "retType": "java.time.LocalDate",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.LocalDate withYear(int)>"
    },
    {
      "name": "withMonth",
      "retType": "java.time.LocalDate",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.LocalDate withMonth(int)>"
    },
    {
      "name": "withDayOfMonth",
      "retType": "java.time.LocalDate",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.LocalDate withDayOfMonth(int)>"
    },
    {
      "name": "withDayOfYear",
      "retType": "java.time.LocalDate",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.LocalDate withDayOfYear(int)>"
    },
    {
      "name": "plus",
      "retType": "java.time.LocalDate",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.LocalDate plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "plus",
      "retType": "java.time.LocalDate",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.LocalDate plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "plusYears",
      "retType": "java.time.LocalDate",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.LocalDate plusYears(long)>"
    },
    {
      "name": "plusMonths",
      "retType": "java.time.LocalDate",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.LocalDate plusMonths(long)>"
    },
    {
      "name": "plusWeeks",
      "retType": "java.time.LocalDate",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.LocalDate plusWeeks(long)>"
    },
    {
      "name": "plusDays",
      "retType": "java.time.LocalDate",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.LocalDate plusDays(long)>"
    },
    {
      "name": "minus",
      "retType": "java.time.LocalDate",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.LocalDate minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "minus",
      "retType": "java.time.LocalDate",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.LocalDate minus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minusYears",
      "retType": "java.time.LocalDate",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.LocalDate minusYears(long)>"
    },
    {
      "name": "minusMonths",
      "retType": "java.time.LocalDate",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.LocalDate minusMonths(long)>"
    },
    {
      "name": "minusWeeks",
      "retType": "java.time.LocalDate",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.LocalDate minusWeeks(long)>"
    },
    {
      "name": "minusDays",
      "retType": "java.time.LocalDate",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.LocalDate minusDays(long)>"
    },
    {
      "name": "query",
      "retType": "java.lang.Object",
      "argType": "java.time.temporal.TemporalQuery",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.lang.Object query(java.time.temporal.TemporalQuery)>"
    },
    {
      "name": "adjustInto",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.Temporal",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>"
    },
    {
      "name": "until",
      "retType": "long",
      "argType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "until",
      "retType": "java.time.Period",
      "argType": "java.time.chrono.ChronoLocalDate",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.Period until(java.time.chrono.ChronoLocalDate)>"
    },
    {
      "name": "format",
      "retType": "java.lang.String",
      "argType": "java.time.format.DateTimeFormatter",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.lang.String format(java.time.format.DateTimeFormatter)>"
    },
    {
      "name": "atTime",
      "retType": "java.time.LocalDateTime",
      "argType": "java.time.LocalTime",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.LocalDateTime atTime(java.time.LocalTime)>"
    },
    {
      "name": "atTime",
      "retType": "java.time.LocalDateTime",
      "argType": "int",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.LocalDateTime atTime(int,int)>"
    },
    {
      "name": "atTime",
      "retType": "java.time.LocalDateTime",
      "argType": "int",
      "argType": "int",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.LocalDateTime atTime(int,int,int)>"
    },
    {
      "name": "atTime",
      "retType": "java.time.OffsetDateTime",
      "argType": "java.time.OffsetTime",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.OffsetDateTime atTime(java.time.OffsetTime)>"
    },
    {
      "name": "atStartOfDay",
      "retType": "java.time.LocalDateTime",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.LocalDateTime atStartOfDay()>"
    },
    {
      "name": "atStartOfDay",
      "retType": "java.time.ZonedDateTime",
      "argType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.ZonedDateTime atStartOfDay(java.time.ZoneId)>"
    },
    {
      "name": "toEpochDay",
      "retType": "long",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: long toEpochDay()>"
    },
    {
      "name": "isAfter",
      "retType": "boolean",
      "argType": "java.time.chrono.ChronoLocalDate",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: boolean isAfter(java.time.chrono.ChronoLocalDate)>"
    },
    {
      "name": "isBefore",
      "retType": "boolean",
      "argType": "java.time.chrono.ChronoLocalDate",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: boolean isBefore(java.time.chrono.ChronoLocalDate)>"
    },
    {
      "name": "isEqual",
      "retType": "boolean",
      "argType": "java.time.chrono.ChronoLocalDate",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: boolean isEqual(java.time.chrono.ChronoLocalDate)>"
    },
    {
      "name": "equals",
      "retType": "boolean",
      "argType": "java.lang.Object",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: boolean equals(java.lang.Object)>"
    },
    {
      "name": "minus",
      "retType": "java.time.temporal.Temporal",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minus",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "plus",
      "retType": "java.time.temporal.Temporal",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "plus",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "with",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "with",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "atTime",
      "retType": "java.time.chrono.ChronoLocalDateTime",
      "argType": "java.time.LocalTime",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.chrono.ChronoLocalDateTime atTime(java.time.LocalTime)>"
    },
    {
      "name": "until",
      "retType": "java.time.chrono.ChronoPeriod",
      "argType": "java.time.chrono.ChronoLocalDate",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.chrono.ChronoPeriod until(java.time.chrono.ChronoLocalDate)>"
    },
    {
      "name": "minus",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.chrono.ChronoLocalDate minus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minus",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.chrono.ChronoLocalDate minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "plus",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.chrono.ChronoLocalDate plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "plus",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.chrono.ChronoLocalDate plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "with",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.chrono.ChronoLocalDate 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "with",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.chrono.ChronoLocalDate 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "getChronology",
      "retType": "java.time.chrono.Chronology",
      "isStatic": false,
      "hostClass": "java.time.LocalDate",
      "isConstructor": false,
      "method": "<java.time.LocalDate: java.time.chrono.Chronology getChronology()>"
    },
    {
      "name": "now",
      "retType": "java.time.LocalDateTime",
      "isStatic": true,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.LocalDateTime now()>"
    },
    {
      "name": "now",
      "retType": "java.time.LocalDateTime",
      "argType": "java.time.ZoneId",
      "isStatic": true,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.LocalDateTime now(java.time.ZoneId)>"
    },
    {
      "name": "now",
      "retType": "java.time.LocalDateTime",
      "argType": "java.time.Clock",
      "isStatic": true,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.LocalDateTime now(java.time.Clock)>"
    },
    {
      "name": "of",
      "retType": "java.time.LocalDateTime",
      "argType": "java.time.LocalDate",
      "argType": "java.time.LocalTime",
      "isStatic": true,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.LocalDateTime of(java.time.LocalDate,java.time.LocalTime)>"
    },
    {
      "name": "ofInstant",
      "retType": "java.time.LocalDateTime",
      "argType": "java.time.Instant",
      "argType": "java.time.ZoneId",
      "isStatic": true,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.LocalDateTime ofInstant(java.time.Instant,java.time.ZoneId)>"
    },
    {
      "name": "ofEpochSecond",
      "retType": "java.time.LocalDateTime",
      "argType": "long",
      "argType": "int",
      "argType": "java.time.ZoneOffset",
      "isStatic": true,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.LocalDateTime ofEpochSecond(long,int,java.time.ZoneOffset)>"
    },
    {
      "name": "from",
      "retType": "java.time.LocalDateTime",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": true,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.LocalDateTime 'from'(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "parse",
      "retType": "java.time.LocalDateTime",
      "argType": "java.lang.CharSequence",
      "isStatic": true,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.LocalDateTime parse(java.lang.CharSequence)>"
    },
    {
      "name": "parse",
      "retType": "java.time.LocalDateTime",
      "argType": "java.lang.CharSequence",
      "argType": "java.time.format.DateTimeFormatter",
      "isStatic": true,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.LocalDateTime parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)>"
    },
    {
      "name": "isSupported",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: boolean isSupported(java.time.temporal.TemporalField)>"
    },
    {
      "name": "isSupported",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: boolean isSupported(java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "range",
      "retType": "java.time.temporal.ValueRange",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
    },
    {
      "name": "get",
      "retType": "int",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: int get(java.time.temporal.TemporalField)>"
    },
    {
      "name": "getLong",
      "retType": "long",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: long getLong(java.time.temporal.TemporalField)>"
    },
    {
      "name": "toLocalDate",
      "retType": "java.time.LocalDate",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.LocalDate toLocalDate()>"
    },
    {
      "name": "getYear",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: int getYear()>"
    },
    {
      "name": "getMonthValue",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: int getMonthValue()>"
    },
    {
      "name": "getMonth",
      "retType": "java.time.Month",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.Month getMonth()>"
    },
    {
      "name": "getDayOfMonth",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: int getDayOfMonth()>"
    },
    {
      "name": "getDayOfYear",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: int getDayOfYear()>"
    },
    {
      "name": "getDayOfWeek",
      "retType": "java.time.DayOfWeek",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.DayOfWeek getDayOfWeek()>"
    },
    {
      "name": "toLocalTime",
      "retType": "java.time.LocalTime",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.LocalTime toLocalTime()>"
    },
    {
      "name": "getHour",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: int getHour()>"
    },
    {
      "name": "getMinute",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: int getMinute()>"
    },
    {
      "name": "getSecond",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: int getSecond()>"
    },
    {
      "name": "getNano",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: int getNano()>"
    },
    {
      "name": "with",
      "retType": "java.time.LocalDateTime",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.LocalDateTime 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "with",
      "retType": "java.time.LocalDateTime",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.LocalDateTime 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "withYear",
      "retType": "java.time.LocalDateTime",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.LocalDateTime withYear(int)>"
    },
    {
      "name": "withMonth",
      "retType": "java.time.LocalDateTime",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.LocalDateTime withMonth(int)>"
    },
    {
      "name": "withDayOfMonth",
      "retType": "java.time.LocalDateTime",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.LocalDateTime withDayOfMonth(int)>"
    },
    {
      "name": "withDayOfYear",
      "retType": "java.time.LocalDateTime",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.LocalDateTime withDayOfYear(int)>"
    },
    {
      "name": "withHour",
      "retType": "java.time.LocalDateTime",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.LocalDateTime withHour(int)>"
    },
    {
      "name": "withMinute",
      "retType": "java.time.LocalDateTime",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.LocalDateTime withMinute(int)>"
    },
    {
      "name": "withSecond",
      "retType": "java.time.LocalDateTime",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.LocalDateTime withSecond(int)>"
    },
    {
      "name": "withNano",
      "retType": "java.time.LocalDateTime",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.LocalDateTime withNano(int)>"
    },
    {
      "name": "truncatedTo",
      "retType": "java.time.LocalDateTime",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.LocalDateTime truncatedTo(java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "plus",
      "retType": "java.time.LocalDateTime",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.LocalDateTime plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "plus",
      "retType": "java.time.LocalDateTime",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.LocalDateTime plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "plusYears",
      "retType": "java.time.LocalDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.LocalDateTime plusYears(long)>"
    },
    {
      "name": "plusMonths",
      "retType": "java.time.LocalDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.LocalDateTime plusMonths(long)>"
    },
    {
      "name": "plusWeeks",
      "retType": "java.time.LocalDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.LocalDateTime plusWeeks(long)>"
    },
    {
      "name": "plusDays",
      "retType": "java.time.LocalDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.LocalDateTime plusDays(long)>"
    },
    {
      "name": "plusHours",
      "retType": "java.time.LocalDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.LocalDateTime plusHours(long)>"
    },
    {
      "name": "plusMinutes",
      "retType": "java.time.LocalDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.LocalDateTime plusMinutes(long)>"
    },
    {
      "name": "plusSeconds",
      "retType": "java.time.LocalDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.LocalDateTime plusSeconds(long)>"
    },
    {
      "name": "plusNanos",
      "retType": "java.time.LocalDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.LocalDateTime plusNanos(long)>"
    },
    {
      "name": "minus",
      "retType": "java.time.LocalDateTime",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.LocalDateTime minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "minus",
      "retType": "java.time.LocalDateTime",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.LocalDateTime minus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minusYears",
      "retType": "java.time.LocalDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.LocalDateTime minusYears(long)>"
    },
    {
      "name": "minusMonths",
      "retType": "java.time.LocalDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.LocalDateTime minusMonths(long)>"
    },
    {
      "name": "minusWeeks",
      "retType": "java.time.LocalDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.LocalDateTime minusWeeks(long)>"
    },
    {
      "name": "minusDays",
      "retType": "java.time.LocalDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.LocalDateTime minusDays(long)>"
    },
    {
      "name": "minusHours",
      "retType": "java.time.LocalDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.LocalDateTime minusHours(long)>"
    },
    {
      "name": "minusMinutes",
      "retType": "java.time.LocalDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.LocalDateTime minusMinutes(long)>"
    },
    {
      "name": "minusSeconds",
      "retType": "java.time.LocalDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.LocalDateTime minusSeconds(long)>"
    },
    {
      "name": "minusNanos",
      "retType": "java.time.LocalDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.LocalDateTime minusNanos(long)>"
    },
    {
      "name": "query",
      "retType": "java.lang.Object",
      "argType": "java.time.temporal.TemporalQuery",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.lang.Object query(java.time.temporal.TemporalQuery)>"
    },
    {
      "name": "adjustInto",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.Temporal",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>"
    },
    {
      "name": "until",
      "retType": "long",
      "argType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "format",
      "retType": "java.lang.String",
      "argType": "java.time.format.DateTimeFormatter",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.lang.String format(java.time.format.DateTimeFormatter)>"
    },
    {
      "name": "atOffset",
      "retType": "java.time.OffsetDateTime",
      "argType": "java.time.ZoneOffset",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.OffsetDateTime atOffset(java.time.ZoneOffset)>"
    },
    {
      "name": "atZone",
      "retType": "java.time.ZonedDateTime",
      "argType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.ZonedDateTime atZone(java.time.ZoneId)>"
    },
    {
      "name": "isAfter",
      "retType": "boolean",
      "argType": "java.time.chrono.ChronoLocalDateTime",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: boolean isAfter(java.time.chrono.ChronoLocalDateTime)>"
    },
    {
      "name": "isBefore",
      "retType": "boolean",
      "argType": "java.time.chrono.ChronoLocalDateTime",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: boolean isBefore(java.time.chrono.ChronoLocalDateTime)>"
    },
    {
      "name": "isEqual",
      "retType": "boolean",
      "argType": "java.time.chrono.ChronoLocalDateTime",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: boolean isEqual(java.time.chrono.ChronoLocalDateTime)>"
    },
    {
      "name": "equals",
      "retType": "boolean",
      "argType": "java.lang.Object",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: boolean equals(java.lang.Object)>"
    },
    {
      "name": "minus",
      "retType": "java.time.temporal.Temporal",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minus",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "plus",
      "retType": "java.time.temporal.Temporal",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "plus",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "with",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "with",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "atZone",
      "retType": "java.time.chrono.ChronoZonedDateTime",
      "argType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.chrono.ChronoZonedDateTime atZone(java.time.ZoneId)>"
    },
    {
      "name": "minus",
      "retType": "java.time.chrono.ChronoLocalDateTime",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.chrono.ChronoLocalDateTime minus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minus",
      "retType": "java.time.chrono.ChronoLocalDateTime",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.chrono.ChronoLocalDateTime minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "plus",
      "retType": "java.time.chrono.ChronoLocalDateTime",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.chrono.ChronoLocalDateTime plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "plus",
      "retType": "java.time.chrono.ChronoLocalDateTime",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.chrono.ChronoLocalDateTime plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "with",
      "retType": "java.time.chrono.ChronoLocalDateTime",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.chrono.ChronoLocalDateTime 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "with",
      "retType": "java.time.chrono.ChronoLocalDateTime",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.chrono.ChronoLocalDateTime 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "toLocalDate",
      "retType": "java.time.chrono.ChronoLocalDate",
      "isStatic": false,
      "hostClass": "java.time.LocalDateTime",
      "isConstructor": false,
      "method": "<java.time.LocalDateTime: java.time.chrono.ChronoLocalDate toLocalDate()>"
    },
    {
      "name": "now",
      "retType": "java.time.LocalTime",
      "isStatic": true,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: java.time.LocalTime now()>"
    },
    {
      "name": "now",
      "retType": "java.time.LocalTime",
      "argType": "java.time.ZoneId",
      "isStatic": true,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: java.time.LocalTime now(java.time.ZoneId)>"
    },
    {
      "name": "now",
      "retType": "java.time.LocalTime",
      "argType": "java.time.Clock",
      "isStatic": true,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: java.time.LocalTime now(java.time.Clock)>"
    },
    {
      "name": "of",
      "retType": "java.time.LocalTime",
      "argType": "int",
      "argType": "int",
      "isStatic": true,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: java.time.LocalTime of(int,int)>"
    },
    {
      "name": "of",
      "retType": "java.time.LocalTime",
      "argType": "int",
      "argType": "int",
      "argType": "int",
      "isStatic": true,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: java.time.LocalTime of(int,int,int)>"
    },
    {
      "name": "ofSecondOfDay",
      "retType": "java.time.LocalTime",
      "argType": "long",
      "isStatic": true,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: java.time.LocalTime ofSecondOfDay(long)>"
    },
    {
      "name": "ofNanoOfDay",
      "retType": "java.time.LocalTime",
      "argType": "long",
      "isStatic": true,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: java.time.LocalTime ofNanoOfDay(long)>"
    },
    {
      "name": "from",
      "retType": "java.time.LocalTime",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": true,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: java.time.LocalTime 'from'(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "parse",
      "retType": "java.time.LocalTime",
      "argType": "java.lang.CharSequence",
      "isStatic": true,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: java.time.LocalTime parse(java.lang.CharSequence)>"
    },
    {
      "name": "parse",
      "retType": "java.time.LocalTime",
      "argType": "java.lang.CharSequence",
      "argType": "java.time.format.DateTimeFormatter",
      "isStatic": true,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: java.time.LocalTime parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)>"
    },
    {
      "name": "isSupported",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: boolean isSupported(java.time.temporal.TemporalField)>"
    },
    {
      "name": "isSupported",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: boolean isSupported(java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "range",
      "retType": "java.time.temporal.ValueRange",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
    },
    {
      "name": "get",
      "retType": "int",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: int get(java.time.temporal.TemporalField)>"
    },
    {
      "name": "getLong",
      "retType": "long",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: long getLong(java.time.temporal.TemporalField)>"
    },
    {
      "name": "getHour",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: int getHour()>"
    },
    {
      "name": "getMinute",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: int getMinute()>"
    },
    {
      "name": "getSecond",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: int getSecond()>"
    },
    {
      "name": "getNano",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: int getNano()>"
    },
    {
      "name": "with",
      "retType": "java.time.LocalTime",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: java.time.LocalTime 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "with",
      "retType": "java.time.LocalTime",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: java.time.LocalTime 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "withHour",
      "retType": "java.time.LocalTime",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: java.time.LocalTime withHour(int)>"
    },
    {
      "name": "withMinute",
      "retType": "java.time.LocalTime",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: java.time.LocalTime withMinute(int)>"
    },
    {
      "name": "withSecond",
      "retType": "java.time.LocalTime",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: java.time.LocalTime withSecond(int)>"
    },
    {
      "name": "withNano",
      "retType": "java.time.LocalTime",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: java.time.LocalTime withNano(int)>"
    },
    {
      "name": "truncatedTo",
      "retType": "java.time.LocalTime",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: java.time.LocalTime truncatedTo(java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "plus",
      "retType": "java.time.LocalTime",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: java.time.LocalTime plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "plus",
      "retType": "java.time.LocalTime",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: java.time.LocalTime plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "plusHours",
      "retType": "java.time.LocalTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: java.time.LocalTime plusHours(long)>"
    },
    {
      "name": "plusMinutes",
      "retType": "java.time.LocalTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: java.time.LocalTime plusMinutes(long)>"
    },
    {
      "name": "plusSeconds",
      "retType": "java.time.LocalTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: java.time.LocalTime plusSeconds(long)>"
    },
    {
      "name": "plusNanos",
      "retType": "java.time.LocalTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: java.time.LocalTime plusNanos(long)>"
    },
    {
      "name": "minus",
      "retType": "java.time.LocalTime",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: java.time.LocalTime minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "minus",
      "retType": "java.time.LocalTime",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: java.time.LocalTime minus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minusHours",
      "retType": "java.time.LocalTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: java.time.LocalTime minusHours(long)>"
    },
    {
      "name": "minusMinutes",
      "retType": "java.time.LocalTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: java.time.LocalTime minusMinutes(long)>"
    },
    {
      "name": "minusSeconds",
      "retType": "java.time.LocalTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: java.time.LocalTime minusSeconds(long)>"
    },
    {
      "name": "minusNanos",
      "retType": "java.time.LocalTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: java.time.LocalTime minusNanos(long)>"
    },
    {
      "name": "query",
      "retType": "java.lang.Object",
      "argType": "java.time.temporal.TemporalQuery",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: java.lang.Object query(java.time.temporal.TemporalQuery)>"
    },
    {
      "name": "adjustInto",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.Temporal",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>"
    },
    {
      "name": "until",
      "retType": "long",
      "argType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "format",
      "retType": "java.lang.String",
      "argType": "java.time.format.DateTimeFormatter",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: java.lang.String format(java.time.format.DateTimeFormatter)>"
    },
    {
      "name": "atDate",
      "retType": "java.time.LocalDateTime",
      "argType": "java.time.LocalDate",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: java.time.LocalDateTime atDate(java.time.LocalDate)>"
    },
    {
      "name": "atOffset",
      "retType": "java.time.OffsetTime",
      "argType": "java.time.ZoneOffset",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: java.time.OffsetTime atOffset(java.time.ZoneOffset)>"
    },
    {
      "name": "toSecondOfDay",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: int toSecondOfDay()>"
    },
    {
      "name": "toNanoOfDay",
      "retType": "long",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: long toNanoOfDay()>"
    },
    {
      "name": "isAfter",
      "retType": "boolean",
      "argType": "java.time.LocalTime",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: boolean isAfter(java.time.LocalTime)>"
    },
    {
      "name": "isBefore",
      "retType": "boolean",
      "argType": "java.time.LocalTime",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: boolean isBefore(java.time.LocalTime)>"
    },
    {
      "name": "equals",
      "retType": "boolean",
      "argType": "java.lang.Object",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: boolean equals(java.lang.Object)>"
    },
    {
      "name": "minus",
      "retType": "java.time.temporal.Temporal",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minus",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "plus",
      "retType": "java.time.temporal.Temporal",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "plus",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "with",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "with",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.LocalTime",
      "isConstructor": false,
      "method": "<java.time.LocalTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "values",
      "retType": "java.time.Month[]",
      "isStatic": true,
      "hostClass": "java.time.Month",
      "isConstructor": false,
      "method": "<java.time.Month: java.time.Month[] values()>"
    },
    {
      "name": "valueOf",
      "retType": "java.time.Month",
      "argType": "java.lang.String",
      "isStatic": true,
      "hostClass": "java.time.Month",
      "isConstructor": false,
      "method": "<java.time.Month: java.time.Month valueOf(java.lang.String)>"
    },
    {
      "name": "of",
      "retType": "java.time.Month",
      "argType": "int",
      "isStatic": true,
      "hostClass": "java.time.Month",
      "isConstructor": false,
      "method": "<java.time.Month: java.time.Month of(int)>"
    },
    {
      "name": "from",
      "retType": "java.time.Month",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": true,
      "hostClass": "java.time.Month",
      "isConstructor": false,
      "method": "<java.time.Month: java.time.Month 'from'(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "getValue",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.Month",
      "isConstructor": false,
      "method": "<java.time.Month: int getValue()>"
    },
    {
      "name": "getDisplayName",
      "retType": "java.lang.String",
      "argType": "java.time.format.TextStyle",
      "argType": "java.util.Locale",
      "isStatic": false,
      "hostClass": "java.time.Month",
      "isConstructor": false,
      "method": "<java.time.Month: java.lang.String getDisplayName(java.time.format.TextStyle,java.util.Locale)>"
    },
    {
      "name": "isSupported",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.Month",
      "isConstructor": false,
      "method": "<java.time.Month: boolean isSupported(java.time.temporal.TemporalField)>"
    },
    {
      "name": "range",
      "retType": "java.time.temporal.ValueRange",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.Month",
      "isConstructor": false,
      "method": "<java.time.Month: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
    },
    {
      "name": "get",
      "retType": "int",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.Month",
      "isConstructor": false,
      "method": "<java.time.Month: int get(java.time.temporal.TemporalField)>"
    },
    {
      "name": "getLong",
      "retType": "long",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.Month",
      "isConstructor": false,
      "method": "<java.time.Month: long getLong(java.time.temporal.TemporalField)>"
    },
    {
      "name": "plus",
      "retType": "java.time.Month",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.Month",
      "isConstructor": false,
      "method": "<java.time.Month: java.time.Month plus(long)>"
    },
    {
      "name": "minus",
      "retType": "java.time.Month",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.Month",
      "isConstructor": false,
      "method": "<java.time.Month: java.time.Month minus(long)>"
    },
    {
      "name": "length",
      "retType": "int",
      "argType": "boolean",
      "isStatic": false,
      "hostClass": "java.time.Month",
      "isConstructor": false,
      "method": "<java.time.Month: int length(boolean)>"
    },
    {
      "name": "minLength",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.Month",
      "isConstructor": false,
      "method": "<java.time.Month: int minLength()>"
    },
    {
      "name": "maxLength",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.Month",
      "isConstructor": false,
      "method": "<java.time.Month: int maxLength()>"
    },
    {
      "name": "firstDayOfYear",
      "retType": "int",
      "argType": "boolean",
      "isStatic": false,
      "hostClass": "java.time.Month",
      "isConstructor": false,
      "method": "<java.time.Month: int firstDayOfYear(boolean)>"
    },
    {
      "name": "firstMonthOfQuarter",
      "retType": "java.time.Month",
      "isStatic": false,
      "hostClass": "java.time.Month",
      "isConstructor": false,
      "method": "<java.time.Month: java.time.Month firstMonthOfQuarter()>"
    },
    {
      "name": "query",
      "retType": "java.lang.Object",
      "argType": "java.time.temporal.TemporalQuery",
      "isStatic": false,
      "hostClass": "java.time.Month",
      "isConstructor": false,
      "method": "<java.time.Month: java.lang.Object query(java.time.temporal.TemporalQuery)>"
    },
    {
      "name": "adjustInto",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.Temporal",
      "isStatic": false,
      "hostClass": "java.time.Month",
      "isConstructor": false,
      "method": "<java.time.Month: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>"
    },
    {
      "name": "now",
      "retType": "java.time.MonthDay",
      "isStatic": true,
      "hostClass": "java.time.MonthDay",
      "isConstructor": false,
      "method": "<java.time.MonthDay: java.time.MonthDay now()>"
    },
    {
      "name": "now",
      "retType": "java.time.MonthDay",
      "argType": "java.time.ZoneId",
      "isStatic": true,
      "hostClass": "java.time.MonthDay",
      "isConstructor": false,
      "method": "<java.time.MonthDay: java.time.MonthDay now(java.time.ZoneId)>"
    },
    {
      "name": "now",
      "retType": "java.time.MonthDay",
      "argType": "java.time.Clock",
      "isStatic": true,
      "hostClass": "java.time.MonthDay",
      "isConstructor": false,
      "method": "<java.time.MonthDay: java.time.MonthDay now(java.time.Clock)>"
    },
    {
      "name": "of",
      "retType": "java.time.MonthDay",
      "argType": "java.time.Month",
      "argType": "int",
      "isStatic": true,
      "hostClass": "java.time.MonthDay",
      "isConstructor": false,
      "method": "<java.time.MonthDay: java.time.MonthDay of(java.time.Month,int)>"
    },
    {
      "name": "of",
      "retType": "java.time.MonthDay",
      "argType": "int",
      "argType": "int",
      "isStatic": true,
      "hostClass": "java.time.MonthDay",
      "isConstructor": false,
      "method": "<java.time.MonthDay: java.time.MonthDay of(int,int)>"
    },
    {
      "name": "from",
      "retType": "java.time.MonthDay",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": true,
      "hostClass": "java.time.MonthDay",
      "isConstructor": false,
      "method": "<java.time.MonthDay: java.time.MonthDay 'from'(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "parse",
      "retType": "java.time.MonthDay",
      "argType": "java.lang.CharSequence",
      "isStatic": true,
      "hostClass": "java.time.MonthDay",
      "isConstructor": false,
      "method": "<java.time.MonthDay: java.time.MonthDay parse(java.lang.CharSequence)>"
    },
    {
      "name": "parse",
      "retType": "java.time.MonthDay",
      "argType": "java.lang.CharSequence",
      "argType": "java.time.format.DateTimeFormatter",
      "isStatic": true,
      "hostClass": "java.time.MonthDay",
      "isConstructor": false,
      "method": "<java.time.MonthDay: java.time.MonthDay parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)>"
    },
    {
      "name": "isSupported",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.MonthDay",
      "isConstructor": false,
      "method": "<java.time.MonthDay: boolean isSupported(java.time.temporal.TemporalField)>"
    },
    {
      "name": "range",
      "retType": "java.time.temporal.ValueRange",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.MonthDay",
      "isConstructor": false,
      "method": "<java.time.MonthDay: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
    },
    {
      "name": "get",
      "retType": "int",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.MonthDay",
      "isConstructor": false,
      "method": "<java.time.MonthDay: int get(java.time.temporal.TemporalField)>"
    },
    {
      "name": "getLong",
      "retType": "long",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.MonthDay",
      "isConstructor": false,
      "method": "<java.time.MonthDay: long getLong(java.time.temporal.TemporalField)>"
    },
    {
      "name": "getMonthValue",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.MonthDay",
      "isConstructor": false,
      "method": "<java.time.MonthDay: int getMonthValue()>"
    },
    {
      "name": "getMonth",
      "retType": "java.time.Month",
      "isStatic": false,
      "hostClass": "java.time.MonthDay",
      "isConstructor": false,
      "method": "<java.time.MonthDay: java.time.Month getMonth()>"
    },
    {
      "name": "getDayOfMonth",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.MonthDay",
      "isConstructor": false,
      "method": "<java.time.MonthDay: int getDayOfMonth()>"
    },
    {
      "name": "isValidYear",
      "retType": "boolean",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.MonthDay",
      "isConstructor": false,
      "method": "<java.time.MonthDay: boolean isValidYear(int)>"
    },
    {
      "name": "withMonth",
      "retType": "java.time.MonthDay",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.MonthDay",
      "isConstructor": false,
      "method": "<java.time.MonthDay: java.time.MonthDay withMonth(int)>"
    },
    {
      "name": "with",
      "retType": "java.time.MonthDay",
      "argType": "java.time.Month",
      "isStatic": false,
      "hostClass": "java.time.MonthDay",
      "isConstructor": false,
      "method": "<java.time.MonthDay: java.time.MonthDay 'with'(java.time.Month)>"
    },
    {
      "name": "withDayOfMonth",
      "retType": "java.time.MonthDay",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.MonthDay",
      "isConstructor": false,
      "method": "<java.time.MonthDay: java.time.MonthDay withDayOfMonth(int)>"
    },
    {
      "name": "query",
      "retType": "java.lang.Object",
      "argType": "java.time.temporal.TemporalQuery",
      "isStatic": false,
      "hostClass": "java.time.MonthDay",
      "isConstructor": false,
      "method": "<java.time.MonthDay: java.lang.Object query(java.time.temporal.TemporalQuery)>"
    },
    {
      "name": "adjustInto",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.Temporal",
      "isStatic": false,
      "hostClass": "java.time.MonthDay",
      "isConstructor": false,
      "method": "<java.time.MonthDay: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>"
    },
    {
      "name": "format",
      "retType": "java.lang.String",
      "argType": "java.time.format.DateTimeFormatter",
      "isStatic": false,
      "hostClass": "java.time.MonthDay",
      "isConstructor": false,
      "method": "<java.time.MonthDay: java.lang.String format(java.time.format.DateTimeFormatter)>"
    },
    {
      "name": "atYear",
      "retType": "java.time.LocalDate",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.MonthDay",
      "isConstructor": false,
      "method": "<java.time.MonthDay: java.time.LocalDate atYear(int)>"
    },
    {
      "name": "isAfter",
      "retType": "boolean",
      "argType": "java.time.MonthDay",
      "isStatic": false,
      "hostClass": "java.time.MonthDay",
      "isConstructor": false,
      "method": "<java.time.MonthDay: boolean isAfter(java.time.MonthDay)>"
    },
    {
      "name": "isBefore",
      "retType": "boolean",
      "argType": "java.time.MonthDay",
      "isStatic": false,
      "hostClass": "java.time.MonthDay",
      "isConstructor": false,
      "method": "<java.time.MonthDay: boolean isBefore(java.time.MonthDay)>"
    },
    {
      "name": "equals",
      "retType": "boolean",
      "argType": "java.lang.Object",
      "isStatic": false,
      "hostClass": "java.time.MonthDay",
      "isConstructor": false,
      "method": "<java.time.MonthDay: boolean equals(java.lang.Object)>"
    },
    {
      "name": "timeLineOrder",
      "retType": "java.util.Comparator",
      "isStatic": true,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.util.Comparator timeLineOrder()>"
    },
    {
      "name": "now",
      "retType": "java.time.OffsetDateTime",
      "isStatic": true,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.OffsetDateTime now()>"
    },
    {
      "name": "now",
      "retType": "java.time.OffsetDateTime",
      "argType": "java.time.ZoneId",
      "isStatic": true,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.OffsetDateTime now(java.time.ZoneId)>"
    },
    {
      "name": "now",
      "retType": "java.time.OffsetDateTime",
      "argType": "java.time.Clock",
      "isStatic": true,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.OffsetDateTime now(java.time.Clock)>"
    },
    {
      "name": "of",
      "retType": "java.time.OffsetDateTime",
      "argType": "java.time.LocalDate",
      "argType": "java.time.LocalTime",
      "argType": "java.time.ZoneOffset",
      "isStatic": true,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.OffsetDateTime of(java.time.LocalDate,java.time.LocalTime,java.time.ZoneOffset)>"
    },
    {
      "name": "of",
      "retType": "java.time.OffsetDateTime",
      "argType": "java.time.LocalDateTime",
      "argType": "java.time.ZoneOffset",
      "isStatic": true,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.OffsetDateTime of(java.time.LocalDateTime,java.time.ZoneOffset)>"
    },
    {
      "name": "ofInstant",
      "retType": "java.time.OffsetDateTime",
      "argType": "java.time.Instant",
      "argType": "java.time.ZoneId",
      "isStatic": true,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.OffsetDateTime ofInstant(java.time.Instant,java.time.ZoneId)>"
    },
    {
      "name": "from",
      "retType": "java.time.OffsetDateTime",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": true,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.OffsetDateTime 'from'(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "parse",
      "retType": "java.time.OffsetDateTime",
      "argType": "java.lang.CharSequence",
      "isStatic": true,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.OffsetDateTime parse(java.lang.CharSequence)>"
    },
    {
      "name": "parse",
      "retType": "java.time.OffsetDateTime",
      "argType": "java.lang.CharSequence",
      "argType": "java.time.format.DateTimeFormatter",
      "isStatic": true,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.OffsetDateTime parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)>"
    },
    {
      "name": "isSupported",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: boolean isSupported(java.time.temporal.TemporalField)>"
    },
    {
      "name": "isSupported",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: boolean isSupported(java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "range",
      "retType": "java.time.temporal.ValueRange",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
    },
    {
      "name": "get",
      "retType": "int",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: int get(java.time.temporal.TemporalField)>"
    },
    {
      "name": "getLong",
      "retType": "long",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: long getLong(java.time.temporal.TemporalField)>"
    },
    {
      "name": "getOffset",
      "retType": "java.time.ZoneOffset",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.ZoneOffset getOffset()>"
    },
    {
      "name": "withOffsetSameLocal",
      "retType": "java.time.OffsetDateTime",
      "argType": "java.time.ZoneOffset",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.OffsetDateTime withOffsetSameLocal(java.time.ZoneOffset)>"
    },
    {
      "name": "withOffsetSameInstant",
      "retType": "java.time.OffsetDateTime",
      "argType": "java.time.ZoneOffset",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.OffsetDateTime withOffsetSameInstant(java.time.ZoneOffset)>"
    },
    {
      "name": "toLocalDateTime",
      "retType": "java.time.LocalDateTime",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.LocalDateTime toLocalDateTime()>"
    },
    {
      "name": "toLocalDate",
      "retType": "java.time.LocalDate",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.LocalDate toLocalDate()>"
    },
    {
      "name": "getYear",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: int getYear()>"
    },
    {
      "name": "getMonthValue",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: int getMonthValue()>"
    },
    {
      "name": "getMonth",
      "retType": "java.time.Month",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.Month getMonth()>"
    },
    {
      "name": "getDayOfMonth",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: int getDayOfMonth()>"
    },
    {
      "name": "getDayOfYear",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: int getDayOfYear()>"
    },
    {
      "name": "getDayOfWeek",
      "retType": "java.time.DayOfWeek",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.DayOfWeek getDayOfWeek()>"
    },
    {
      "name": "toLocalTime",
      "retType": "java.time.LocalTime",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.LocalTime toLocalTime()>"
    },
    {
      "name": "getHour",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: int getHour()>"
    },
    {
      "name": "getMinute",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: int getMinute()>"
    },
    {
      "name": "getSecond",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: int getSecond()>"
    },
    {
      "name": "getNano",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: int getNano()>"
    },
    {
      "name": "with",
      "retType": "java.time.OffsetDateTime",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.OffsetDateTime 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "with",
      "retType": "java.time.OffsetDateTime",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.OffsetDateTime 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "withYear",
      "retType": "java.time.OffsetDateTime",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.OffsetDateTime withYear(int)>"
    },
    {
      "name": "withMonth",
      "retType": "java.time.OffsetDateTime",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.OffsetDateTime withMonth(int)>"
    },
    {
      "name": "withDayOfMonth",
      "retType": "java.time.OffsetDateTime",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.OffsetDateTime withDayOfMonth(int)>"
    },
    {
      "name": "withDayOfYear",
      "retType": "java.time.OffsetDateTime",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.OffsetDateTime withDayOfYear(int)>"
    },
    {
      "name": "withHour",
      "retType": "java.time.OffsetDateTime",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.OffsetDateTime withHour(int)>"
    },
    {
      "name": "withMinute",
      "retType": "java.time.OffsetDateTime",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.OffsetDateTime withMinute(int)>"
    },
    {
      "name": "withSecond",
      "retType": "java.time.OffsetDateTime",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.OffsetDateTime withSecond(int)>"
    },
    {
      "name": "withNano",
      "retType": "java.time.OffsetDateTime",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.OffsetDateTime withNano(int)>"
    },
    {
      "name": "truncatedTo",
      "retType": "java.time.OffsetDateTime",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.OffsetDateTime truncatedTo(java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "plus",
      "retType": "java.time.OffsetDateTime",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.OffsetDateTime plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "plus",
      "retType": "java.time.OffsetDateTime",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.OffsetDateTime plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "plusYears",
      "retType": "java.time.OffsetDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.OffsetDateTime plusYears(long)>"
    },
    {
      "name": "plusMonths",
      "retType": "java.time.OffsetDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.OffsetDateTime plusMonths(long)>"
    },
    {
      "name": "plusWeeks",
      "retType": "java.time.OffsetDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.OffsetDateTime plusWeeks(long)>"
    },
    {
      "name": "plusDays",
      "retType": "java.time.OffsetDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.OffsetDateTime plusDays(long)>"
    },
    {
      "name": "plusHours",
      "retType": "java.time.OffsetDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.OffsetDateTime plusHours(long)>"
    },
    {
      "name": "plusMinutes",
      "retType": "java.time.OffsetDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.OffsetDateTime plusMinutes(long)>"
    },
    {
      "name": "plusSeconds",
      "retType": "java.time.OffsetDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.OffsetDateTime plusSeconds(long)>"
    },
    {
      "name": "plusNanos",
      "retType": "java.time.OffsetDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.OffsetDateTime plusNanos(long)>"
    },
    {
      "name": "minus",
      "retType": "java.time.OffsetDateTime",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.OffsetDateTime minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "minus",
      "retType": "java.time.OffsetDateTime",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.OffsetDateTime minus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minusYears",
      "retType": "java.time.OffsetDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.OffsetDateTime minusYears(long)>"
    },
    {
      "name": "minusMonths",
      "retType": "java.time.OffsetDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.OffsetDateTime minusMonths(long)>"
    },
    {
      "name": "minusWeeks",
      "retType": "java.time.OffsetDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.OffsetDateTime minusWeeks(long)>"
    },
    {
      "name": "minusDays",
      "retType": "java.time.OffsetDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.OffsetDateTime minusDays(long)>"
    },
    {
      "name": "minusHours",
      "retType": "java.time.OffsetDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.OffsetDateTime minusHours(long)>"
    },
    {
      "name": "minusMinutes",
      "retType": "java.time.OffsetDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.OffsetDateTime minusMinutes(long)>"
    },
    {
      "name": "minusSeconds",
      "retType": "java.time.OffsetDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.OffsetDateTime minusSeconds(long)>"
    },
    {
      "name": "minusNanos",
      "retType": "java.time.OffsetDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.OffsetDateTime minusNanos(long)>"
    },
    {
      "name": "query",
      "retType": "java.lang.Object",
      "argType": "java.time.temporal.TemporalQuery",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.lang.Object query(java.time.temporal.TemporalQuery)>"
    },
    {
      "name": "adjustInto",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.Temporal",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>"
    },
    {
      "name": "until",
      "retType": "long",
      "argType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "format",
      "retType": "java.lang.String",
      "argType": "java.time.format.DateTimeFormatter",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.lang.String format(java.time.format.DateTimeFormatter)>"
    },
    {
      "name": "atZoneSameInstant",
      "retType": "java.time.ZonedDateTime",
      "argType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.ZonedDateTime atZoneSameInstant(java.time.ZoneId)>"
    },
    {
      "name": "atZoneSimilarLocal",
      "retType": "java.time.ZonedDateTime",
      "argType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.ZonedDateTime atZoneSimilarLocal(java.time.ZoneId)>"
    },
    {
      "name": "toOffsetTime",
      "retType": "java.time.OffsetTime",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.OffsetTime toOffsetTime()>"
    },
    {
      "name": "toZonedDateTime",
      "retType": "java.time.ZonedDateTime",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.ZonedDateTime toZonedDateTime()>"
    },
    {
      "name": "toInstant",
      "retType": "java.time.Instant",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.Instant toInstant()>"
    },
    {
      "name": "toEpochSecond",
      "retType": "long",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: long toEpochSecond()>"
    },
    {
      "name": "isAfter",
      "retType": "boolean",
      "argType": "java.time.OffsetDateTime",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: boolean isAfter(java.time.OffsetDateTime)>"
    },
    {
      "name": "isBefore",
      "retType": "boolean",
      "argType": "java.time.OffsetDateTime",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: boolean isBefore(java.time.OffsetDateTime)>"
    },
    {
      "name": "isEqual",
      "retType": "boolean",
      "argType": "java.time.OffsetDateTime",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: boolean isEqual(java.time.OffsetDateTime)>"
    },
    {
      "name": "equals",
      "retType": "boolean",
      "argType": "java.lang.Object",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: boolean equals(java.lang.Object)>"
    },
    {
      "name": "minus",
      "retType": "java.time.temporal.Temporal",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minus",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "plus",
      "retType": "java.time.temporal.Temporal",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "plus",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "with",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "with",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.OffsetDateTime",
      "isConstructor": false,
      "method": "<java.time.OffsetDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "now",
      "retType": "java.time.OffsetTime",
      "isStatic": true,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: java.time.OffsetTime now()>"
    },
    {
      "name": "now",
      "retType": "java.time.OffsetTime",
      "argType": "java.time.ZoneId",
      "isStatic": true,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: java.time.OffsetTime now(java.time.ZoneId)>"
    },
    {
      "name": "now",
      "retType": "java.time.OffsetTime",
      "argType": "java.time.Clock",
      "isStatic": true,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: java.time.OffsetTime now(java.time.Clock)>"
    },
    {
      "name": "of",
      "retType": "java.time.OffsetTime",
      "argType": "java.time.LocalTime",
      "argType": "java.time.ZoneOffset",
      "isStatic": true,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: java.time.OffsetTime of(java.time.LocalTime,java.time.ZoneOffset)>"
    },
    {
      "name": "ofInstant",
      "retType": "java.time.OffsetTime",
      "argType": "java.time.Instant",
      "argType": "java.time.ZoneId",
      "isStatic": true,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: java.time.OffsetTime ofInstant(java.time.Instant,java.time.ZoneId)>"
    },
    {
      "name": "from",
      "retType": "java.time.OffsetTime",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": true,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: java.time.OffsetTime 'from'(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "parse",
      "retType": "java.time.OffsetTime",
      "argType": "java.lang.CharSequence",
      "isStatic": true,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: java.time.OffsetTime parse(java.lang.CharSequence)>"
    },
    {
      "name": "parse",
      "retType": "java.time.OffsetTime",
      "argType": "java.lang.CharSequence",
      "argType": "java.time.format.DateTimeFormatter",
      "isStatic": true,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: java.time.OffsetTime parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)>"
    },
    {
      "name": "isSupported",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: boolean isSupported(java.time.temporal.TemporalField)>"
    },
    {
      "name": "isSupported",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: boolean isSupported(java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "range",
      "retType": "java.time.temporal.ValueRange",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
    },
    {
      "name": "get",
      "retType": "int",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: int get(java.time.temporal.TemporalField)>"
    },
    {
      "name": "getLong",
      "retType": "long",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: long getLong(java.time.temporal.TemporalField)>"
    },
    {
      "name": "getOffset",
      "retType": "java.time.ZoneOffset",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: java.time.ZoneOffset getOffset()>"
    },
    {
      "name": "withOffsetSameLocal",
      "retType": "java.time.OffsetTime",
      "argType": "java.time.ZoneOffset",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: java.time.OffsetTime withOffsetSameLocal(java.time.ZoneOffset)>"
    },
    {
      "name": "withOffsetSameInstant",
      "retType": "java.time.OffsetTime",
      "argType": "java.time.ZoneOffset",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: java.time.OffsetTime withOffsetSameInstant(java.time.ZoneOffset)>"
    },
    {
      "name": "toLocalTime",
      "retType": "java.time.LocalTime",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: java.time.LocalTime toLocalTime()>"
    },
    {
      "name": "getHour",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: int getHour()>"
    },
    {
      "name": "getMinute",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: int getMinute()>"
    },
    {
      "name": "getSecond",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: int getSecond()>"
    },
    {
      "name": "getNano",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: int getNano()>"
    },
    {
      "name": "with",
      "retType": "java.time.OffsetTime",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: java.time.OffsetTime 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "with",
      "retType": "java.time.OffsetTime",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: java.time.OffsetTime 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "withHour",
      "retType": "java.time.OffsetTime",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: java.time.OffsetTime withHour(int)>"
    },
    {
      "name": "withMinute",
      "retType": "java.time.OffsetTime",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: java.time.OffsetTime withMinute(int)>"
    },
    {
      "name": "withSecond",
      "retType": "java.time.OffsetTime",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: java.time.OffsetTime withSecond(int)>"
    },
    {
      "name": "withNano",
      "retType": "java.time.OffsetTime",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: java.time.OffsetTime withNano(int)>"
    },
    {
      "name": "truncatedTo",
      "retType": "java.time.OffsetTime",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: java.time.OffsetTime truncatedTo(java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "plus",
      "retType": "java.time.OffsetTime",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: java.time.OffsetTime plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "plus",
      "retType": "java.time.OffsetTime",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: java.time.OffsetTime plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "plusHours",
      "retType": "java.time.OffsetTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: java.time.OffsetTime plusHours(long)>"
    },
    {
      "name": "plusMinutes",
      "retType": "java.time.OffsetTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: java.time.OffsetTime plusMinutes(long)>"
    },
    {
      "name": "plusSeconds",
      "retType": "java.time.OffsetTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: java.time.OffsetTime plusSeconds(long)>"
    },
    {
      "name": "plusNanos",
      "retType": "java.time.OffsetTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: java.time.OffsetTime plusNanos(long)>"
    },
    {
      "name": "minus",
      "retType": "java.time.OffsetTime",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: java.time.OffsetTime minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "minus",
      "retType": "java.time.OffsetTime",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: java.time.OffsetTime minus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minusHours",
      "retType": "java.time.OffsetTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: java.time.OffsetTime minusHours(long)>"
    },
    {
      "name": "minusMinutes",
      "retType": "java.time.OffsetTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: java.time.OffsetTime minusMinutes(long)>"
    },
    {
      "name": "minusSeconds",
      "retType": "java.time.OffsetTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: java.time.OffsetTime minusSeconds(long)>"
    },
    {
      "name": "minusNanos",
      "retType": "java.time.OffsetTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: java.time.OffsetTime minusNanos(long)>"
    },
    {
      "name": "query",
      "retType": "java.lang.Object",
      "argType": "java.time.temporal.TemporalQuery",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: java.lang.Object query(java.time.temporal.TemporalQuery)>"
    },
    {
      "name": "adjustInto",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.Temporal",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>"
    },
    {
      "name": "until",
      "retType": "long",
      "argType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "format",
      "retType": "java.lang.String",
      "argType": "java.time.format.DateTimeFormatter",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: java.lang.String format(java.time.format.DateTimeFormatter)>"
    },
    {
      "name": "atDate",
      "retType": "java.time.OffsetDateTime",
      "argType": "java.time.LocalDate",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: java.time.OffsetDateTime atDate(java.time.LocalDate)>"
    },
    {
      "name": "isAfter",
      "retType": "boolean",
      "argType": "java.time.OffsetTime",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: boolean isAfter(java.time.OffsetTime)>"
    },
    {
      "name": "isBefore",
      "retType": "boolean",
      "argType": "java.time.OffsetTime",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: boolean isBefore(java.time.OffsetTime)>"
    },
    {
      "name": "isEqual",
      "retType": "boolean",
      "argType": "java.time.OffsetTime",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: boolean isEqual(java.time.OffsetTime)>"
    },
    {
      "name": "equals",
      "retType": "boolean",
      "argType": "java.lang.Object",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: boolean equals(java.lang.Object)>"
    },
    {
      "name": "minus",
      "retType": "java.time.temporal.Temporal",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minus",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "plus",
      "retType": "java.time.temporal.Temporal",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "plus",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "with",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "with",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.OffsetTime",
      "isConstructor": false,
      "method": "<java.time.OffsetTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "ofYears",
      "retType": "java.time.Period",
      "argType": "int",
      "isStatic": true,
      "hostClass": "java.time.Period",
      "isConstructor": false,
      "method": "<java.time.Period: java.time.Period ofYears(int)>"
    },
    {
      "name": "ofMonths",
      "retType": "java.time.Period",
      "argType": "int",
      "isStatic": true,
      "hostClass": "java.time.Period",
      "isConstructor": false,
      "method": "<java.time.Period: java.time.Period ofMonths(int)>"
    },
    {
      "name": "ofWeeks",
      "retType": "java.time.Period",
      "argType": "int",
      "isStatic": true,
      "hostClass": "java.time.Period",
      "isConstructor": false,
      "method": "<java.time.Period: java.time.Period ofWeeks(int)>"
    },
    {
      "name": "ofDays",
      "retType": "java.time.Period",
      "argType": "int",
      "isStatic": true,
      "hostClass": "java.time.Period",
      "isConstructor": false,
      "method": "<java.time.Period: java.time.Period ofDays(int)>"
    },
    {
      "name": "of",
      "retType": "java.time.Period",
      "argType": "int",
      "argType": "int",
      "argType": "int",
      "isStatic": true,
      "hostClass": "java.time.Period",
      "isConstructor": false,
      "method": "<java.time.Period: java.time.Period of(int,int,int)>"
    },
    {
      "name": "from",
      "retType": "java.time.Period",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": true,
      "hostClass": "java.time.Period",
      "isConstructor": false,
      "method": "<java.time.Period: java.time.Period 'from'(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "parse",
      "retType": "java.time.Period",
      "argType": "java.lang.CharSequence",
      "isStatic": true,
      "hostClass": "java.time.Period",
      "isConstructor": false,
      "method": "<java.time.Period: java.time.Period parse(java.lang.CharSequence)>"
    },
    {
      "name": "between",
      "retType": "java.time.Period",
      "argType": "java.time.LocalDate",
      "argType": "java.time.LocalDate",
      "isStatic": true,
      "hostClass": "java.time.Period",
      "isConstructor": false,
      "method": "<java.time.Period: java.time.Period between(java.time.LocalDate,java.time.LocalDate)>"
    },
    {
      "name": "get",
      "retType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.Period",
      "isConstructor": false,
      "method": "<java.time.Period: long get(java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "getUnits",
      "retType": "java.util.List",
      "isStatic": false,
      "hostClass": "java.time.Period",
      "isConstructor": false,
      "method": "<java.time.Period: java.util.List getUnits()>"
    },
    {
      "name": "getChronology",
      "retType": "java.time.chrono.IsoChronology",
      "isStatic": false,
      "hostClass": "java.time.Period",
      "isConstructor": false,
      "method": "<java.time.Period: java.time.chrono.IsoChronology getChronology()>"
    },
    {
      "name": "isZero",
      "retType": "boolean",
      "isStatic": false,
      "hostClass": "java.time.Period",
      "isConstructor": false,
      "method": "<java.time.Period: boolean isZero()>"
    },
    {
      "name": "isNegative",
      "retType": "boolean",
      "isStatic": false,
      "hostClass": "java.time.Period",
      "isConstructor": false,
      "method": "<java.time.Period: boolean isNegative()>"
    },
    {
      "name": "getYears",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.Period",
      "isConstructor": false,
      "method": "<java.time.Period: int getYears()>"
    },
    {
      "name": "getMonths",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.Period",
      "isConstructor": false,
      "method": "<java.time.Period: int getMonths()>"
    },
    {
      "name": "getDays",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.Period",
      "isConstructor": false,
      "method": "<java.time.Period: int getDays()>"
    },
    {
      "name": "withYears",
      "retType": "java.time.Period",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.Period",
      "isConstructor": false,
      "method": "<java.time.Period: java.time.Period withYears(int)>"
    },
    {
      "name": "withMonths",
      "retType": "java.time.Period",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.Period",
      "isConstructor": false,
      "method": "<java.time.Period: java.time.Period withMonths(int)>"
    },
    {
      "name": "withDays",
      "retType": "java.time.Period",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.Period",
      "isConstructor": false,
      "method": "<java.time.Period: java.time.Period withDays(int)>"
    },
    {
      "name": "plus",
      "retType": "java.time.Period",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.Period",
      "isConstructor": false,
      "method": "<java.time.Period: java.time.Period plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "plusYears",
      "retType": "java.time.Period",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.Period",
      "isConstructor": false,
      "method": "<java.time.Period: java.time.Period plusYears(long)>"
    },
    {
      "name": "plusMonths",
      "retType": "java.time.Period",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.Period",
      "isConstructor": false,
      "method": "<java.time.Period: java.time.Period plusMonths(long)>"
    },
    {
      "name": "plusDays",
      "retType": "java.time.Period",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.Period",
      "isConstructor": false,
      "method": "<java.time.Period: java.time.Period plusDays(long)>"
    },
    {
      "name": "minus",
      "retType": "java.time.Period",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.Period",
      "isConstructor": false,
      "method": "<java.time.Period: java.time.Period minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "minusYears",
      "retType": "java.time.Period",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.Period",
      "isConstructor": false,
      "method": "<java.time.Period: java.time.Period minusYears(long)>"
    },
    {
      "name": "minusMonths",
      "retType": "java.time.Period",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.Period",
      "isConstructor": false,
      "method": "<java.time.Period: java.time.Period minusMonths(long)>"
    },
    {
      "name": "minusDays",
      "retType": "java.time.Period",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.Period",
      "isConstructor": false,
      "method": "<java.time.Period: java.time.Period minusDays(long)>"
    },
    {
      "name": "multipliedBy",
      "retType": "java.time.Period",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.Period",
      "isConstructor": false,
      "method": "<java.time.Period: java.time.Period multipliedBy(int)>"
    },
    {
      "name": "negated",
      "retType": "java.time.Period",
      "isStatic": false,
      "hostClass": "java.time.Period",
      "isConstructor": false,
      "method": "<java.time.Period: java.time.Period negated()>"
    },
    {
      "name": "normalized",
      "retType": "java.time.Period",
      "isStatic": false,
      "hostClass": "java.time.Period",
      "isConstructor": false,
      "method": "<java.time.Period: java.time.Period normalized()>"
    },
    {
      "name": "toTotalMonths",
      "retType": "long",
      "isStatic": false,
      "hostClass": "java.time.Period",
      "isConstructor": false,
      "method": "<java.time.Period: long toTotalMonths()>"
    },
    {
      "name": "addTo",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.Temporal",
      "isStatic": false,
      "hostClass": "java.time.Period",
      "isConstructor": false,
      "method": "<java.time.Period: java.time.temporal.Temporal addTo(java.time.temporal.Temporal)>"
    },
    {
      "name": "subtractFrom",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.Temporal",
      "isStatic": false,
      "hostClass": "java.time.Period",
      "isConstructor": false,
      "method": "<java.time.Period: java.time.temporal.Temporal subtractFrom(java.time.temporal.Temporal)>"
    },
    {
      "name": "equals",
      "retType": "boolean",
      "argType": "java.lang.Object",
      "isStatic": false,
      "hostClass": "java.time.Period",
      "isConstructor": false,
      "method": "<java.time.Period: boolean equals(java.lang.Object)>"
    },
    {
      "name": "normalized",
      "retType": "java.time.chrono.ChronoPeriod",
      "isStatic": false,
      "hostClass": "java.time.Period",
      "isConstructor": false,
      "method": "<java.time.Period: java.time.chrono.ChronoPeriod normalized()>"
    },
    {
      "name": "negated",
      "retType": "java.time.chrono.ChronoPeriod",
      "isStatic": false,
      "hostClass": "java.time.Period",
      "isConstructor": false,
      "method": "<java.time.Period: java.time.chrono.ChronoPeriod negated()>"
    },
    {
      "name": "multipliedBy",
      "retType": "java.time.chrono.ChronoPeriod",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.Period",
      "isConstructor": false,
      "method": "<java.time.Period: java.time.chrono.ChronoPeriod multipliedBy(int)>"
    },
    {
      "name": "minus",
      "retType": "java.time.chrono.ChronoPeriod",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.Period",
      "isConstructor": false,
      "method": "<java.time.Period: java.time.chrono.ChronoPeriod minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "plus",
      "retType": "java.time.chrono.ChronoPeriod",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.Period",
      "isConstructor": false,
      "method": "<java.time.Period: java.time.chrono.ChronoPeriod plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "getChronology",
      "retType": "java.time.chrono.Chronology",
      "isStatic": false,
      "hostClass": "java.time.Period",
      "isConstructor": false,
      "method": "<java.time.Period: java.time.chrono.Chronology getChronology()>"
    },
    {
      "name": "java.time.Ser",
      "retType": "java.time.Ser",
      "isStatic": false,
      "hostClass": "java.time.Ser",
      "isConstructor": true,
      "method": "<java.time.Ser: void <init>()>"
    },
    {
      "name": "writeExternal",
      "retType": "void",
      "argType": "java.io.ObjectOutput",
      "isStatic": false,
      "hostClass": "java.time.Ser",
      "isConstructor": false,
      "method": "<java.time.Ser: void writeExternal(java.io.ObjectOutput)>"
    },
    {
      "name": "readExternal",
      "retType": "void",
      "argType": "java.io.ObjectInput",
      "isStatic": false,
      "hostClass": "java.time.Ser",
      "isConstructor": false,
      "method": "<java.time.Ser: void readExternal(java.io.ObjectInput)>"
    },
    {
      "name": "now",
      "retType": "java.time.Year",
      "isStatic": true,
      "hostClass": "java.time.Year",
      "isConstructor": false,
      "method": "<java.time.Year: java.time.Year now()>"
    },
    {
      "name": "now",
      "retType": "java.time.Year",
      "argType": "java.time.ZoneId",
      "isStatic": true,
      "hostClass": "java.time.Year",
      "isConstructor": false,
      "method": "<java.time.Year: java.time.Year now(java.time.ZoneId)>"
    },
    {
      "name": "now",
      "retType": "java.time.Year",
      "argType": "java.time.Clock",
      "isStatic": true,
      "hostClass": "java.time.Year",
      "isConstructor": false,
      "method": "<java.time.Year: java.time.Year now(java.time.Clock)>"
    },
    {
      "name": "of",
      "retType": "java.time.Year",
      "argType": "int",
      "isStatic": true,
      "hostClass": "java.time.Year",
      "isConstructor": false,
      "method": "<java.time.Year: java.time.Year of(int)>"
    },
    {
      "name": "from",
      "retType": "java.time.Year",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": true,
      "hostClass": "java.time.Year",
      "isConstructor": false,
      "method": "<java.time.Year: java.time.Year 'from'(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "parse",
      "retType": "java.time.Year",
      "argType": "java.lang.CharSequence",
      "isStatic": true,
      "hostClass": "java.time.Year",
      "isConstructor": false,
      "method": "<java.time.Year: java.time.Year parse(java.lang.CharSequence)>"
    },
    {
      "name": "parse",
      "retType": "java.time.Year",
      "argType": "java.lang.CharSequence",
      "argType": "java.time.format.DateTimeFormatter",
      "isStatic": true,
      "hostClass": "java.time.Year",
      "isConstructor": false,
      "method": "<java.time.Year: java.time.Year parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)>"
    },
    {
      "name": "isLeap",
      "retType": "boolean",
      "argType": "long",
      "isStatic": true,
      "hostClass": "java.time.Year",
      "isConstructor": false,
      "method": "<java.time.Year: boolean isLeap(long)>"
    },
    {
      "name": "getValue",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.Year",
      "isConstructor": false,
      "method": "<java.time.Year: int getValue()>"
    },
    {
      "name": "isSupported",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.Year",
      "isConstructor": false,
      "method": "<java.time.Year: boolean isSupported(java.time.temporal.TemporalField)>"
    },
    {
      "name": "isSupported",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.Year",
      "isConstructor": false,
      "method": "<java.time.Year: boolean isSupported(java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "range",
      "retType": "java.time.temporal.ValueRange",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.Year",
      "isConstructor": false,
      "method": "<java.time.Year: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
    },
    {
      "name": "get",
      "retType": "int",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.Year",
      "isConstructor": false,
      "method": "<java.time.Year: int get(java.time.temporal.TemporalField)>"
    },
    {
      "name": "getLong",
      "retType": "long",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.Year",
      "isConstructor": false,
      "method": "<java.time.Year: long getLong(java.time.temporal.TemporalField)>"
    },
    {
      "name": "isLeap",
      "retType": "boolean",
      "isStatic": false,
      "hostClass": "java.time.Year",
      "isConstructor": false,
      "method": "<java.time.Year: boolean isLeap()>"
    },
    {
      "name": "isValidMonthDay",
      "retType": "boolean",
      "argType": "java.time.MonthDay",
      "isStatic": false,
      "hostClass": "java.time.Year",
      "isConstructor": false,
      "method": "<java.time.Year: boolean isValidMonthDay(java.time.MonthDay)>"
    },
    {
      "name": "length",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.Year",
      "isConstructor": false,
      "method": "<java.time.Year: int length()>"
    },
    {
      "name": "with",
      "retType": "java.time.Year",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.Year",
      "isConstructor": false,
      "method": "<java.time.Year: java.time.Year 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "with",
      "retType": "java.time.Year",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.Year",
      "isConstructor": false,
      "method": "<java.time.Year: java.time.Year 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "plus",
      "retType": "java.time.Year",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.Year",
      "isConstructor": false,
      "method": "<java.time.Year: java.time.Year plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "plus",
      "retType": "java.time.Year",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.Year",
      "isConstructor": false,
      "method": "<java.time.Year: java.time.Year plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "plusYears",
      "retType": "java.time.Year",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.Year",
      "isConstructor": false,
      "method": "<java.time.Year: java.time.Year plusYears(long)>"
    },
    {
      "name": "minus",
      "retType": "java.time.Year",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.Year",
      "isConstructor": false,
      "method": "<java.time.Year: java.time.Year minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "minus",
      "retType": "java.time.Year",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.Year",
      "isConstructor": false,
      "method": "<java.time.Year: java.time.Year minus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minusYears",
      "retType": "java.time.Year",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.Year",
      "isConstructor": false,
      "method": "<java.time.Year: java.time.Year minusYears(long)>"
    },
    {
      "name": "query",
      "retType": "java.lang.Object",
      "argType": "java.time.temporal.TemporalQuery",
      "isStatic": false,
      "hostClass": "java.time.Year",
      "isConstructor": false,
      "method": "<java.time.Year: java.lang.Object query(java.time.temporal.TemporalQuery)>"
    },
    {
      "name": "adjustInto",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.Temporal",
      "isStatic": false,
      "hostClass": "java.time.Year",
      "isConstructor": false,
      "method": "<java.time.Year: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>"
    },
    {
      "name": "until",
      "retType": "long",
      "argType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.Year",
      "isConstructor": false,
      "method": "<java.time.Year: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "format",
      "retType": "java.lang.String",
      "argType": "java.time.format.DateTimeFormatter",
      "isStatic": false,
      "hostClass": "java.time.Year",
      "isConstructor": false,
      "method": "<java.time.Year: java.lang.String format(java.time.format.DateTimeFormatter)>"
    },
    {
      "name": "atDay",
      "retType": "java.time.LocalDate",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.Year",
      "isConstructor": false,
      "method": "<java.time.Year: java.time.LocalDate atDay(int)>"
    },
    {
      "name": "atMonth",
      "retType": "java.time.YearMonth",
      "argType": "java.time.Month",
      "isStatic": false,
      "hostClass": "java.time.Year",
      "isConstructor": false,
      "method": "<java.time.Year: java.time.YearMonth atMonth(java.time.Month)>"
    },
    {
      "name": "atMonth",
      "retType": "java.time.YearMonth",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.Year",
      "isConstructor": false,
      "method": "<java.time.Year: java.time.YearMonth atMonth(int)>"
    },
    {
      "name": "atMonthDay",
      "retType": "java.time.LocalDate",
      "argType": "java.time.MonthDay",
      "isStatic": false,
      "hostClass": "java.time.Year",
      "isConstructor": false,
      "method": "<java.time.Year: java.time.LocalDate atMonthDay(java.time.MonthDay)>"
    },
    {
      "name": "isAfter",
      "retType": "boolean",
      "argType": "java.time.Year",
      "isStatic": false,
      "hostClass": "java.time.Year",
      "isConstructor": false,
      "method": "<java.time.Year: boolean isAfter(java.time.Year)>"
    },
    {
      "name": "isBefore",
      "retType": "boolean",
      "argType": "java.time.Year",
      "isStatic": false,
      "hostClass": "java.time.Year",
      "isConstructor": false,
      "method": "<java.time.Year: boolean isBefore(java.time.Year)>"
    },
    {
      "name": "equals",
      "retType": "boolean",
      "argType": "java.lang.Object",
      "isStatic": false,
      "hostClass": "java.time.Year",
      "isConstructor": false,
      "method": "<java.time.Year: boolean equals(java.lang.Object)>"
    },
    {
      "name": "minus",
      "retType": "java.time.temporal.Temporal",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.Year",
      "isConstructor": false,
      "method": "<java.time.Year: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minus",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.Year",
      "isConstructor": false,
      "method": "<java.time.Year: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "plus",
      "retType": "java.time.temporal.Temporal",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.Year",
      "isConstructor": false,
      "method": "<java.time.Year: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "plus",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.Year",
      "isConstructor": false,
      "method": "<java.time.Year: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "with",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.Year",
      "isConstructor": false,
      "method": "<java.time.Year: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "with",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.Year",
      "isConstructor": false,
      "method": "<java.time.Year: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "now",
      "retType": "java.time.YearMonth",
      "isStatic": true,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: java.time.YearMonth now()>"
    },
    {
      "name": "now",
      "retType": "java.time.YearMonth",
      "argType": "java.time.ZoneId",
      "isStatic": true,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: java.time.YearMonth now(java.time.ZoneId)>"
    },
    {
      "name": "now",
      "retType": "java.time.YearMonth",
      "argType": "java.time.Clock",
      "isStatic": true,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: java.time.YearMonth now(java.time.Clock)>"
    },
    {
      "name": "of",
      "retType": "java.time.YearMonth",
      "argType": "int",
      "argType": "java.time.Month",
      "isStatic": true,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: java.time.YearMonth of(int,java.time.Month)>"
    },
    {
      "name": "of",
      "retType": "java.time.YearMonth",
      "argType": "int",
      "argType": "int",
      "isStatic": true,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: java.time.YearMonth of(int,int)>"
    },
    {
      "name": "from",
      "retType": "java.time.YearMonth",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": true,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: java.time.YearMonth 'from'(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "parse",
      "retType": "java.time.YearMonth",
      "argType": "java.lang.CharSequence",
      "isStatic": true,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: java.time.YearMonth parse(java.lang.CharSequence)>"
    },
    {
      "name": "parse",
      "retType": "java.time.YearMonth",
      "argType": "java.lang.CharSequence",
      "argType": "java.time.format.DateTimeFormatter",
      "isStatic": true,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: java.time.YearMonth parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)>"
    },
    {
      "name": "isSupported",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: boolean isSupported(java.time.temporal.TemporalField)>"
    },
    {
      "name": "isSupported",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: boolean isSupported(java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "range",
      "retType": "java.time.temporal.ValueRange",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
    },
    {
      "name": "get",
      "retType": "int",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: int get(java.time.temporal.TemporalField)>"
    },
    {
      "name": "getLong",
      "retType": "long",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: long getLong(java.time.temporal.TemporalField)>"
    },
    {
      "name": "getYear",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: int getYear()>"
    },
    {
      "name": "getMonthValue",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: int getMonthValue()>"
    },
    {
      "name": "getMonth",
      "retType": "java.time.Month",
      "isStatic": false,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: java.time.Month getMonth()>"
    },
    {
      "name": "isLeapYear",
      "retType": "boolean",
      "isStatic": false,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: boolean isLeapYear()>"
    },
    {
      "name": "isValidDay",
      "retType": "boolean",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: boolean isValidDay(int)>"
    },
    {
      "name": "lengthOfMonth",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: int lengthOfMonth()>"
    },
    {
      "name": "lengthOfYear",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: int lengthOfYear()>"
    },
    {
      "name": "with",
      "retType": "java.time.YearMonth",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: java.time.YearMonth 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "with",
      "retType": "java.time.YearMonth",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: java.time.YearMonth 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "withYear",
      "retType": "java.time.YearMonth",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: java.time.YearMonth withYear(int)>"
    },
    {
      "name": "withMonth",
      "retType": "java.time.YearMonth",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: java.time.YearMonth withMonth(int)>"
    },
    {
      "name": "plus",
      "retType": "java.time.YearMonth",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: java.time.YearMonth plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "plus",
      "retType": "java.time.YearMonth",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: java.time.YearMonth plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "plusYears",
      "retType": "java.time.YearMonth",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: java.time.YearMonth plusYears(long)>"
    },
    {
      "name": "plusMonths",
      "retType": "java.time.YearMonth",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: java.time.YearMonth plusMonths(long)>"
    },
    {
      "name": "minus",
      "retType": "java.time.YearMonth",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: java.time.YearMonth minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "minus",
      "retType": "java.time.YearMonth",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: java.time.YearMonth minus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minusYears",
      "retType": "java.time.YearMonth",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: java.time.YearMonth minusYears(long)>"
    },
    {
      "name": "minusMonths",
      "retType": "java.time.YearMonth",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: java.time.YearMonth minusMonths(long)>"
    },
    {
      "name": "query",
      "retType": "java.lang.Object",
      "argType": "java.time.temporal.TemporalQuery",
      "isStatic": false,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: java.lang.Object query(java.time.temporal.TemporalQuery)>"
    },
    {
      "name": "adjustInto",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.Temporal",
      "isStatic": false,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>"
    },
    {
      "name": "until",
      "retType": "long",
      "argType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "format",
      "retType": "java.lang.String",
      "argType": "java.time.format.DateTimeFormatter",
      "isStatic": false,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: java.lang.String format(java.time.format.DateTimeFormatter)>"
    },
    {
      "name": "atDay",
      "retType": "java.time.LocalDate",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: java.time.LocalDate atDay(int)>"
    },
    {
      "name": "atEndOfMonth",
      "retType": "java.time.LocalDate",
      "isStatic": false,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: java.time.LocalDate atEndOfMonth()>"
    },
    {
      "name": "isAfter",
      "retType": "boolean",
      "argType": "java.time.YearMonth",
      "isStatic": false,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: boolean isAfter(java.time.YearMonth)>"
    },
    {
      "name": "isBefore",
      "retType": "boolean",
      "argType": "java.time.YearMonth",
      "isStatic": false,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: boolean isBefore(java.time.YearMonth)>"
    },
    {
      "name": "equals",
      "retType": "boolean",
      "argType": "java.lang.Object",
      "isStatic": false,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: boolean equals(java.lang.Object)>"
    },
    {
      "name": "minus",
      "retType": "java.time.temporal.Temporal",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minus",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "plus",
      "retType": "java.time.temporal.Temporal",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "plus",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "with",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "with",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.YearMonth",
      "isConstructor": false,
      "method": "<java.time.YearMonth: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "isSupported",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.ZoneId$1",
      "isConstructor": false,
      "method": "<java.time.ZoneId$1: boolean isSupported(java.time.temporal.TemporalField)>"
    },
    {
      "name": "getLong",
      "retType": "long",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.ZoneId$1",
      "isConstructor": false,
      "method": "<java.time.ZoneId$1: long getLong(java.time.temporal.TemporalField)>"
    },
    {
      "name": "query",
      "retType": "java.lang.Object",
      "argType": "java.time.temporal.TemporalQuery",
      "isStatic": false,
      "hostClass": "java.time.ZoneId$1",
      "isConstructor": false,
      "method": "<java.time.ZoneId$1: java.lang.Object query(java.time.temporal.TemporalQuery)>"
    },
    {
      "name": "systemDefault",
      "retType": "java.time.ZoneId",
      "isStatic": true,
      "hostClass": "java.time.ZoneId",
      "isConstructor": false,
      "method": "<java.time.ZoneId: java.time.ZoneId systemDefault()>"
    },
    {
      "name": "getAvailableZoneIds",
      "retType": "java.util.Set",
      "isStatic": true,
      "hostClass": "java.time.ZoneId",
      "isConstructor": false,
      "method": "<java.time.ZoneId: java.util.Set getAvailableZoneIds()>"
    },
    {
      "name": "of",
      "retType": "java.time.ZoneId",
      "argType": "java.lang.String",
      "argType": "java.util.Map",
      "isStatic": true,
      "hostClass": "java.time.ZoneId",
      "isConstructor": false,
      "method": "<java.time.ZoneId: java.time.ZoneId of(java.lang.String,java.util.Map)>"
    },
    {
      "name": "of",
      "retType": "java.time.ZoneId",
      "argType": "java.lang.String",
      "isStatic": true,
      "hostClass": "java.time.ZoneId",
      "isConstructor": false,
      "method": "<java.time.ZoneId: java.time.ZoneId of(java.lang.String)>"
    },
    {
      "name": "ofOffset",
      "retType": "java.time.ZoneId",
      "argType": "java.lang.String",
      "argType": "java.time.ZoneOffset",
      "isStatic": true,
      "hostClass": "java.time.ZoneId",
      "isConstructor": false,
      "method": "<java.time.ZoneId: java.time.ZoneId ofOffset(java.lang.String,java.time.ZoneOffset)>"
    },
    {
      "name": "from",
      "retType": "java.time.ZoneId",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": true,
      "hostClass": "java.time.ZoneId",
      "isConstructor": false,
      "method": "<java.time.ZoneId: java.time.ZoneId 'from'(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "getId",
      "retType": "java.lang.String",
      "isStatic": false,
      "hostClass": "java.time.ZoneId",
      "isConstructor": false,
      "method": "<java.time.ZoneId: java.lang.String getId()>"
    },
    {
      "name": "getDisplayName",
      "retType": "java.lang.String",
      "argType": "java.time.format.TextStyle",
      "argType": "java.util.Locale",
      "isStatic": false,
      "hostClass": "java.time.ZoneId",
      "isConstructor": false,
      "method": "<java.time.ZoneId: java.lang.String getDisplayName(java.time.format.TextStyle,java.util.Locale)>"
    },
    {
      "name": "getRules",
      "retType": "java.time.zone.ZoneRules",
      "isStatic": false,
      "hostClass": "java.time.ZoneId",
      "isConstructor": false,
      "method": "<java.time.ZoneId: java.time.zone.ZoneRules getRules()>"
    },
    {
      "name": "normalized",
      "retType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.ZoneId",
      "isConstructor": false,
      "method": "<java.time.ZoneId: java.time.ZoneId normalized()>"
    },
    {
      "name": "equals",
      "retType": "boolean",
      "argType": "java.lang.Object",
      "isStatic": false,
      "hostClass": "java.time.ZoneId",
      "isConstructor": false,
      "method": "<java.time.ZoneId: boolean equals(java.lang.Object)>"
    },
    {
      "name": "of",
      "retType": "java.time.ZoneOffset",
      "argType": "java.lang.String",
      "isStatic": true,
      "hostClass": "java.time.ZoneOffset",
      "isConstructor": false,
      "method": "<java.time.ZoneOffset: java.time.ZoneOffset of(java.lang.String)>"
    },
    {
      "name": "ofHours",
      "retType": "java.time.ZoneOffset",
      "argType": "int",
      "isStatic": true,
      "hostClass": "java.time.ZoneOffset",
      "isConstructor": false,
      "method": "<java.time.ZoneOffset: java.time.ZoneOffset ofHours(int)>"
    },
    {
      "name": "ofHoursMinutes",
      "retType": "java.time.ZoneOffset",
      "argType": "int",
      "argType": "int",
      "isStatic": true,
      "hostClass": "java.time.ZoneOffset",
      "isConstructor": false,
      "method": "<java.time.ZoneOffset: java.time.ZoneOffset ofHoursMinutes(int,int)>"
    },
    {
      "name": "ofHoursMinutesSeconds",
      "retType": "java.time.ZoneOffset",
      "argType": "int",
      "argType": "int",
      "argType": "int",
      "isStatic": true,
      "hostClass": "java.time.ZoneOffset",
      "isConstructor": false,
      "method": "<java.time.ZoneOffset: java.time.ZoneOffset ofHoursMinutesSeconds(int,int,int)>"
    },
    {
      "name": "from",
      "retType": "java.time.ZoneOffset",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": true,
      "hostClass": "java.time.ZoneOffset",
      "isConstructor": false,
      "method": "<java.time.ZoneOffset: java.time.ZoneOffset 'from'(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "ofTotalSeconds",
      "retType": "java.time.ZoneOffset",
      "argType": "int",
      "isStatic": true,
      "hostClass": "java.time.ZoneOffset",
      "isConstructor": false,
      "method": "<java.time.ZoneOffset: java.time.ZoneOffset ofTotalSeconds(int)>"
    },
    {
      "name": "getTotalSeconds",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.ZoneOffset",
      "isConstructor": false,
      "method": "<java.time.ZoneOffset: int getTotalSeconds()>"
    },
    {
      "name": "getId",
      "retType": "java.lang.String",
      "isStatic": false,
      "hostClass": "java.time.ZoneOffset",
      "isConstructor": false,
      "method": "<java.time.ZoneOffset: java.lang.String getId()>"
    },
    {
      "name": "getRules",
      "retType": "java.time.zone.ZoneRules",
      "isStatic": false,
      "hostClass": "java.time.ZoneOffset",
      "isConstructor": false,
      "method": "<java.time.ZoneOffset: java.time.zone.ZoneRules getRules()>"
    },
    {
      "name": "isSupported",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.ZoneOffset",
      "isConstructor": false,
      "method": "<java.time.ZoneOffset: boolean isSupported(java.time.temporal.TemporalField)>"
    },
    {
      "name": "range",
      "retType": "java.time.temporal.ValueRange",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.ZoneOffset",
      "isConstructor": false,
      "method": "<java.time.ZoneOffset: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
    },
    {
      "name": "get",
      "retType": "int",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.ZoneOffset",
      "isConstructor": false,
      "method": "<java.time.ZoneOffset: int get(java.time.temporal.TemporalField)>"
    },
    {
      "name": "getLong",
      "retType": "long",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.ZoneOffset",
      "isConstructor": false,
      "method": "<java.time.ZoneOffset: long getLong(java.time.temporal.TemporalField)>"
    },
    {
      "name": "query",
      "retType": "java.lang.Object",
      "argType": "java.time.temporal.TemporalQuery",
      "isStatic": false,
      "hostClass": "java.time.ZoneOffset",
      "isConstructor": false,
      "method": "<java.time.ZoneOffset: java.lang.Object query(java.time.temporal.TemporalQuery)>"
    },
    {
      "name": "adjustInto",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.Temporal",
      "isStatic": false,
      "hostClass": "java.time.ZoneOffset",
      "isConstructor": false,
      "method": "<java.time.ZoneOffset: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>"
    },
    {
      "name": "equals",
      "retType": "boolean",
      "argType": "java.lang.Object",
      "isStatic": false,
      "hostClass": "java.time.ZoneOffset",
      "isConstructor": false,
      "method": "<java.time.ZoneOffset: boolean equals(java.lang.Object)>"
    },
    {
      "name": "getId",
      "retType": "java.lang.String",
      "isStatic": false,
      "hostClass": "java.time.ZoneRegion",
      "isConstructor": false,
      "method": "<java.time.ZoneRegion: java.lang.String getId()>"
    },
    {
      "name": "getRules",
      "retType": "java.time.zone.ZoneRules",
      "isStatic": false,
      "hostClass": "java.time.ZoneRegion",
      "isConstructor": false,
      "method": "<java.time.ZoneRegion: java.time.zone.ZoneRules getRules()>"
    },
    {
      "name": "now",
      "retType": "java.time.ZonedDateTime",
      "isStatic": true,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime now()>"
    },
    {
      "name": "now",
      "retType": "java.time.ZonedDateTime",
      "argType": "java.time.ZoneId",
      "isStatic": true,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime now(java.time.ZoneId)>"
    },
    {
      "name": "now",
      "retType": "java.time.ZonedDateTime",
      "argType": "java.time.Clock",
      "isStatic": true,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime now(java.time.Clock)>"
    },
    {
      "name": "of",
      "retType": "java.time.ZonedDateTime",
      "argType": "java.time.LocalDate",
      "argType": "java.time.LocalTime",
      "argType": "java.time.ZoneId",
      "isStatic": true,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime of(java.time.LocalDate,java.time.LocalTime,java.time.ZoneId)>"
    },
    {
      "name": "of",
      "retType": "java.time.ZonedDateTime",
      "argType": "java.time.LocalDateTime",
      "argType": "java.time.ZoneId",
      "isStatic": true,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime of(java.time.LocalDateTime,java.time.ZoneId)>"
    },
    {
      "name": "ofLocal",
      "retType": "java.time.ZonedDateTime",
      "argType": "java.time.LocalDateTime",
      "argType": "java.time.ZoneId",
      "argType": "java.time.ZoneOffset",
      "isStatic": true,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime ofLocal(java.time.LocalDateTime,java.time.ZoneId,java.time.ZoneOffset)>"
    },
    {
      "name": "ofInstant",
      "retType": "java.time.ZonedDateTime",
      "argType": "java.time.Instant",
      "argType": "java.time.ZoneId",
      "isStatic": true,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime ofInstant(java.time.Instant,java.time.ZoneId)>"
    },
    {
      "name": "ofInstant",
      "retType": "java.time.ZonedDateTime",
      "argType": "java.time.LocalDateTime",
      "argType": "java.time.ZoneOffset",
      "argType": "java.time.ZoneId",
      "isStatic": true,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime ofInstant(java.time.LocalDateTime,java.time.ZoneOffset,java.time.ZoneId)>"
    },
    {
      "name": "ofStrict",
      "retType": "java.time.ZonedDateTime",
      "argType": "java.time.LocalDateTime",
      "argType": "java.time.ZoneOffset",
      "argType": "java.time.ZoneId",
      "isStatic": true,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime ofStrict(java.time.LocalDateTime,java.time.ZoneOffset,java.time.ZoneId)>"
    },
    {
      "name": "from",
      "retType": "java.time.ZonedDateTime",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": true,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime 'from'(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "parse",
      "retType": "java.time.ZonedDateTime",
      "argType": "java.lang.CharSequence",
      "isStatic": true,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime parse(java.lang.CharSequence)>"
    },
    {
      "name": "parse",
      "retType": "java.time.ZonedDateTime",
      "argType": "java.lang.CharSequence",
      "argType": "java.time.format.DateTimeFormatter",
      "isStatic": true,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)>"
    },
    {
      "name": "isSupported",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: boolean isSupported(java.time.temporal.TemporalField)>"
    },
    {
      "name": "isSupported",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: boolean isSupported(java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "range",
      "retType": "java.time.temporal.ValueRange",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
    },
    {
      "name": "get",
      "retType": "int",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: int get(java.time.temporal.TemporalField)>"
    },
    {
      "name": "getLong",
      "retType": "long",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: long getLong(java.time.temporal.TemporalField)>"
    },
    {
      "name": "getOffset",
      "retType": "java.time.ZoneOffset",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZoneOffset getOffset()>"
    },
    {
      "name": "withEarlierOffsetAtOverlap",
      "retType": "java.time.ZonedDateTime",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime withEarlierOffsetAtOverlap()>"
    },
    {
      "name": "withLaterOffsetAtOverlap",
      "retType": "java.time.ZonedDateTime",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime withLaterOffsetAtOverlap()>"
    },
    {
      "name": "getZone",
      "retType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZoneId getZone()>"
    },
    {
      "name": "withZoneSameLocal",
      "retType": "java.time.ZonedDateTime",
      "argType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime withZoneSameLocal(java.time.ZoneId)>"
    },
    {
      "name": "withZoneSameInstant",
      "retType": "java.time.ZonedDateTime",
      "argType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime withZoneSameInstant(java.time.ZoneId)>"
    },
    {
      "name": "withFixedOffsetZone",
      "retType": "java.time.ZonedDateTime",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime withFixedOffsetZone()>"
    },
    {
      "name": "toLocalDateTime",
      "retType": "java.time.LocalDateTime",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.LocalDateTime toLocalDateTime()>"
    },
    {
      "name": "toLocalDate",
      "retType": "java.time.LocalDate",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.LocalDate toLocalDate()>"
    },
    {
      "name": "getYear",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: int getYear()>"
    },
    {
      "name": "getMonthValue",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: int getMonthValue()>"
    },
    {
      "name": "getMonth",
      "retType": "java.time.Month",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.Month getMonth()>"
    },
    {
      "name": "getDayOfMonth",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: int getDayOfMonth()>"
    },
    {
      "name": "getDayOfYear",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: int getDayOfYear()>"
    },
    {
      "name": "getDayOfWeek",
      "retType": "java.time.DayOfWeek",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.DayOfWeek getDayOfWeek()>"
    },
    {
      "name": "toLocalTime",
      "retType": "java.time.LocalTime",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.LocalTime toLocalTime()>"
    },
    {
      "name": "getHour",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: int getHour()>"
    },
    {
      "name": "getMinute",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: int getMinute()>"
    },
    {
      "name": "getSecond",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: int getSecond()>"
    },
    {
      "name": "getNano",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: int getNano()>"
    },
    {
      "name": "with",
      "retType": "java.time.ZonedDateTime",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "with",
      "retType": "java.time.ZonedDateTime",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "withYear",
      "retType": "java.time.ZonedDateTime",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime withYear(int)>"
    },
    {
      "name": "withMonth",
      "retType": "java.time.ZonedDateTime",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime withMonth(int)>"
    },
    {
      "name": "withDayOfMonth",
      "retType": "java.time.ZonedDateTime",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime withDayOfMonth(int)>"
    },
    {
      "name": "withDayOfYear",
      "retType": "java.time.ZonedDateTime",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime withDayOfYear(int)>"
    },
    {
      "name": "withHour",
      "retType": "java.time.ZonedDateTime",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime withHour(int)>"
    },
    {
      "name": "withMinute",
      "retType": "java.time.ZonedDateTime",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime withMinute(int)>"
    },
    {
      "name": "withSecond",
      "retType": "java.time.ZonedDateTime",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime withSecond(int)>"
    },
    {
      "name": "withNano",
      "retType": "java.time.ZonedDateTime",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime withNano(int)>"
    },
    {
      "name": "truncatedTo",
      "retType": "java.time.ZonedDateTime",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime truncatedTo(java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "plus",
      "retType": "java.time.ZonedDateTime",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "plus",
      "retType": "java.time.ZonedDateTime",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "plusYears",
      "retType": "java.time.ZonedDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime plusYears(long)>"
    },
    {
      "name": "plusMonths",
      "retType": "java.time.ZonedDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime plusMonths(long)>"
    },
    {
      "name": "plusWeeks",
      "retType": "java.time.ZonedDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime plusWeeks(long)>"
    },
    {
      "name": "plusDays",
      "retType": "java.time.ZonedDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime plusDays(long)>"
    },
    {
      "name": "plusHours",
      "retType": "java.time.ZonedDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime plusHours(long)>"
    },
    {
      "name": "plusMinutes",
      "retType": "java.time.ZonedDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime plusMinutes(long)>"
    },
    {
      "name": "plusSeconds",
      "retType": "java.time.ZonedDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime plusSeconds(long)>"
    },
    {
      "name": "plusNanos",
      "retType": "java.time.ZonedDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime plusNanos(long)>"
    },
    {
      "name": "minus",
      "retType": "java.time.ZonedDateTime",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "minus",
      "retType": "java.time.ZonedDateTime",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime minus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minusYears",
      "retType": "java.time.ZonedDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime minusYears(long)>"
    },
    {
      "name": "minusMonths",
      "retType": "java.time.ZonedDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime minusMonths(long)>"
    },
    {
      "name": "minusWeeks",
      "retType": "java.time.ZonedDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime minusWeeks(long)>"
    },
    {
      "name": "minusDays",
      "retType": "java.time.ZonedDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime minusDays(long)>"
    },
    {
      "name": "minusHours",
      "retType": "java.time.ZonedDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime minusHours(long)>"
    },
    {
      "name": "minusMinutes",
      "retType": "java.time.ZonedDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime minusMinutes(long)>"
    },
    {
      "name": "minusSeconds",
      "retType": "java.time.ZonedDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime minusSeconds(long)>"
    },
    {
      "name": "minusNanos",
      "retType": "java.time.ZonedDateTime",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.ZonedDateTime minusNanos(long)>"
    },
    {
      "name": "query",
      "retType": "java.lang.Object",
      "argType": "java.time.temporal.TemporalQuery",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.lang.Object query(java.time.temporal.TemporalQuery)>"
    },
    {
      "name": "until",
      "retType": "long",
      "argType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "format",
      "retType": "java.lang.String",
      "argType": "java.time.format.DateTimeFormatter",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.lang.String format(java.time.format.DateTimeFormatter)>"
    },
    {
      "name": "toOffsetDateTime",
      "retType": "java.time.OffsetDateTime",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.OffsetDateTime toOffsetDateTime()>"
    },
    {
      "name": "equals",
      "retType": "boolean",
      "argType": "java.lang.Object",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: boolean equals(java.lang.Object)>"
    },
    {
      "name": "minus",
      "retType": "java.time.temporal.Temporal",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minus",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "plus",
      "retType": "java.time.temporal.Temporal",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "plus",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "with",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "with",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "minus",
      "retType": "java.time.chrono.ChronoZonedDateTime",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime minus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minus",
      "retType": "java.time.chrono.ChronoZonedDateTime",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "plus",
      "retType": "java.time.chrono.ChronoZonedDateTime",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "plus",
      "retType": "java.time.chrono.ChronoZonedDateTime",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "with",
      "retType": "java.time.chrono.ChronoZonedDateTime",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "with",
      "retType": "java.time.chrono.ChronoZonedDateTime",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "withZoneSameInstant",
      "retType": "java.time.chrono.ChronoZonedDateTime",
      "argType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime withZoneSameInstant(java.time.ZoneId)>"
    },
    {
      "name": "withZoneSameLocal",
      "retType": "java.time.chrono.ChronoZonedDateTime",
      "argType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime withZoneSameLocal(java.time.ZoneId)>"
    },
    {
      "name": "withLaterOffsetAtOverlap",
      "retType": "java.time.chrono.ChronoZonedDateTime",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime withLaterOffsetAtOverlap()>"
    },
    {
      "name": "withEarlierOffsetAtOverlap",
      "retType": "java.time.chrono.ChronoZonedDateTime",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.chrono.ChronoZonedDateTime withEarlierOffsetAtOverlap()>"
    },
    {
      "name": "toLocalDateTime",
      "retType": "java.time.chrono.ChronoLocalDateTime",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.chrono.ChronoLocalDateTime toLocalDateTime()>"
    },
    {
      "name": "toLocalDate",
      "retType": "java.time.chrono.ChronoLocalDate",
      "isStatic": false,
      "hostClass": "java.time.ZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.ZonedDateTime: java.time.chrono.ChronoLocalDate toLocalDate()>"
    },
    {
      "name": "resolveDate",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.util.Map",
      "argType": "java.time.format.ResolverStyle",
      "isStatic": false,
      "hostClass": "java.time.chrono.AbstractChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.AbstractChronology: java.time.chrono.ChronoLocalDate resolveDate(java.util.Map,java.time.format.ResolverStyle)>"
    },
    {
      "name": "equals",
      "retType": "boolean",
      "argType": "java.lang.Object",
      "isStatic": false,
      "hostClass": "java.time.chrono.AbstractChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.AbstractChronology: boolean equals(java.lang.Object)>"
    },
    {
      "name": "timeLineOrder",
      "retType": "java.util.Comparator",
      "isStatic": true,
      "hostClass": "java.time.chrono.ChronoLocalDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDate: java.util.Comparator timeLineOrder()>"
    },
    {
      "name": "from",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": true,
      "hostClass": "java.time.chrono.ChronoLocalDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoLocalDate 'from'(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "getChronology",
      "retType": "java.time.chrono.Chronology",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDate: java.time.chrono.Chronology getChronology()>"
    },
    {
      "name": "getEra",
      "retType": "java.time.chrono.Era",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDate: java.time.chrono.Era getEra()>"
    },
    {
      "name": "isLeapYear",
      "retType": "boolean",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDate: boolean isLeapYear()>"
    },
    {
      "name": "lengthOfMonth",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDate: int lengthOfMonth()>"
    },
    {
      "name": "lengthOfYear",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDate: int lengthOfYear()>"
    },
    {
      "name": "isSupported",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDate: boolean isSupported(java.time.temporal.TemporalField)>"
    },
    {
      "name": "isSupported",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDate: boolean isSupported(java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "with",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoLocalDate 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "with",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoLocalDate 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "plus",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoLocalDate plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "plus",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoLocalDate plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minus",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoLocalDate minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "minus",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoLocalDate minus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "query",
      "retType": "java.lang.Object",
      "argType": "java.time.temporal.TemporalQuery",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDate: java.lang.Object query(java.time.temporal.TemporalQuery)>"
    },
    {
      "name": "adjustInto",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.Temporal",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDate: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>"
    },
    {
      "name": "until",
      "retType": "long",
      "argType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDate: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "until",
      "retType": "java.time.chrono.ChronoPeriod",
      "argType": "java.time.chrono.ChronoLocalDate",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoPeriod until(java.time.chrono.ChronoLocalDate)>"
    },
    {
      "name": "format",
      "retType": "java.lang.String",
      "argType": "java.time.format.DateTimeFormatter",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDate: java.lang.String format(java.time.format.DateTimeFormatter)>"
    },
    {
      "name": "atTime",
      "retType": "java.time.chrono.ChronoLocalDateTime",
      "argType": "java.time.LocalTime",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDate: java.time.chrono.ChronoLocalDateTime atTime(java.time.LocalTime)>"
    },
    {
      "name": "toEpochDay",
      "retType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDate: long toEpochDay()>"
    },
    {
      "name": "isAfter",
      "retType": "boolean",
      "argType": "java.time.chrono.ChronoLocalDate",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDate: boolean isAfter(java.time.chrono.ChronoLocalDate)>"
    },
    {
      "name": "isBefore",
      "retType": "boolean",
      "argType": "java.time.chrono.ChronoLocalDate",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDate: boolean isBefore(java.time.chrono.ChronoLocalDate)>"
    },
    {
      "name": "isEqual",
      "retType": "boolean",
      "argType": "java.time.chrono.ChronoLocalDate",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDate: boolean isEqual(java.time.chrono.ChronoLocalDate)>"
    },
    {
      "name": "equals",
      "retType": "boolean",
      "argType": "java.lang.Object",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDate: boolean equals(java.lang.Object)>"
    },
    {
      "name": "minus",
      "retType": "java.time.temporal.Temporal",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDate: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minus",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDate: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "plus",
      "retType": "java.time.temporal.Temporal",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDate: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "plus",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDate: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "with",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDate: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "with",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDate: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "with",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateImpl: java.time.chrono.ChronoLocalDate 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "with",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateImpl: java.time.chrono.ChronoLocalDate 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "plus",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateImpl: java.time.chrono.ChronoLocalDate plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "plus",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateImpl: java.time.chrono.ChronoLocalDate plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minus",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateImpl: java.time.chrono.ChronoLocalDate minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "minus",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateImpl: java.time.chrono.ChronoLocalDate minus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "until",
      "retType": "long",
      "argType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateImpl: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "equals",
      "retType": "boolean",
      "argType": "java.lang.Object",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateImpl: boolean equals(java.lang.Object)>"
    },
    {
      "name": "minus",
      "retType": "java.time.temporal.Temporal",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateImpl: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minus",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateImpl: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "plus",
      "retType": "java.time.temporal.Temporal",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateImpl: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "plus",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateImpl: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "with",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateImpl: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "with",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateImpl: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "timeLineOrder",
      "retType": "java.util.Comparator",
      "isStatic": true,
      "hostClass": "java.time.chrono.ChronoLocalDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTime: java.util.Comparator timeLineOrder()>"
    },
    {
      "name": "from",
      "retType": "java.time.chrono.ChronoLocalDateTime",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": true,
      "hostClass": "java.time.chrono.ChronoLocalDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoLocalDateTime 'from'(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "getChronology",
      "retType": "java.time.chrono.Chronology",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTime: java.time.chrono.Chronology getChronology()>"
    },
    {
      "name": "toLocalDate",
      "retType": "java.time.chrono.ChronoLocalDate",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoLocalDate toLocalDate()>"
    },
    {
      "name": "toLocalTime",
      "retType": "java.time.LocalTime",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTime: java.time.LocalTime toLocalTime()>"
    },
    {
      "name": "isSupported",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTime: boolean isSupported(java.time.temporal.TemporalField)>"
    },
    {
      "name": "isSupported",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTime: boolean isSupported(java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "with",
      "retType": "java.time.chrono.ChronoLocalDateTime",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoLocalDateTime 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "with",
      "retType": "java.time.chrono.ChronoLocalDateTime",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoLocalDateTime 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "plus",
      "retType": "java.time.chrono.ChronoLocalDateTime",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoLocalDateTime plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "plus",
      "retType": "java.time.chrono.ChronoLocalDateTime",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoLocalDateTime plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minus",
      "retType": "java.time.chrono.ChronoLocalDateTime",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoLocalDateTime minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "minus",
      "retType": "java.time.chrono.ChronoLocalDateTime",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoLocalDateTime minus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "query",
      "retType": "java.lang.Object",
      "argType": "java.time.temporal.TemporalQuery",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTime: java.lang.Object query(java.time.temporal.TemporalQuery)>"
    },
    {
      "name": "adjustInto",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.Temporal",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTime: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>"
    },
    {
      "name": "format",
      "retType": "java.lang.String",
      "argType": "java.time.format.DateTimeFormatter",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTime: java.lang.String format(java.time.format.DateTimeFormatter)>"
    },
    {
      "name": "atZone",
      "retType": "java.time.chrono.ChronoZonedDateTime",
      "argType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTime: java.time.chrono.ChronoZonedDateTime atZone(java.time.ZoneId)>"
    },
    {
      "name": "toInstant",
      "retType": "java.time.Instant",
      "argType": "java.time.ZoneOffset",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTime: java.time.Instant toInstant(java.time.ZoneOffset)>"
    },
    {
      "name": "toEpochSecond",
      "retType": "long",
      "argType": "java.time.ZoneOffset",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTime: long toEpochSecond(java.time.ZoneOffset)>"
    },
    {
      "name": "isAfter",
      "retType": "boolean",
      "argType": "java.time.chrono.ChronoLocalDateTime",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTime: boolean isAfter(java.time.chrono.ChronoLocalDateTime)>"
    },
    {
      "name": "isBefore",
      "retType": "boolean",
      "argType": "java.time.chrono.ChronoLocalDateTime",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTime: boolean isBefore(java.time.chrono.ChronoLocalDateTime)>"
    },
    {
      "name": "isEqual",
      "retType": "boolean",
      "argType": "java.time.chrono.ChronoLocalDateTime",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTime: boolean isEqual(java.time.chrono.ChronoLocalDateTime)>"
    },
    {
      "name": "equals",
      "retType": "boolean",
      "argType": "java.lang.Object",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTime: boolean equals(java.lang.Object)>"
    },
    {
      "name": "minus",
      "retType": "java.time.temporal.Temporal",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTime: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minus",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTime: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "plus",
      "retType": "java.time.temporal.Temporal",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTime: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "plus",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTime: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "with",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "with",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "toLocalDate",
      "retType": "java.time.chrono.ChronoLocalDate",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTimeImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTimeImpl: java.time.chrono.ChronoLocalDate toLocalDate()>"
    },
    {
      "name": "toLocalTime",
      "retType": "java.time.LocalTime",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTimeImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTimeImpl: java.time.LocalTime toLocalTime()>"
    },
    {
      "name": "isSupported",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTimeImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTimeImpl: boolean isSupported(java.time.temporal.TemporalField)>"
    },
    {
      "name": "range",
      "retType": "java.time.temporal.ValueRange",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTimeImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTimeImpl: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
    },
    {
      "name": "get",
      "retType": "int",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTimeImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTimeImpl: int get(java.time.temporal.TemporalField)>"
    },
    {
      "name": "getLong",
      "retType": "long",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTimeImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTimeImpl: long getLong(java.time.temporal.TemporalField)>"
    },
    {
      "name": "with",
      "retType": "java.time.chrono.ChronoLocalDateTimeImpl",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTimeImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTimeImpl: java.time.chrono.ChronoLocalDateTimeImpl 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "with",
      "retType": "java.time.chrono.ChronoLocalDateTimeImpl",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTimeImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTimeImpl: java.time.chrono.ChronoLocalDateTimeImpl 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "plus",
      "retType": "java.time.chrono.ChronoLocalDateTimeImpl",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTimeImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTimeImpl: java.time.chrono.ChronoLocalDateTimeImpl plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "atZone",
      "retType": "java.time.chrono.ChronoZonedDateTime",
      "argType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTimeImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTimeImpl: java.time.chrono.ChronoZonedDateTime atZone(java.time.ZoneId)>"
    },
    {
      "name": "until",
      "retType": "long",
      "argType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTimeImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTimeImpl: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "equals",
      "retType": "boolean",
      "argType": "java.lang.Object",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTimeImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTimeImpl: boolean equals(java.lang.Object)>"
    },
    {
      "name": "plus",
      "retType": "java.time.chrono.ChronoLocalDateTime",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTimeImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTimeImpl: java.time.chrono.ChronoLocalDateTime plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "with",
      "retType": "java.time.chrono.ChronoLocalDateTime",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTimeImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTimeImpl: java.time.chrono.ChronoLocalDateTime 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "with",
      "retType": "java.time.chrono.ChronoLocalDateTime",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTimeImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTimeImpl: java.time.chrono.ChronoLocalDateTime 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "plus",
      "retType": "java.time.temporal.Temporal",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTimeImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTimeImpl: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "with",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTimeImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTimeImpl: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "with",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoLocalDateTimeImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoLocalDateTimeImpl: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "between",
      "retType": "java.time.chrono.ChronoPeriod",
      "argType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.chrono.ChronoLocalDate",
      "isStatic": true,
      "hostClass": "java.time.chrono.ChronoPeriod",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoPeriod: java.time.chrono.ChronoPeriod between(java.time.chrono.ChronoLocalDate,java.time.chrono.ChronoLocalDate)>"
    },
    {
      "name": "get",
      "retType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoPeriod",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoPeriod: long get(java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "getUnits",
      "retType": "java.util.List",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoPeriod",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoPeriod: java.util.List getUnits()>"
    },
    {
      "name": "getChronology",
      "retType": "java.time.chrono.Chronology",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoPeriod",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoPeriod: java.time.chrono.Chronology getChronology()>"
    },
    {
      "name": "isZero",
      "retType": "boolean",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoPeriod",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoPeriod: boolean isZero()>"
    },
    {
      "name": "isNegative",
      "retType": "boolean",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoPeriod",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoPeriod: boolean isNegative()>"
    },
    {
      "name": "plus",
      "retType": "java.time.chrono.ChronoPeriod",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoPeriod",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoPeriod: java.time.chrono.ChronoPeriod plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "minus",
      "retType": "java.time.chrono.ChronoPeriod",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoPeriod",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoPeriod: java.time.chrono.ChronoPeriod minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "multipliedBy",
      "retType": "java.time.chrono.ChronoPeriod",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoPeriod",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoPeriod: java.time.chrono.ChronoPeriod multipliedBy(int)>"
    },
    {
      "name": "negated",
      "retType": "java.time.chrono.ChronoPeriod",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoPeriod",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoPeriod: java.time.chrono.ChronoPeriod negated()>"
    },
    {
      "name": "normalized",
      "retType": "java.time.chrono.ChronoPeriod",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoPeriod",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoPeriod: java.time.chrono.ChronoPeriod normalized()>"
    },
    {
      "name": "addTo",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.Temporal",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoPeriod",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoPeriod: java.time.temporal.Temporal addTo(java.time.temporal.Temporal)>"
    },
    {
      "name": "subtractFrom",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.Temporal",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoPeriod",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoPeriod: java.time.temporal.Temporal subtractFrom(java.time.temporal.Temporal)>"
    },
    {
      "name": "equals",
      "retType": "boolean",
      "argType": "java.lang.Object",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoPeriod",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoPeriod: boolean equals(java.lang.Object)>"
    },
    {
      "name": "get",
      "retType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoPeriodImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoPeriodImpl: long get(java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "getUnits",
      "retType": "java.util.List",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoPeriodImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoPeriodImpl: java.util.List getUnits()>"
    },
    {
      "name": "getChronology",
      "retType": "java.time.chrono.Chronology",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoPeriodImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoPeriodImpl: java.time.chrono.Chronology getChronology()>"
    },
    {
      "name": "isZero",
      "retType": "boolean",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoPeriodImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoPeriodImpl: boolean isZero()>"
    },
    {
      "name": "isNegative",
      "retType": "boolean",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoPeriodImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoPeriodImpl: boolean isNegative()>"
    },
    {
      "name": "plus",
      "retType": "java.time.chrono.ChronoPeriod",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoPeriodImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoPeriodImpl: java.time.chrono.ChronoPeriod plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "minus",
      "retType": "java.time.chrono.ChronoPeriod",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoPeriodImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoPeriodImpl: java.time.chrono.ChronoPeriod minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "multipliedBy",
      "retType": "java.time.chrono.ChronoPeriod",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoPeriodImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoPeriodImpl: java.time.chrono.ChronoPeriod multipliedBy(int)>"
    },
    {
      "name": "normalized",
      "retType": "java.time.chrono.ChronoPeriod",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoPeriodImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoPeriodImpl: java.time.chrono.ChronoPeriod normalized()>"
    },
    {
      "name": "addTo",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.Temporal",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoPeriodImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoPeriodImpl: java.time.temporal.Temporal addTo(java.time.temporal.Temporal)>"
    },
    {
      "name": "subtractFrom",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.Temporal",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoPeriodImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoPeriodImpl: java.time.temporal.Temporal subtractFrom(java.time.temporal.Temporal)>"
    },
    {
      "name": "equals",
      "retType": "boolean",
      "argType": "java.lang.Object",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoPeriodImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoPeriodImpl: boolean equals(java.lang.Object)>"
    },
    {
      "name": "timeLineOrder",
      "retType": "java.util.Comparator",
      "isStatic": true,
      "hostClass": "java.time.chrono.ChronoZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTime: java.util.Comparator timeLineOrder()>"
    },
    {
      "name": "from",
      "retType": "java.time.chrono.ChronoZonedDateTime",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": true,
      "hostClass": "java.time.chrono.ChronoZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime 'from'(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "range",
      "retType": "java.time.temporal.ValueRange",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTime: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
    },
    {
      "name": "get",
      "retType": "int",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTime: int get(java.time.temporal.TemporalField)>"
    },
    {
      "name": "getLong",
      "retType": "long",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTime: long getLong(java.time.temporal.TemporalField)>"
    },
    {
      "name": "toLocalDate",
      "retType": "java.time.chrono.ChronoLocalDate",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoLocalDate toLocalDate()>"
    },
    {
      "name": "toLocalTime",
      "retType": "java.time.LocalTime",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTime: java.time.LocalTime toLocalTime()>"
    },
    {
      "name": "toLocalDateTime",
      "retType": "java.time.chrono.ChronoLocalDateTime",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoLocalDateTime toLocalDateTime()>"
    },
    {
      "name": "getChronology",
      "retType": "java.time.chrono.Chronology",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTime: java.time.chrono.Chronology getChronology()>"
    },
    {
      "name": "getOffset",
      "retType": "java.time.ZoneOffset",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTime: java.time.ZoneOffset getOffset()>"
    },
    {
      "name": "getZone",
      "retType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTime: java.time.ZoneId getZone()>"
    },
    {
      "name": "withEarlierOffsetAtOverlap",
      "retType": "java.time.chrono.ChronoZonedDateTime",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime withEarlierOffsetAtOverlap()>"
    },
    {
      "name": "withLaterOffsetAtOverlap",
      "retType": "java.time.chrono.ChronoZonedDateTime",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime withLaterOffsetAtOverlap()>"
    },
    {
      "name": "withZoneSameLocal",
      "retType": "java.time.chrono.ChronoZonedDateTime",
      "argType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime withZoneSameLocal(java.time.ZoneId)>"
    },
    {
      "name": "withZoneSameInstant",
      "retType": "java.time.chrono.ChronoZonedDateTime",
      "argType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime withZoneSameInstant(java.time.ZoneId)>"
    },
    {
      "name": "isSupported",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTime: boolean isSupported(java.time.temporal.TemporalField)>"
    },
    {
      "name": "isSupported",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTime: boolean isSupported(java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "with",
      "retType": "java.time.chrono.ChronoZonedDateTime",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "with",
      "retType": "java.time.chrono.ChronoZonedDateTime",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "plus",
      "retType": "java.time.chrono.ChronoZonedDateTime",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "plus",
      "retType": "java.time.chrono.ChronoZonedDateTime",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minus",
      "retType": "java.time.chrono.ChronoZonedDateTime",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "minus",
      "retType": "java.time.chrono.ChronoZonedDateTime",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTime: java.time.chrono.ChronoZonedDateTime minus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "query",
      "retType": "java.lang.Object",
      "argType": "java.time.temporal.TemporalQuery",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTime: java.lang.Object query(java.time.temporal.TemporalQuery)>"
    },
    {
      "name": "format",
      "retType": "java.lang.String",
      "argType": "java.time.format.DateTimeFormatter",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTime: java.lang.String format(java.time.format.DateTimeFormatter)>"
    },
    {
      "name": "toInstant",
      "retType": "java.time.Instant",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTime: java.time.Instant toInstant()>"
    },
    {
      "name": "toEpochSecond",
      "retType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTime: long toEpochSecond()>"
    },
    {
      "name": "isBefore",
      "retType": "boolean",
      "argType": "java.time.chrono.ChronoZonedDateTime",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTime: boolean isBefore(java.time.chrono.ChronoZonedDateTime)>"
    },
    {
      "name": "isAfter",
      "retType": "boolean",
      "argType": "java.time.chrono.ChronoZonedDateTime",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTime: boolean isAfter(java.time.chrono.ChronoZonedDateTime)>"
    },
    {
      "name": "isEqual",
      "retType": "boolean",
      "argType": "java.time.chrono.ChronoZonedDateTime",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTime: boolean isEqual(java.time.chrono.ChronoZonedDateTime)>"
    },
    {
      "name": "equals",
      "retType": "boolean",
      "argType": "java.lang.Object",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTime: boolean equals(java.lang.Object)>"
    },
    {
      "name": "minus",
      "retType": "java.time.temporal.Temporal",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTime: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minus",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTime: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "plus",
      "retType": "java.time.temporal.Temporal",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTime: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "plus",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTime: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "with",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "with",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTime",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTime: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "getOffset",
      "retType": "java.time.ZoneOffset",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTimeImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTimeImpl: java.time.ZoneOffset getOffset()>"
    },
    {
      "name": "withEarlierOffsetAtOverlap",
      "retType": "java.time.chrono.ChronoZonedDateTime",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTimeImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTimeImpl: java.time.chrono.ChronoZonedDateTime withEarlierOffsetAtOverlap()>"
    },
    {
      "name": "withLaterOffsetAtOverlap",
      "retType": "java.time.chrono.ChronoZonedDateTime",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTimeImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTimeImpl: java.time.chrono.ChronoZonedDateTime withLaterOffsetAtOverlap()>"
    },
    {
      "name": "toLocalDateTime",
      "retType": "java.time.chrono.ChronoLocalDateTime",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTimeImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTimeImpl: java.time.chrono.ChronoLocalDateTime toLocalDateTime()>"
    },
    {
      "name": "getZone",
      "retType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTimeImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTimeImpl: java.time.ZoneId getZone()>"
    },
    {
      "name": "withZoneSameLocal",
      "retType": "java.time.chrono.ChronoZonedDateTime",
      "argType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTimeImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTimeImpl: java.time.chrono.ChronoZonedDateTime withZoneSameLocal(java.time.ZoneId)>"
    },
    {
      "name": "withZoneSameInstant",
      "retType": "java.time.chrono.ChronoZonedDateTime",
      "argType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTimeImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTimeImpl: java.time.chrono.ChronoZonedDateTime withZoneSameInstant(java.time.ZoneId)>"
    },
    {
      "name": "isSupported",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTimeImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTimeImpl: boolean isSupported(java.time.temporal.TemporalField)>"
    },
    {
      "name": "with",
      "retType": "java.time.chrono.ChronoZonedDateTime",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTimeImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTimeImpl: java.time.chrono.ChronoZonedDateTime 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "plus",
      "retType": "java.time.chrono.ChronoZonedDateTime",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTimeImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTimeImpl: java.time.chrono.ChronoZonedDateTime plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "until",
      "retType": "long",
      "argType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTimeImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTimeImpl: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "equals",
      "retType": "boolean",
      "argType": "java.lang.Object",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTimeImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTimeImpl: boolean equals(java.lang.Object)>"
    },
    {
      "name": "plus",
      "retType": "java.time.temporal.Temporal",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTimeImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTimeImpl: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "with",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.ChronoZonedDateTimeImpl",
      "isConstructor": false,
      "method": "<java.time.chrono.ChronoZonedDateTimeImpl: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "isSupported",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.chrono.Chronology$1",
      "isConstructor": false,
      "method": "<java.time.chrono.Chronology$1: boolean isSupported(java.time.temporal.TemporalField)>"
    },
    {
      "name": "getLong",
      "retType": "long",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.chrono.Chronology$1",
      "isConstructor": false,
      "method": "<java.time.chrono.Chronology$1: long getLong(java.time.temporal.TemporalField)>"
    },
    {
      "name": "query",
      "retType": "java.lang.Object",
      "argType": "java.time.temporal.TemporalQuery",
      "isStatic": false,
      "hostClass": "java.time.chrono.Chronology$1",
      "isConstructor": false,
      "method": "<java.time.chrono.Chronology$1: java.lang.Object query(java.time.temporal.TemporalQuery)>"
    },
    {
      "name": "from",
      "retType": "java.time.chrono.Chronology",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": true,
      "hostClass": "java.time.chrono.Chronology",
      "isConstructor": false,
      "method": "<java.time.chrono.Chronology: java.time.chrono.Chronology 'from'(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "ofLocale",
      "retType": "java.time.chrono.Chronology",
      "argType": "java.util.Locale",
      "isStatic": true,
      "hostClass": "java.time.chrono.Chronology",
      "isConstructor": false,
      "method": "<java.time.chrono.Chronology: java.time.chrono.Chronology ofLocale(java.util.Locale)>"
    },
    {
      "name": "of",
      "retType": "java.time.chrono.Chronology",
      "argType": "java.lang.String",
      "isStatic": true,
      "hostClass": "java.time.chrono.Chronology",
      "isConstructor": false,
      "method": "<java.time.chrono.Chronology: java.time.chrono.Chronology of(java.lang.String)>"
    },
    {
      "name": "getAvailableChronologies",
      "retType": "java.util.Set",
      "isStatic": true,
      "hostClass": "java.time.chrono.Chronology",
      "isConstructor": false,
      "method": "<java.time.chrono.Chronology: java.util.Set getAvailableChronologies()>"
    },
    {
      "name": "getId",
      "retType": "java.lang.String",
      "isStatic": false,
      "hostClass": "java.time.chrono.Chronology",
      "isConstructor": false,
      "method": "<java.time.chrono.Chronology: java.lang.String getId()>"
    },
    {
      "name": "getCalendarType",
      "retType": "java.lang.String",
      "isStatic": false,
      "hostClass": "java.time.chrono.Chronology",
      "isConstructor": false,
      "method": "<java.time.chrono.Chronology: java.lang.String getCalendarType()>"
    },
    {
      "name": "date",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "int",
      "argType": "int",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.Chronology",
      "isConstructor": false,
      "method": "<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate date(int,int,int)>"
    },
    {
      "name": "dateYearDay",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.chrono.Era",
      "argType": "int",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.Chronology",
      "isConstructor": false,
      "method": "<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate dateYearDay(java.time.chrono.Era,int,int)>"
    },
    {
      "name": "dateYearDay",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "int",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.Chronology",
      "isConstructor": false,
      "method": "<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate dateYearDay(int,int)>"
    },
    {
      "name": "dateEpochDay",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.Chronology",
      "isConstructor": false,
      "method": "<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate dateEpochDay(long)>"
    },
    {
      "name": "dateNow",
      "retType": "java.time.chrono.ChronoLocalDate",
      "isStatic": false,
      "hostClass": "java.time.chrono.Chronology",
      "isConstructor": false,
      "method": "<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate dateNow()>"
    },
    {
      "name": "dateNow",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.chrono.Chronology",
      "isConstructor": false,
      "method": "<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate dateNow(java.time.ZoneId)>"
    },
    {
      "name": "dateNow",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.Clock",
      "isStatic": false,
      "hostClass": "java.time.chrono.Chronology",
      "isConstructor": false,
      "method": "<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate dateNow(java.time.Clock)>"
    },
    {
      "name": "date",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.chrono.Chronology",
      "isConstructor": false,
      "method": "<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate date(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "localDateTime",
      "retType": "java.time.chrono.ChronoLocalDateTime",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.chrono.Chronology",
      "isConstructor": false,
      "method": "<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDateTime localDateTime(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "zonedDateTime",
      "retType": "java.time.chrono.ChronoZonedDateTime",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.chrono.Chronology",
      "isConstructor": false,
      "method": "<java.time.chrono.Chronology: java.time.chrono.ChronoZonedDateTime zonedDateTime(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "zonedDateTime",
      "retType": "java.time.chrono.ChronoZonedDateTime",
      "argType": "java.time.Instant",
      "argType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.chrono.Chronology",
      "isConstructor": false,
      "method": "<java.time.chrono.Chronology: java.time.chrono.ChronoZonedDateTime zonedDateTime(java.time.Instant,java.time.ZoneId)>"
    },
    {
      "name": "isLeapYear",
      "retType": "boolean",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.Chronology",
      "isConstructor": false,
      "method": "<java.time.chrono.Chronology: boolean isLeapYear(long)>"
    },
    {
      "name": "prolepticYear",
      "retType": "int",
      "argType": "java.time.chrono.Era",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.Chronology",
      "isConstructor": false,
      "method": "<java.time.chrono.Chronology: int prolepticYear(java.time.chrono.Era,int)>"
    },
    {
      "name": "eraOf",
      "retType": "java.time.chrono.Era",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.Chronology",
      "isConstructor": false,
      "method": "<java.time.chrono.Chronology: java.time.chrono.Era eraOf(int)>"
    },
    {
      "name": "eras",
      "retType": "java.util.List",
      "isStatic": false,
      "hostClass": "java.time.chrono.Chronology",
      "isConstructor": false,
      "method": "<java.time.chrono.Chronology: java.util.List eras()>"
    },
    {
      "name": "range",
      "retType": "java.time.temporal.ValueRange",
      "argType": "java.time.temporal.ChronoField",
      "isStatic": false,
      "hostClass": "java.time.chrono.Chronology",
      "isConstructor": false,
      "method": "<java.time.chrono.Chronology: java.time.temporal.ValueRange range(java.time.temporal.ChronoField)>"
    },
    {
      "name": "getDisplayName",
      "retType": "java.lang.String",
      "argType": "java.time.format.TextStyle",
      "argType": "java.util.Locale",
      "isStatic": false,
      "hostClass": "java.time.chrono.Chronology",
      "isConstructor": false,
      "method": "<java.time.chrono.Chronology: java.lang.String getDisplayName(java.time.format.TextStyle,java.util.Locale)>"
    },
    {
      "name": "resolveDate",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.util.Map",
      "argType": "java.time.format.ResolverStyle",
      "isStatic": false,
      "hostClass": "java.time.chrono.Chronology",
      "isConstructor": false,
      "method": "<java.time.chrono.Chronology: java.time.chrono.ChronoLocalDate resolveDate(java.util.Map,java.time.format.ResolverStyle)>"
    },
    {
      "name": "period",
      "retType": "java.time.chrono.ChronoPeriod",
      "argType": "int",
      "argType": "int",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.Chronology",
      "isConstructor": false,
      "method": "<java.time.chrono.Chronology: java.time.chrono.ChronoPeriod period(int,int,int)>"
    },
    {
      "name": "equals",
      "retType": "boolean",
      "argType": "java.lang.Object",
      "isStatic": false,
      "hostClass": "java.time.chrono.Chronology",
      "isConstructor": false,
      "method": "<java.time.chrono.Chronology: boolean equals(java.lang.Object)>"
    },
    {
      "name": "getValue",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.Era",
      "isConstructor": false,
      "method": "<java.time.chrono.Era: int getValue()>"
    },
    {
      "name": "isSupported",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.chrono.Era",
      "isConstructor": false,
      "method": "<java.time.chrono.Era: boolean isSupported(java.time.temporal.TemporalField)>"
    },
    {
      "name": "range",
      "retType": "java.time.temporal.ValueRange",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.chrono.Era",
      "isConstructor": false,
      "method": "<java.time.chrono.Era: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
    },
    {
      "name": "get",
      "retType": "int",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.chrono.Era",
      "isConstructor": false,
      "method": "<java.time.chrono.Era: int get(java.time.temporal.TemporalField)>"
    },
    {
      "name": "getLong",
      "retType": "long",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.chrono.Era",
      "isConstructor": false,
      "method": "<java.time.chrono.Era: long getLong(java.time.temporal.TemporalField)>"
    },
    {
      "name": "query",
      "retType": "java.lang.Object",
      "argType": "java.time.temporal.TemporalQuery",
      "isStatic": false,
      "hostClass": "java.time.chrono.Era",
      "isConstructor": false,
      "method": "<java.time.chrono.Era: java.lang.Object query(java.time.temporal.TemporalQuery)>"
    },
    {
      "name": "adjustInto",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.Temporal",
      "isStatic": false,
      "hostClass": "java.time.chrono.Era",
      "isConstructor": false,
      "method": "<java.time.chrono.Era: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>"
    },
    {
      "name": "getDisplayName",
      "retType": "java.lang.String",
      "argType": "java.time.format.TextStyle",
      "argType": "java.util.Locale",
      "isStatic": false,
      "hostClass": "java.time.chrono.Era",
      "isConstructor": false,
      "method": "<java.time.chrono.Era: java.lang.String getDisplayName(java.time.format.TextStyle,java.util.Locale)>"
    },
    {
      "name": "getId",
      "retType": "java.lang.String",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahChronology: java.lang.String getId()>"
    },
    {
      "name": "getCalendarType",
      "retType": "java.lang.String",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahChronology: java.lang.String getCalendarType()>"
    },
    {
      "name": "date",
      "retType": "java.time.chrono.HijrahDate",
      "argType": "int",
      "argType": "int",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahChronology: java.time.chrono.HijrahDate date(int,int,int)>"
    },
    {
      "name": "dateYearDay",
      "retType": "java.time.chrono.HijrahDate",
      "argType": "java.time.chrono.Era",
      "argType": "int",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahChronology: java.time.chrono.HijrahDate dateYearDay(java.time.chrono.Era,int,int)>"
    },
    {
      "name": "dateYearDay",
      "retType": "java.time.chrono.HijrahDate",
      "argType": "int",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahChronology: java.time.chrono.HijrahDate dateYearDay(int,int)>"
    },
    {
      "name": "dateEpochDay",
      "retType": "java.time.chrono.HijrahDate",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahChronology: java.time.chrono.HijrahDate dateEpochDay(long)>"
    },
    {
      "name": "dateNow",
      "retType": "java.time.chrono.HijrahDate",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahChronology: java.time.chrono.HijrahDate dateNow()>"
    },
    {
      "name": "dateNow",
      "retType": "java.time.chrono.HijrahDate",
      "argType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahChronology: java.time.chrono.HijrahDate dateNow(java.time.ZoneId)>"
    },
    {
      "name": "dateNow",
      "retType": "java.time.chrono.HijrahDate",
      "argType": "java.time.Clock",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahChronology: java.time.chrono.HijrahDate dateNow(java.time.Clock)>"
    },
    {
      "name": "date",
      "retType": "java.time.chrono.HijrahDate",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahChronology: java.time.chrono.HijrahDate date(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "localDateTime",
      "retType": "java.time.chrono.ChronoLocalDateTime",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahChronology: java.time.chrono.ChronoLocalDateTime localDateTime(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "zonedDateTime",
      "retType": "java.time.chrono.ChronoZonedDateTime",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahChronology: java.time.chrono.ChronoZonedDateTime zonedDateTime(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "zonedDateTime",
      "retType": "java.time.chrono.ChronoZonedDateTime",
      "argType": "java.time.Instant",
      "argType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahChronology: java.time.chrono.ChronoZonedDateTime zonedDateTime(java.time.Instant,java.time.ZoneId)>"
    },
    {
      "name": "isLeapYear",
      "retType": "boolean",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahChronology: boolean isLeapYear(long)>"
    },
    {
      "name": "prolepticYear",
      "retType": "int",
      "argType": "java.time.chrono.Era",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahChronology: int prolepticYear(java.time.chrono.Era,int)>"
    },
    {
      "name": "eraOf",
      "retType": "java.time.chrono.HijrahEra",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahChronology: java.time.chrono.HijrahEra eraOf(int)>"
    },
    {
      "name": "eras",
      "retType": "java.util.List",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahChronology: java.util.List eras()>"
    },
    {
      "name": "range",
      "retType": "java.time.temporal.ValueRange",
      "argType": "java.time.temporal.ChronoField",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahChronology: java.time.temporal.ValueRange range(java.time.temporal.ChronoField)>"
    },
    {
      "name": "resolveDate",
      "retType": "java.time.chrono.HijrahDate",
      "argType": "java.util.Map",
      "argType": "java.time.format.ResolverStyle",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahChronology: java.time.chrono.HijrahDate resolveDate(java.util.Map,java.time.format.ResolverStyle)>"
    },
    {
      "name": "resolveDate",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.util.Map",
      "argType": "java.time.format.ResolverStyle",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahChronology: java.time.chrono.ChronoLocalDate resolveDate(java.util.Map,java.time.format.ResolverStyle)>"
    },
    {
      "name": "eraOf",
      "retType": "java.time.chrono.Era",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahChronology: java.time.chrono.Era eraOf(int)>"
    },
    {
      "name": "date",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahChronology: java.time.chrono.ChronoLocalDate date(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "dateNow",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.Clock",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahChronology: java.time.chrono.ChronoLocalDate dateNow(java.time.Clock)>"
    },
    {
      "name": "dateNow",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahChronology: java.time.chrono.ChronoLocalDate dateNow(java.time.ZoneId)>"
    },
    {
      "name": "dateNow",
      "retType": "java.time.chrono.ChronoLocalDate",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahChronology: java.time.chrono.ChronoLocalDate dateNow()>"
    },
    {
      "name": "dateEpochDay",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahChronology: java.time.chrono.ChronoLocalDate dateEpochDay(long)>"
    },
    {
      "name": "dateYearDay",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "int",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahChronology: java.time.chrono.ChronoLocalDate dateYearDay(int,int)>"
    },
    {
      "name": "dateYearDay",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.chrono.Era",
      "argType": "int",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahChronology: java.time.chrono.ChronoLocalDate dateYearDay(java.time.chrono.Era,int,int)>"
    },
    {
      "name": "date",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "int",
      "argType": "int",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahChronology: java.time.chrono.ChronoLocalDate date(int,int,int)>"
    },
    {
      "name": "now",
      "retType": "java.time.chrono.HijrahDate",
      "isStatic": true,
      "hostClass": "java.time.chrono.HijrahDate",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahDate: java.time.chrono.HijrahDate now()>"
    },
    {
      "name": "now",
      "retType": "java.time.chrono.HijrahDate",
      "argType": "java.time.ZoneId",
      "isStatic": true,
      "hostClass": "java.time.chrono.HijrahDate",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahDate: java.time.chrono.HijrahDate now(java.time.ZoneId)>"
    },
    {
      "name": "now",
      "retType": "java.time.chrono.HijrahDate",
      "argType": "java.time.Clock",
      "isStatic": true,
      "hostClass": "java.time.chrono.HijrahDate",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahDate: java.time.chrono.HijrahDate now(java.time.Clock)>"
    },
    {
      "name": "of",
      "retType": "java.time.chrono.HijrahDate",
      "argType": "int",
      "argType": "int",
      "argType": "int",
      "isStatic": true,
      "hostClass": "java.time.chrono.HijrahDate",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahDate: java.time.chrono.HijrahDate of(int,int,int)>"
    },
    {
      "name": "from",
      "retType": "java.time.chrono.HijrahDate",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": true,
      "hostClass": "java.time.chrono.HijrahDate",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahDate: java.time.chrono.HijrahDate 'from'(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "getChronology",
      "retType": "java.time.chrono.HijrahChronology",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahDate",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahDate: java.time.chrono.HijrahChronology getChronology()>"
    },
    {
      "name": "getEra",
      "retType": "java.time.chrono.HijrahEra",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahDate",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahDate: java.time.chrono.HijrahEra getEra()>"
    },
    {
      "name": "lengthOfMonth",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahDate",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahDate: int lengthOfMonth()>"
    },
    {
      "name": "lengthOfYear",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahDate",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahDate: int lengthOfYear()>"
    },
    {
      "name": "range",
      "retType": "java.time.temporal.ValueRange",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahDate",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahDate: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
    },
    {
      "name": "getLong",
      "retType": "long",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahDate",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahDate: long getLong(java.time.temporal.TemporalField)>"
    },
    {
      "name": "with",
      "retType": "java.time.chrono.HijrahDate",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahDate",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahDate: java.time.chrono.HijrahDate 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "with",
      "retType": "java.time.chrono.HijrahDate",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahDate",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahDate: java.time.chrono.HijrahDate 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "withVariant",
      "retType": "java.time.chrono.HijrahDate",
      "argType": "java.time.chrono.HijrahChronology",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahDate",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahDate: java.time.chrono.HijrahDate withVariant(java.time.chrono.HijrahChronology)>"
    },
    {
      "name": "plus",
      "retType": "java.time.chrono.HijrahDate",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahDate",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahDate: java.time.chrono.HijrahDate plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "minus",
      "retType": "java.time.chrono.HijrahDate",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahDate",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahDate: java.time.chrono.HijrahDate minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "toEpochDay",
      "retType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahDate",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahDate: long toEpochDay()>"
    },
    {
      "name": "isLeapYear",
      "retType": "boolean",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahDate",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahDate: boolean isLeapYear()>"
    },
    {
      "name": "plus",
      "retType": "java.time.chrono.HijrahDate",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahDate",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahDate: java.time.chrono.HijrahDate plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minus",
      "retType": "java.time.chrono.HijrahDate",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahDate",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahDate: java.time.chrono.HijrahDate minus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "atTime",
      "retType": "java.time.chrono.ChronoLocalDateTime",
      "argType": "java.time.LocalTime",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahDate",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahDate: java.time.chrono.ChronoLocalDateTime atTime(java.time.LocalTime)>"
    },
    {
      "name": "until",
      "retType": "java.time.chrono.ChronoPeriod",
      "argType": "java.time.chrono.ChronoLocalDate",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahDate",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahDate: java.time.chrono.ChronoPeriod until(java.time.chrono.ChronoLocalDate)>"
    },
    {
      "name": "equals",
      "retType": "boolean",
      "argType": "java.lang.Object",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahDate",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahDate: boolean equals(java.lang.Object)>"
    },
    {
      "name": "until",
      "retType": "long",
      "argType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahDate",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahDate: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minus",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahDate",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahDate: java.time.chrono.ChronoLocalDate minus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minus",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahDate",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahDate: java.time.chrono.ChronoLocalDate minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "plus",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahDate",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahDate: java.time.chrono.ChronoLocalDate plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "plus",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahDate",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahDate: java.time.chrono.ChronoLocalDate plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "with",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahDate",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahDate: java.time.chrono.ChronoLocalDate 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "with",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahDate",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahDate: java.time.chrono.ChronoLocalDate 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "getEra",
      "retType": "java.time.chrono.Era",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahDate",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahDate: java.time.chrono.Era getEra()>"
    },
    {
      "name": "getChronology",
      "retType": "java.time.chrono.Chronology",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahDate",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahDate: java.time.chrono.Chronology getChronology()>"
    },
    {
      "name": "minus",
      "retType": "java.time.temporal.Temporal",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahDate",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahDate: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minus",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahDate",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahDate: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "plus",
      "retType": "java.time.temporal.Temporal",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahDate",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahDate: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "plus",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahDate",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahDate: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "with",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahDate",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahDate: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "with",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahDate",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahDate: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "values",
      "retType": "java.time.chrono.HijrahEra[]",
      "isStatic": true,
      "hostClass": "java.time.chrono.HijrahEra",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahEra: java.time.chrono.HijrahEra[] values()>"
    },
    {
      "name": "valueOf",
      "retType": "java.time.chrono.HijrahEra",
      "argType": "java.lang.String",
      "isStatic": true,
      "hostClass": "java.time.chrono.HijrahEra",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahEra: java.time.chrono.HijrahEra valueOf(java.lang.String)>"
    },
    {
      "name": "of",
      "retType": "java.time.chrono.HijrahEra",
      "argType": "int",
      "isStatic": true,
      "hostClass": "java.time.chrono.HijrahEra",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahEra: java.time.chrono.HijrahEra of(int)>"
    },
    {
      "name": "getValue",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahEra",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahEra: int getValue()>"
    },
    {
      "name": "range",
      "retType": "java.time.temporal.ValueRange",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.chrono.HijrahEra",
      "isConstructor": false,
      "method": "<java.time.chrono.HijrahEra: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
    },
    {
      "name": "getId",
      "retType": "java.lang.String",
      "isStatic": false,
      "hostClass": "java.time.chrono.IsoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.IsoChronology: java.lang.String getId()>"
    },
    {
      "name": "getCalendarType",
      "retType": "java.lang.String",
      "isStatic": false,
      "hostClass": "java.time.chrono.IsoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.IsoChronology: java.lang.String getCalendarType()>"
    },
    {
      "name": "date",
      "retType": "java.time.LocalDate",
      "argType": "int",
      "argType": "int",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.IsoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.IsoChronology: java.time.LocalDate date(int,int,int)>"
    },
    {
      "name": "dateYearDay",
      "retType": "java.time.LocalDate",
      "argType": "java.time.chrono.Era",
      "argType": "int",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.IsoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.IsoChronology: java.time.LocalDate dateYearDay(java.time.chrono.Era,int,int)>"
    },
    {
      "name": "dateYearDay",
      "retType": "java.time.LocalDate",
      "argType": "int",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.IsoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.IsoChronology: java.time.LocalDate dateYearDay(int,int)>"
    },
    {
      "name": "dateEpochDay",
      "retType": "java.time.LocalDate",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.IsoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.IsoChronology: java.time.LocalDate dateEpochDay(long)>"
    },
    {
      "name": "date",
      "retType": "java.time.LocalDate",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.chrono.IsoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.IsoChronology: java.time.LocalDate date(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "localDateTime",
      "retType": "java.time.LocalDateTime",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.chrono.IsoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.IsoChronology: java.time.LocalDateTime localDateTime(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "zonedDateTime",
      "retType": "java.time.ZonedDateTime",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.chrono.IsoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.IsoChronology: java.time.ZonedDateTime zonedDateTime(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "zonedDateTime",
      "retType": "java.time.ZonedDateTime",
      "argType": "java.time.Instant",
      "argType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.chrono.IsoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.IsoChronology: java.time.ZonedDateTime zonedDateTime(java.time.Instant,java.time.ZoneId)>"
    },
    {
      "name": "dateNow",
      "retType": "java.time.LocalDate",
      "isStatic": false,
      "hostClass": "java.time.chrono.IsoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.IsoChronology: java.time.LocalDate dateNow()>"
    },
    {
      "name": "dateNow",
      "retType": "java.time.LocalDate",
      "argType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.chrono.IsoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.IsoChronology: java.time.LocalDate dateNow(java.time.ZoneId)>"
    },
    {
      "name": "dateNow",
      "retType": "java.time.LocalDate",
      "argType": "java.time.Clock",
      "isStatic": false,
      "hostClass": "java.time.chrono.IsoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.IsoChronology: java.time.LocalDate dateNow(java.time.Clock)>"
    },
    {
      "name": "isLeapYear",
      "retType": "boolean",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.IsoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.IsoChronology: boolean isLeapYear(long)>"
    },
    {
      "name": "prolepticYear",
      "retType": "int",
      "argType": "java.time.chrono.Era",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.IsoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.IsoChronology: int prolepticYear(java.time.chrono.Era,int)>"
    },
    {
      "name": "eraOf",
      "retType": "java.time.chrono.IsoEra",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.IsoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.IsoChronology: java.time.chrono.IsoEra eraOf(int)>"
    },
    {
      "name": "eras",
      "retType": "java.util.List",
      "isStatic": false,
      "hostClass": "java.time.chrono.IsoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.IsoChronology: java.util.List eras()>"
    },
    {
      "name": "resolveDate",
      "retType": "java.time.LocalDate",
      "argType": "java.util.Map",
      "argType": "java.time.format.ResolverStyle",
      "isStatic": false,
      "hostClass": "java.time.chrono.IsoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.IsoChronology: java.time.LocalDate resolveDate(java.util.Map,java.time.format.ResolverStyle)>"
    },
    {
      "name": "range",
      "retType": "java.time.temporal.ValueRange",
      "argType": "java.time.temporal.ChronoField",
      "isStatic": false,
      "hostClass": "java.time.chrono.IsoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.IsoChronology: java.time.temporal.ValueRange range(java.time.temporal.ChronoField)>"
    },
    {
      "name": "period",
      "retType": "java.time.Period",
      "argType": "int",
      "argType": "int",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.IsoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.IsoChronology: java.time.Period period(int,int,int)>"
    },
    {
      "name": "resolveDate",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.util.Map",
      "argType": "java.time.format.ResolverStyle",
      "isStatic": false,
      "hostClass": "java.time.chrono.IsoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate resolveDate(java.util.Map,java.time.format.ResolverStyle)>"
    },
    {
      "name": "period",
      "retType": "java.time.chrono.ChronoPeriod",
      "argType": "int",
      "argType": "int",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.IsoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.IsoChronology: java.time.chrono.ChronoPeriod period(int,int,int)>"
    },
    {
      "name": "eraOf",
      "retType": "java.time.chrono.Era",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.IsoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.IsoChronology: java.time.chrono.Era eraOf(int)>"
    },
    {
      "name": "zonedDateTime",
      "retType": "java.time.chrono.ChronoZonedDateTime",
      "argType": "java.time.Instant",
      "argType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.chrono.IsoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.IsoChronology: java.time.chrono.ChronoZonedDateTime zonedDateTime(java.time.Instant,java.time.ZoneId)>"
    },
    {
      "name": "zonedDateTime",
      "retType": "java.time.chrono.ChronoZonedDateTime",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.chrono.IsoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.IsoChronology: java.time.chrono.ChronoZonedDateTime zonedDateTime(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "localDateTime",
      "retType": "java.time.chrono.ChronoLocalDateTime",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.chrono.IsoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDateTime localDateTime(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "date",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.chrono.IsoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate date(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "dateNow",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.Clock",
      "isStatic": false,
      "hostClass": "java.time.chrono.IsoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate dateNow(java.time.Clock)>"
    },
    {
      "name": "dateNow",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.chrono.IsoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate dateNow(java.time.ZoneId)>"
    },
    {
      "name": "dateNow",
      "retType": "java.time.chrono.ChronoLocalDate",
      "isStatic": false,
      "hostClass": "java.time.chrono.IsoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate dateNow()>"
    },
    {
      "name": "dateEpochDay",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.IsoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate dateEpochDay(long)>"
    },
    {
      "name": "dateYearDay",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "int",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.IsoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate dateYearDay(int,int)>"
    },
    {
      "name": "dateYearDay",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.chrono.Era",
      "argType": "int",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.IsoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate dateYearDay(java.time.chrono.Era,int,int)>"
    },
    {
      "name": "date",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "int",
      "argType": "int",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.IsoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.IsoChronology: java.time.chrono.ChronoLocalDate date(int,int,int)>"
    },
    {
      "name": "values",
      "retType": "java.time.chrono.IsoEra[]",
      "isStatic": true,
      "hostClass": "java.time.chrono.IsoEra",
      "isConstructor": false,
      "method": "<java.time.chrono.IsoEra: java.time.chrono.IsoEra[] values()>"
    },
    {
      "name": "valueOf",
      "retType": "java.time.chrono.IsoEra",
      "argType": "java.lang.String",
      "isStatic": true,
      "hostClass": "java.time.chrono.IsoEra",
      "isConstructor": false,
      "method": "<java.time.chrono.IsoEra: java.time.chrono.IsoEra valueOf(java.lang.String)>"
    },
    {
      "name": "of",
      "retType": "java.time.chrono.IsoEra",
      "argType": "int",
      "isStatic": true,
      "hostClass": "java.time.chrono.IsoEra",
      "isConstructor": false,
      "method": "<java.time.chrono.IsoEra: java.time.chrono.IsoEra of(int)>"
    },
    {
      "name": "getValue",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.IsoEra",
      "isConstructor": false,
      "method": "<java.time.chrono.IsoEra: int getValue()>"
    },
    {
      "name": "getId",
      "retType": "java.lang.String",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseChronology: java.lang.String getId()>"
    },
    {
      "name": "getCalendarType",
      "retType": "java.lang.String",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseChronology: java.lang.String getCalendarType()>"
    },
    {
      "name": "date",
      "retType": "java.time.chrono.JapaneseDate",
      "argType": "int",
      "argType": "int",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseChronology: java.time.chrono.JapaneseDate date(int,int,int)>"
    },
    {
      "name": "dateYearDay",
      "retType": "java.time.chrono.JapaneseDate",
      "argType": "java.time.chrono.Era",
      "argType": "int",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseChronology: java.time.chrono.JapaneseDate dateYearDay(java.time.chrono.Era,int,int)>"
    },
    {
      "name": "dateYearDay",
      "retType": "java.time.chrono.JapaneseDate",
      "argType": "int",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseChronology: java.time.chrono.JapaneseDate dateYearDay(int,int)>"
    },
    {
      "name": "dateEpochDay",
      "retType": "java.time.chrono.JapaneseDate",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseChronology: java.time.chrono.JapaneseDate dateEpochDay(long)>"
    },
    {
      "name": "dateNow",
      "retType": "java.time.chrono.JapaneseDate",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseChronology: java.time.chrono.JapaneseDate dateNow()>"
    },
    {
      "name": "dateNow",
      "retType": "java.time.chrono.JapaneseDate",
      "argType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseChronology: java.time.chrono.JapaneseDate dateNow(java.time.ZoneId)>"
    },
    {
      "name": "dateNow",
      "retType": "java.time.chrono.JapaneseDate",
      "argType": "java.time.Clock",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseChronology: java.time.chrono.JapaneseDate dateNow(java.time.Clock)>"
    },
    {
      "name": "date",
      "retType": "java.time.chrono.JapaneseDate",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseChronology: java.time.chrono.JapaneseDate date(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "localDateTime",
      "retType": "java.time.chrono.ChronoLocalDateTime",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseChronology: java.time.chrono.ChronoLocalDateTime localDateTime(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "zonedDateTime",
      "retType": "java.time.chrono.ChronoZonedDateTime",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseChronology: java.time.chrono.ChronoZonedDateTime zonedDateTime(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "zonedDateTime",
      "retType": "java.time.chrono.ChronoZonedDateTime",
      "argType": "java.time.Instant",
      "argType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseChronology: java.time.chrono.ChronoZonedDateTime zonedDateTime(java.time.Instant,java.time.ZoneId)>"
    },
    {
      "name": "isLeapYear",
      "retType": "boolean",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseChronology: boolean isLeapYear(long)>"
    },
    {
      "name": "prolepticYear",
      "retType": "int",
      "argType": "java.time.chrono.Era",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseChronology: int prolepticYear(java.time.chrono.Era,int)>"
    },
    {
      "name": "eraOf",
      "retType": "java.time.chrono.JapaneseEra",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseChronology: java.time.chrono.JapaneseEra eraOf(int)>"
    },
    {
      "name": "eras",
      "retType": "java.util.List",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseChronology: java.util.List eras()>"
    },
    {
      "name": "range",
      "retType": "java.time.temporal.ValueRange",
      "argType": "java.time.temporal.ChronoField",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseChronology: java.time.temporal.ValueRange range(java.time.temporal.ChronoField)>"
    },
    {
      "name": "resolveDate",
      "retType": "java.time.chrono.JapaneseDate",
      "argType": "java.util.Map",
      "argType": "java.time.format.ResolverStyle",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseChronology: java.time.chrono.JapaneseDate resolveDate(java.util.Map,java.time.format.ResolverStyle)>"
    },
    {
      "name": "resolveDate",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.util.Map",
      "argType": "java.time.format.ResolverStyle",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseChronology: java.time.chrono.ChronoLocalDate resolveDate(java.util.Map,java.time.format.ResolverStyle)>"
    },
    {
      "name": "eraOf",
      "retType": "java.time.chrono.Era",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseChronology: java.time.chrono.Era eraOf(int)>"
    },
    {
      "name": "date",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseChronology: java.time.chrono.ChronoLocalDate date(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "dateNow",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.Clock",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseChronology: java.time.chrono.ChronoLocalDate dateNow(java.time.Clock)>"
    },
    {
      "name": "dateNow",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseChronology: java.time.chrono.ChronoLocalDate dateNow(java.time.ZoneId)>"
    },
    {
      "name": "dateNow",
      "retType": "java.time.chrono.ChronoLocalDate",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseChronology: java.time.chrono.ChronoLocalDate dateNow()>"
    },
    {
      "name": "dateEpochDay",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseChronology: java.time.chrono.ChronoLocalDate dateEpochDay(long)>"
    },
    {
      "name": "dateYearDay",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "int",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseChronology: java.time.chrono.ChronoLocalDate dateYearDay(int,int)>"
    },
    {
      "name": "dateYearDay",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.chrono.Era",
      "argType": "int",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseChronology: java.time.chrono.ChronoLocalDate dateYearDay(java.time.chrono.Era,int,int)>"
    },
    {
      "name": "date",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "int",
      "argType": "int",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseChronology: java.time.chrono.ChronoLocalDate date(int,int,int)>"
    },
    {
      "name": "now",
      "retType": "java.time.chrono.JapaneseDate",
      "isStatic": true,
      "hostClass": "java.time.chrono.JapaneseDate",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseDate: java.time.chrono.JapaneseDate now()>"
    },
    {
      "name": "now",
      "retType": "java.time.chrono.JapaneseDate",
      "argType": "java.time.ZoneId",
      "isStatic": true,
      "hostClass": "java.time.chrono.JapaneseDate",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseDate: java.time.chrono.JapaneseDate now(java.time.ZoneId)>"
    },
    {
      "name": "now",
      "retType": "java.time.chrono.JapaneseDate",
      "argType": "java.time.Clock",
      "isStatic": true,
      "hostClass": "java.time.chrono.JapaneseDate",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseDate: java.time.chrono.JapaneseDate now(java.time.Clock)>"
    },
    {
      "name": "of",
      "retType": "java.time.chrono.JapaneseDate",
      "argType": "int",
      "argType": "int",
      "argType": "int",
      "isStatic": true,
      "hostClass": "java.time.chrono.JapaneseDate",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseDate: java.time.chrono.JapaneseDate of(int,int,int)>"
    },
    {
      "name": "from",
      "retType": "java.time.chrono.JapaneseDate",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": true,
      "hostClass": "java.time.chrono.JapaneseDate",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseDate: java.time.chrono.JapaneseDate 'from'(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "getChronology",
      "retType": "java.time.chrono.JapaneseChronology",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseDate",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseDate: java.time.chrono.JapaneseChronology getChronology()>"
    },
    {
      "name": "getEra",
      "retType": "java.time.chrono.JapaneseEra",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseDate",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseDate: java.time.chrono.JapaneseEra getEra()>"
    },
    {
      "name": "lengthOfMonth",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseDate",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseDate: int lengthOfMonth()>"
    },
    {
      "name": "lengthOfYear",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseDate",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseDate: int lengthOfYear()>"
    },
    {
      "name": "isSupported",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseDate",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseDate: boolean isSupported(java.time.temporal.TemporalField)>"
    },
    {
      "name": "range",
      "retType": "java.time.temporal.ValueRange",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseDate",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseDate: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
    },
    {
      "name": "getLong",
      "retType": "long",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseDate",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseDate: long getLong(java.time.temporal.TemporalField)>"
    },
    {
      "name": "with",
      "retType": "java.time.chrono.JapaneseDate",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseDate",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseDate: java.time.chrono.JapaneseDate 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "with",
      "retType": "java.time.chrono.JapaneseDate",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseDate",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseDate: java.time.chrono.JapaneseDate 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "plus",
      "retType": "java.time.chrono.JapaneseDate",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseDate",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseDate: java.time.chrono.JapaneseDate plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "minus",
      "retType": "java.time.chrono.JapaneseDate",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseDate",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseDate: java.time.chrono.JapaneseDate minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "plus",
      "retType": "java.time.chrono.JapaneseDate",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseDate",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseDate: java.time.chrono.JapaneseDate plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minus",
      "retType": "java.time.chrono.JapaneseDate",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseDate",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseDate: java.time.chrono.JapaneseDate minus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "atTime",
      "retType": "java.time.chrono.ChronoLocalDateTime",
      "argType": "java.time.LocalTime",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseDate",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseDate: java.time.chrono.ChronoLocalDateTime atTime(java.time.LocalTime)>"
    },
    {
      "name": "until",
      "retType": "java.time.chrono.ChronoPeriod",
      "argType": "java.time.chrono.ChronoLocalDate",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseDate",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseDate: java.time.chrono.ChronoPeriod until(java.time.chrono.ChronoLocalDate)>"
    },
    {
      "name": "toEpochDay",
      "retType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseDate",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseDate: long toEpochDay()>"
    },
    {
      "name": "equals",
      "retType": "boolean",
      "argType": "java.lang.Object",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseDate",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseDate: boolean equals(java.lang.Object)>"
    },
    {
      "name": "until",
      "retType": "long",
      "argType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseDate",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseDate: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minus",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseDate",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseDate: java.time.chrono.ChronoLocalDate minus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minus",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseDate",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseDate: java.time.chrono.ChronoLocalDate minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "plus",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseDate",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseDate: java.time.chrono.ChronoLocalDate plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "plus",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseDate",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseDate: java.time.chrono.ChronoLocalDate plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "with",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseDate",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseDate: java.time.chrono.ChronoLocalDate 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "with",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseDate",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseDate: java.time.chrono.ChronoLocalDate 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "getEra",
      "retType": "java.time.chrono.Era",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseDate",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseDate: java.time.chrono.Era getEra()>"
    },
    {
      "name": "getChronology",
      "retType": "java.time.chrono.Chronology",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseDate",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseDate: java.time.chrono.Chronology getChronology()>"
    },
    {
      "name": "minus",
      "retType": "java.time.temporal.Temporal",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseDate",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseDate: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minus",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseDate",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseDate: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "plus",
      "retType": "java.time.temporal.Temporal",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseDate",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseDate: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "plus",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseDate",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseDate: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "with",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseDate",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseDate: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "with",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseDate",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseDate: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "of",
      "retType": "java.time.chrono.JapaneseEra",
      "argType": "int",
      "isStatic": true,
      "hostClass": "java.time.chrono.JapaneseEra",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseEra: java.time.chrono.JapaneseEra of(int)>"
    },
    {
      "name": "valueOf",
      "retType": "java.time.chrono.JapaneseEra",
      "argType": "java.lang.String",
      "isStatic": true,
      "hostClass": "java.time.chrono.JapaneseEra",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseEra: java.time.chrono.JapaneseEra valueOf(java.lang.String)>"
    },
    {
      "name": "values",
      "retType": "java.time.chrono.JapaneseEra[]",
      "isStatic": true,
      "hostClass": "java.time.chrono.JapaneseEra",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseEra: java.time.chrono.JapaneseEra[] values()>"
    },
    {
      "name": "getDisplayName",
      "retType": "java.lang.String",
      "argType": "java.time.format.TextStyle",
      "argType": "java.util.Locale",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseEra",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseEra: java.lang.String getDisplayName(java.time.format.TextStyle,java.util.Locale)>"
    },
    {
      "name": "getValue",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseEra",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseEra: int getValue()>"
    },
    {
      "name": "range",
      "retType": "java.time.temporal.ValueRange",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.chrono.JapaneseEra",
      "isConstructor": false,
      "method": "<java.time.chrono.JapaneseEra: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
    },
    {
      "name": "getId",
      "retType": "java.lang.String",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoChronology: java.lang.String getId()>"
    },
    {
      "name": "getCalendarType",
      "retType": "java.lang.String",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoChronology: java.lang.String getCalendarType()>"
    },
    {
      "name": "date",
      "retType": "java.time.chrono.MinguoDate",
      "argType": "int",
      "argType": "int",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoChronology: java.time.chrono.MinguoDate date(int,int,int)>"
    },
    {
      "name": "dateYearDay",
      "retType": "java.time.chrono.MinguoDate",
      "argType": "java.time.chrono.Era",
      "argType": "int",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoChronology: java.time.chrono.MinguoDate dateYearDay(java.time.chrono.Era,int,int)>"
    },
    {
      "name": "dateYearDay",
      "retType": "java.time.chrono.MinguoDate",
      "argType": "int",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoChronology: java.time.chrono.MinguoDate dateYearDay(int,int)>"
    },
    {
      "name": "dateEpochDay",
      "retType": "java.time.chrono.MinguoDate",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoChronology: java.time.chrono.MinguoDate dateEpochDay(long)>"
    },
    {
      "name": "dateNow",
      "retType": "java.time.chrono.MinguoDate",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoChronology: java.time.chrono.MinguoDate dateNow()>"
    },
    {
      "name": "dateNow",
      "retType": "java.time.chrono.MinguoDate",
      "argType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoChronology: java.time.chrono.MinguoDate dateNow(java.time.ZoneId)>"
    },
    {
      "name": "dateNow",
      "retType": "java.time.chrono.MinguoDate",
      "argType": "java.time.Clock",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoChronology: java.time.chrono.MinguoDate dateNow(java.time.Clock)>"
    },
    {
      "name": "date",
      "retType": "java.time.chrono.MinguoDate",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoChronology: java.time.chrono.MinguoDate date(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "localDateTime",
      "retType": "java.time.chrono.ChronoLocalDateTime",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoChronology: java.time.chrono.ChronoLocalDateTime localDateTime(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "zonedDateTime",
      "retType": "java.time.chrono.ChronoZonedDateTime",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoChronology: java.time.chrono.ChronoZonedDateTime zonedDateTime(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "zonedDateTime",
      "retType": "java.time.chrono.ChronoZonedDateTime",
      "argType": "java.time.Instant",
      "argType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoChronology: java.time.chrono.ChronoZonedDateTime zonedDateTime(java.time.Instant,java.time.ZoneId)>"
    },
    {
      "name": "isLeapYear",
      "retType": "boolean",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoChronology: boolean isLeapYear(long)>"
    },
    {
      "name": "prolepticYear",
      "retType": "int",
      "argType": "java.time.chrono.Era",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoChronology: int prolepticYear(java.time.chrono.Era,int)>"
    },
    {
      "name": "eraOf",
      "retType": "java.time.chrono.MinguoEra",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoChronology: java.time.chrono.MinguoEra eraOf(int)>"
    },
    {
      "name": "eras",
      "retType": "java.util.List",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoChronology: java.util.List eras()>"
    },
    {
      "name": "range",
      "retType": "java.time.temporal.ValueRange",
      "argType": "java.time.temporal.ChronoField",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoChronology: java.time.temporal.ValueRange range(java.time.temporal.ChronoField)>"
    },
    {
      "name": "resolveDate",
      "retType": "java.time.chrono.MinguoDate",
      "argType": "java.util.Map",
      "argType": "java.time.format.ResolverStyle",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoChronology: java.time.chrono.MinguoDate resolveDate(java.util.Map,java.time.format.ResolverStyle)>"
    },
    {
      "name": "resolveDate",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.util.Map",
      "argType": "java.time.format.ResolverStyle",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoChronology: java.time.chrono.ChronoLocalDate resolveDate(java.util.Map,java.time.format.ResolverStyle)>"
    },
    {
      "name": "eraOf",
      "retType": "java.time.chrono.Era",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoChronology: java.time.chrono.Era eraOf(int)>"
    },
    {
      "name": "date",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoChronology: java.time.chrono.ChronoLocalDate date(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "dateNow",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.Clock",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoChronology: java.time.chrono.ChronoLocalDate dateNow(java.time.Clock)>"
    },
    {
      "name": "dateNow",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoChronology: java.time.chrono.ChronoLocalDate dateNow(java.time.ZoneId)>"
    },
    {
      "name": "dateNow",
      "retType": "java.time.chrono.ChronoLocalDate",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoChronology: java.time.chrono.ChronoLocalDate dateNow()>"
    },
    {
      "name": "dateEpochDay",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoChronology: java.time.chrono.ChronoLocalDate dateEpochDay(long)>"
    },
    {
      "name": "dateYearDay",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "int",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoChronology: java.time.chrono.ChronoLocalDate dateYearDay(int,int)>"
    },
    {
      "name": "dateYearDay",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.chrono.Era",
      "argType": "int",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoChronology: java.time.chrono.ChronoLocalDate dateYearDay(java.time.chrono.Era,int,int)>"
    },
    {
      "name": "date",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "int",
      "argType": "int",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoChronology: java.time.chrono.ChronoLocalDate date(int,int,int)>"
    },
    {
      "name": "now",
      "retType": "java.time.chrono.MinguoDate",
      "isStatic": true,
      "hostClass": "java.time.chrono.MinguoDate",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoDate: java.time.chrono.MinguoDate now()>"
    },
    {
      "name": "now",
      "retType": "java.time.chrono.MinguoDate",
      "argType": "java.time.ZoneId",
      "isStatic": true,
      "hostClass": "java.time.chrono.MinguoDate",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoDate: java.time.chrono.MinguoDate now(java.time.ZoneId)>"
    },
    {
      "name": "now",
      "retType": "java.time.chrono.MinguoDate",
      "argType": "java.time.Clock",
      "isStatic": true,
      "hostClass": "java.time.chrono.MinguoDate",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoDate: java.time.chrono.MinguoDate now(java.time.Clock)>"
    },
    {
      "name": "of",
      "retType": "java.time.chrono.MinguoDate",
      "argType": "int",
      "argType": "int",
      "argType": "int",
      "isStatic": true,
      "hostClass": "java.time.chrono.MinguoDate",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoDate: java.time.chrono.MinguoDate of(int,int,int)>"
    },
    {
      "name": "from",
      "retType": "java.time.chrono.MinguoDate",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": true,
      "hostClass": "java.time.chrono.MinguoDate",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoDate: java.time.chrono.MinguoDate 'from'(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "getChronology",
      "retType": "java.time.chrono.MinguoChronology",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoDate",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoDate: java.time.chrono.MinguoChronology getChronology()>"
    },
    {
      "name": "getEra",
      "retType": "java.time.chrono.MinguoEra",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoDate",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoDate: java.time.chrono.MinguoEra getEra()>"
    },
    {
      "name": "lengthOfMonth",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoDate",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoDate: int lengthOfMonth()>"
    },
    {
      "name": "range",
      "retType": "java.time.temporal.ValueRange",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoDate",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoDate: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
    },
    {
      "name": "getLong",
      "retType": "long",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoDate",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoDate: long getLong(java.time.temporal.TemporalField)>"
    },
    {
      "name": "with",
      "retType": "java.time.chrono.MinguoDate",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoDate",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoDate: java.time.chrono.MinguoDate 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "with",
      "retType": "java.time.chrono.MinguoDate",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoDate",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoDate: java.time.chrono.MinguoDate 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "plus",
      "retType": "java.time.chrono.MinguoDate",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoDate",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoDate: java.time.chrono.MinguoDate plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "minus",
      "retType": "java.time.chrono.MinguoDate",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoDate",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoDate: java.time.chrono.MinguoDate minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "plus",
      "retType": "java.time.chrono.MinguoDate",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoDate",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoDate: java.time.chrono.MinguoDate plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minus",
      "retType": "java.time.chrono.MinguoDate",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoDate",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoDate: java.time.chrono.MinguoDate minus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "atTime",
      "retType": "java.time.chrono.ChronoLocalDateTime",
      "argType": "java.time.LocalTime",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoDate",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoDate: java.time.chrono.ChronoLocalDateTime atTime(java.time.LocalTime)>"
    },
    {
      "name": "until",
      "retType": "java.time.chrono.ChronoPeriod",
      "argType": "java.time.chrono.ChronoLocalDate",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoDate",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoDate: java.time.chrono.ChronoPeriod until(java.time.chrono.ChronoLocalDate)>"
    },
    {
      "name": "toEpochDay",
      "retType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoDate",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoDate: long toEpochDay()>"
    },
    {
      "name": "equals",
      "retType": "boolean",
      "argType": "java.lang.Object",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoDate",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoDate: boolean equals(java.lang.Object)>"
    },
    {
      "name": "until",
      "retType": "long",
      "argType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoDate",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoDate: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minus",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoDate",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoDate: java.time.chrono.ChronoLocalDate minus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minus",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoDate",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoDate: java.time.chrono.ChronoLocalDate minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "plus",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoDate",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoDate: java.time.chrono.ChronoLocalDate plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "plus",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoDate",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoDate: java.time.chrono.ChronoLocalDate plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "with",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoDate",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoDate: java.time.chrono.ChronoLocalDate 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "with",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoDate",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoDate: java.time.chrono.ChronoLocalDate 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "getEra",
      "retType": "java.time.chrono.Era",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoDate",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoDate: java.time.chrono.Era getEra()>"
    },
    {
      "name": "getChronology",
      "retType": "java.time.chrono.Chronology",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoDate",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoDate: java.time.chrono.Chronology getChronology()>"
    },
    {
      "name": "minus",
      "retType": "java.time.temporal.Temporal",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoDate",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoDate: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minus",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoDate",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoDate: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "plus",
      "retType": "java.time.temporal.Temporal",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoDate",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoDate: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "plus",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoDate",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoDate: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "with",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoDate",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoDate: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "with",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoDate",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoDate: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "values",
      "retType": "java.time.chrono.MinguoEra[]",
      "isStatic": true,
      "hostClass": "java.time.chrono.MinguoEra",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoEra: java.time.chrono.MinguoEra[] values()>"
    },
    {
      "name": "valueOf",
      "retType": "java.time.chrono.MinguoEra",
      "argType": "java.lang.String",
      "isStatic": true,
      "hostClass": "java.time.chrono.MinguoEra",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoEra: java.time.chrono.MinguoEra valueOf(java.lang.String)>"
    },
    {
      "name": "of",
      "retType": "java.time.chrono.MinguoEra",
      "argType": "int",
      "isStatic": true,
      "hostClass": "java.time.chrono.MinguoEra",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoEra: java.time.chrono.MinguoEra of(int)>"
    },
    {
      "name": "getValue",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.MinguoEra",
      "isConstructor": false,
      "method": "<java.time.chrono.MinguoEra: int getValue()>"
    },
    {
      "name": "java.time.chrono.Ser",
      "retType": "java.time.chrono.Ser",
      "isStatic": false,
      "hostClass": "java.time.chrono.Ser",
      "isConstructor": true,
      "method": "<java.time.chrono.Ser: void <init>()>"
    },
    {
      "name": "writeExternal",
      "retType": "void",
      "argType": "java.io.ObjectOutput",
      "isStatic": false,
      "hostClass": "java.time.chrono.Ser",
      "isConstructor": false,
      "method": "<java.time.chrono.Ser: void writeExternal(java.io.ObjectOutput)>"
    },
    {
      "name": "readExternal",
      "retType": "void",
      "argType": "java.io.ObjectInput",
      "isStatic": false,
      "hostClass": "java.time.chrono.Ser",
      "isConstructor": false,
      "method": "<java.time.chrono.Ser: void readExternal(java.io.ObjectInput)>"
    },
    {
      "name": "getId",
      "retType": "java.lang.String",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistChronology: java.lang.String getId()>"
    },
    {
      "name": "getCalendarType",
      "retType": "java.lang.String",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistChronology: java.lang.String getCalendarType()>"
    },
    {
      "name": "date",
      "retType": "java.time.chrono.ThaiBuddhistDate",
      "argType": "int",
      "argType": "int",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistChronology: java.time.chrono.ThaiBuddhistDate date(int,int,int)>"
    },
    {
      "name": "dateYearDay",
      "retType": "java.time.chrono.ThaiBuddhistDate",
      "argType": "java.time.chrono.Era",
      "argType": "int",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistChronology: java.time.chrono.ThaiBuddhistDate dateYearDay(java.time.chrono.Era,int,int)>"
    },
    {
      "name": "dateYearDay",
      "retType": "java.time.chrono.ThaiBuddhistDate",
      "argType": "int",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistChronology: java.time.chrono.ThaiBuddhistDate dateYearDay(int,int)>"
    },
    {
      "name": "dateEpochDay",
      "retType": "java.time.chrono.ThaiBuddhistDate",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistChronology: java.time.chrono.ThaiBuddhistDate dateEpochDay(long)>"
    },
    {
      "name": "dateNow",
      "retType": "java.time.chrono.ThaiBuddhistDate",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistChronology: java.time.chrono.ThaiBuddhistDate dateNow()>"
    },
    {
      "name": "dateNow",
      "retType": "java.time.chrono.ThaiBuddhistDate",
      "argType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistChronology: java.time.chrono.ThaiBuddhistDate dateNow(java.time.ZoneId)>"
    },
    {
      "name": "dateNow",
      "retType": "java.time.chrono.ThaiBuddhistDate",
      "argType": "java.time.Clock",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistChronology: java.time.chrono.ThaiBuddhistDate dateNow(java.time.Clock)>"
    },
    {
      "name": "date",
      "retType": "java.time.chrono.ThaiBuddhistDate",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistChronology: java.time.chrono.ThaiBuddhistDate date(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "localDateTime",
      "retType": "java.time.chrono.ChronoLocalDateTime",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistChronology: java.time.chrono.ChronoLocalDateTime localDateTime(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "zonedDateTime",
      "retType": "java.time.chrono.ChronoZonedDateTime",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistChronology: java.time.chrono.ChronoZonedDateTime zonedDateTime(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "zonedDateTime",
      "retType": "java.time.chrono.ChronoZonedDateTime",
      "argType": "java.time.Instant",
      "argType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistChronology: java.time.chrono.ChronoZonedDateTime zonedDateTime(java.time.Instant,java.time.ZoneId)>"
    },
    {
      "name": "isLeapYear",
      "retType": "boolean",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistChronology: boolean isLeapYear(long)>"
    },
    {
      "name": "prolepticYear",
      "retType": "int",
      "argType": "java.time.chrono.Era",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistChronology: int prolepticYear(java.time.chrono.Era,int)>"
    },
    {
      "name": "eraOf",
      "retType": "java.time.chrono.ThaiBuddhistEra",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistChronology: java.time.chrono.ThaiBuddhistEra eraOf(int)>"
    },
    {
      "name": "eras",
      "retType": "java.util.List",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistChronology: java.util.List eras()>"
    },
    {
      "name": "range",
      "retType": "java.time.temporal.ValueRange",
      "argType": "java.time.temporal.ChronoField",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistChronology: java.time.temporal.ValueRange range(java.time.temporal.ChronoField)>"
    },
    {
      "name": "resolveDate",
      "retType": "java.time.chrono.ThaiBuddhistDate",
      "argType": "java.util.Map",
      "argType": "java.time.format.ResolverStyle",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistChronology: java.time.chrono.ThaiBuddhistDate resolveDate(java.util.Map,java.time.format.ResolverStyle)>"
    },
    {
      "name": "resolveDate",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.util.Map",
      "argType": "java.time.format.ResolverStyle",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistChronology: java.time.chrono.ChronoLocalDate resolveDate(java.util.Map,java.time.format.ResolverStyle)>"
    },
    {
      "name": "eraOf",
      "retType": "java.time.chrono.Era",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistChronology: java.time.chrono.Era eraOf(int)>"
    },
    {
      "name": "date",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistChronology: java.time.chrono.ChronoLocalDate date(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "dateNow",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.Clock",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistChronology: java.time.chrono.ChronoLocalDate dateNow(java.time.Clock)>"
    },
    {
      "name": "dateNow",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistChronology: java.time.chrono.ChronoLocalDate dateNow(java.time.ZoneId)>"
    },
    {
      "name": "dateNow",
      "retType": "java.time.chrono.ChronoLocalDate",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistChronology: java.time.chrono.ChronoLocalDate dateNow()>"
    },
    {
      "name": "dateEpochDay",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistChronology: java.time.chrono.ChronoLocalDate dateEpochDay(long)>"
    },
    {
      "name": "dateYearDay",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "int",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistChronology: java.time.chrono.ChronoLocalDate dateYearDay(int,int)>"
    },
    {
      "name": "dateYearDay",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.chrono.Era",
      "argType": "int",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistChronology: java.time.chrono.ChronoLocalDate dateYearDay(java.time.chrono.Era,int,int)>"
    },
    {
      "name": "date",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "int",
      "argType": "int",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistChronology",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistChronology: java.time.chrono.ChronoLocalDate date(int,int,int)>"
    },
    {
      "name": "now",
      "retType": "java.time.chrono.ThaiBuddhistDate",
      "isStatic": true,
      "hostClass": "java.time.chrono.ThaiBuddhistDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ThaiBuddhistDate now()>"
    },
    {
      "name": "now",
      "retType": "java.time.chrono.ThaiBuddhistDate",
      "argType": "java.time.ZoneId",
      "isStatic": true,
      "hostClass": "java.time.chrono.ThaiBuddhistDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ThaiBuddhistDate now(java.time.ZoneId)>"
    },
    {
      "name": "now",
      "retType": "java.time.chrono.ThaiBuddhistDate",
      "argType": "java.time.Clock",
      "isStatic": true,
      "hostClass": "java.time.chrono.ThaiBuddhistDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ThaiBuddhistDate now(java.time.Clock)>"
    },
    {
      "name": "of",
      "retType": "java.time.chrono.ThaiBuddhistDate",
      "argType": "int",
      "argType": "int",
      "argType": "int",
      "isStatic": true,
      "hostClass": "java.time.chrono.ThaiBuddhistDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ThaiBuddhistDate of(int,int,int)>"
    },
    {
      "name": "from",
      "retType": "java.time.chrono.ThaiBuddhistDate",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": true,
      "hostClass": "java.time.chrono.ThaiBuddhistDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ThaiBuddhistDate 'from'(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "getChronology",
      "retType": "java.time.chrono.ThaiBuddhistChronology",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ThaiBuddhistChronology getChronology()>"
    },
    {
      "name": "getEra",
      "retType": "java.time.chrono.ThaiBuddhistEra",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ThaiBuddhistEra getEra()>"
    },
    {
      "name": "lengthOfMonth",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistDate: int lengthOfMonth()>"
    },
    {
      "name": "range",
      "retType": "java.time.temporal.ValueRange",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistDate: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
    },
    {
      "name": "getLong",
      "retType": "long",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistDate: long getLong(java.time.temporal.TemporalField)>"
    },
    {
      "name": "with",
      "retType": "java.time.chrono.ThaiBuddhistDate",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ThaiBuddhistDate 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "with",
      "retType": "java.time.chrono.ThaiBuddhistDate",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ThaiBuddhistDate 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "plus",
      "retType": "java.time.chrono.ThaiBuddhistDate",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ThaiBuddhistDate plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "minus",
      "retType": "java.time.chrono.ThaiBuddhistDate",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ThaiBuddhistDate minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "plus",
      "retType": "java.time.chrono.ThaiBuddhistDate",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ThaiBuddhistDate plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minus",
      "retType": "java.time.chrono.ThaiBuddhistDate",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ThaiBuddhistDate minus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "atTime",
      "retType": "java.time.chrono.ChronoLocalDateTime",
      "argType": "java.time.LocalTime",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ChronoLocalDateTime atTime(java.time.LocalTime)>"
    },
    {
      "name": "until",
      "retType": "java.time.chrono.ChronoPeriod",
      "argType": "java.time.chrono.ChronoLocalDate",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ChronoPeriod until(java.time.chrono.ChronoLocalDate)>"
    },
    {
      "name": "toEpochDay",
      "retType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistDate: long toEpochDay()>"
    },
    {
      "name": "equals",
      "retType": "boolean",
      "argType": "java.lang.Object",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistDate: boolean equals(java.lang.Object)>"
    },
    {
      "name": "until",
      "retType": "long",
      "argType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistDate: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minus",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ChronoLocalDate minus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minus",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ChronoLocalDate minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "plus",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ChronoLocalDate plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "plus",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ChronoLocalDate plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "with",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ChronoLocalDate 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "with",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistDate: java.time.chrono.ChronoLocalDate 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "getEra",
      "retType": "java.time.chrono.Era",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistDate: java.time.chrono.Era getEra()>"
    },
    {
      "name": "getChronology",
      "retType": "java.time.chrono.Chronology",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistDate: java.time.chrono.Chronology getChronology()>"
    },
    {
      "name": "minus",
      "retType": "java.time.temporal.Temporal",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistDate: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minus",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistDate: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "plus",
      "retType": "java.time.temporal.Temporal",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistDate: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "plus",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistDate: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "with",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistDate: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "with",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistDate",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistDate: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "values",
      "retType": "java.time.chrono.ThaiBuddhistEra[]",
      "isStatic": true,
      "hostClass": "java.time.chrono.ThaiBuddhistEra",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistEra: java.time.chrono.ThaiBuddhistEra[] values()>"
    },
    {
      "name": "valueOf",
      "retType": "java.time.chrono.ThaiBuddhistEra",
      "argType": "java.lang.String",
      "isStatic": true,
      "hostClass": "java.time.chrono.ThaiBuddhistEra",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistEra: java.time.chrono.ThaiBuddhistEra valueOf(java.lang.String)>"
    },
    {
      "name": "of",
      "retType": "java.time.chrono.ThaiBuddhistEra",
      "argType": "int",
      "isStatic": true,
      "hostClass": "java.time.chrono.ThaiBuddhistEra",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistEra: java.time.chrono.ThaiBuddhistEra of(int)>"
    },
    {
      "name": "getValue",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.chrono.ThaiBuddhistEra",
      "isConstructor": false,
      "method": "<java.time.chrono.ThaiBuddhistEra: int getValue()>"
    },
    {
      "name": "java.time.format.DateTimeFormatter$ClassicFormat",
      "retType": "java.time.format.DateTimeFormatter$ClassicFormat",
      "argType": "java.time.format.DateTimeFormatter",
      "argType": "java.time.temporal.TemporalQuery",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatter$ClassicFormat",
      "isConstructor": true,
      "method": "<java.time.format.DateTimeFormatter$ClassicFormat: void <init>(java.time.format.DateTimeFormatter,java.time.temporal.TemporalQuery)>"
    },
    {
      "name": "format",
      "retType": "java.lang.StringBuffer",
      "argType": "java.lang.Object",
      "argType": "java.lang.StringBuffer",
      "argType": "java.text.FieldPosition",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatter$ClassicFormat",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatter$ClassicFormat: java.lang.StringBuffer format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)>"
    },
    {
      "name": "parseObject",
      "retType": "java.lang.Object",
      "argType": "java.lang.String",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatter$ClassicFormat",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatter$ClassicFormat: java.lang.Object parseObject(java.lang.String)>"
    },
    {
      "name": "parseObject",
      "retType": "java.lang.Object",
      "argType": "java.lang.String",
      "argType": "java.text.ParsePosition",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatter$ClassicFormat",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatter$ClassicFormat: java.lang.Object parseObject(java.lang.String,java.text.ParsePosition)>"
    },
    {
      "name": "ofPattern",
      "retType": "java.time.format.DateTimeFormatter",
      "argType": "java.lang.String",
      "isStatic": true,
      "hostClass": "java.time.format.DateTimeFormatter",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofPattern(java.lang.String)>"
    },
    {
      "name": "ofPattern",
      "retType": "java.time.format.DateTimeFormatter",
      "argType": "java.lang.String",
      "argType": "java.util.Locale",
      "isStatic": true,
      "hostClass": "java.time.format.DateTimeFormatter",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofPattern(java.lang.String,java.util.Locale)>"
    },
    {
      "name": "ofLocalizedDate",
      "retType": "java.time.format.DateTimeFormatter",
      "argType": "java.time.format.FormatStyle",
      "isStatic": true,
      "hostClass": "java.time.format.DateTimeFormatter",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofLocalizedDate(java.time.format.FormatStyle)>"
    },
    {
      "name": "ofLocalizedTime",
      "retType": "java.time.format.DateTimeFormatter",
      "argType": "java.time.format.FormatStyle",
      "isStatic": true,
      "hostClass": "java.time.format.DateTimeFormatter",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofLocalizedTime(java.time.format.FormatStyle)>"
    },
    {
      "name": "ofLocalizedDateTime",
      "retType": "java.time.format.DateTimeFormatter",
      "argType": "java.time.format.FormatStyle",
      "isStatic": true,
      "hostClass": "java.time.format.DateTimeFormatter",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofLocalizedDateTime(java.time.format.FormatStyle)>"
    },
    {
      "name": "ofLocalizedDateTime",
      "retType": "java.time.format.DateTimeFormatter",
      "argType": "java.time.format.FormatStyle",
      "argType": "java.time.format.FormatStyle",
      "isStatic": true,
      "hostClass": "java.time.format.DateTimeFormatter",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter ofLocalizedDateTime(java.time.format.FormatStyle,java.time.format.FormatStyle)>"
    },
    {
      "name": "parsedExcessDays",
      "retType": "java.time.temporal.TemporalQuery",
      "isStatic": true,
      "hostClass": "java.time.format.DateTimeFormatter",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatter: java.time.temporal.TemporalQuery parsedExcessDays()>"
    },
    {
      "name": "parsedLeapSecond",
      "retType": "java.time.temporal.TemporalQuery",
      "isStatic": true,
      "hostClass": "java.time.format.DateTimeFormatter",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatter: java.time.temporal.TemporalQuery parsedLeapSecond()>"
    },
    {
      "name": "getLocale",
      "retType": "java.util.Locale",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatter",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatter: java.util.Locale getLocale()>"
    },
    {
      "name": "withLocale",
      "retType": "java.time.format.DateTimeFormatter",
      "argType": "java.util.Locale",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatter",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withLocale(java.util.Locale)>"
    },
    {
      "name": "getDecimalStyle",
      "retType": "java.time.format.DecimalStyle",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatter",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatter: java.time.format.DecimalStyle getDecimalStyle()>"
    },
    {
      "name": "withDecimalStyle",
      "retType": "java.time.format.DateTimeFormatter",
      "argType": "java.time.format.DecimalStyle",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatter",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withDecimalStyle(java.time.format.DecimalStyle)>"
    },
    {
      "name": "getChronology",
      "retType": "java.time.chrono.Chronology",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatter",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatter: java.time.chrono.Chronology getChronology()>"
    },
    {
      "name": "withChronology",
      "retType": "java.time.format.DateTimeFormatter",
      "argType": "java.time.chrono.Chronology",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatter",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withChronology(java.time.chrono.Chronology)>"
    },
    {
      "name": "getZone",
      "retType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatter",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatter: java.time.ZoneId getZone()>"
    },
    {
      "name": "withZone",
      "retType": "java.time.format.DateTimeFormatter",
      "argType": "java.time.ZoneId",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatter",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withZone(java.time.ZoneId)>"
    },
    {
      "name": "getResolverStyle",
      "retType": "java.time.format.ResolverStyle",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatter",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatter: java.time.format.ResolverStyle getResolverStyle()>"
    },
    {
      "name": "withResolverStyle",
      "retType": "java.time.format.DateTimeFormatter",
      "argType": "java.time.format.ResolverStyle",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatter",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withResolverStyle(java.time.format.ResolverStyle)>"
    },
    {
      "name": "getResolverFields",
      "retType": "java.util.Set",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatter",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatter: java.util.Set getResolverFields()>"
    },
    {
      "name": "withResolverFields",
      "retType": "java.time.format.DateTimeFormatter",
      "argType": "java.time.temporal.TemporalField[]",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatter",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withResolverFields(java.time.temporal.TemporalField[])>"
    },
    {
      "name": "withResolverFields",
      "retType": "java.time.format.DateTimeFormatter",
      "argType": "java.util.Set",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatter",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatter: java.time.format.DateTimeFormatter withResolverFields(java.util.Set)>"
    },
    {
      "name": "format",
      "retType": "java.lang.String",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatter",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatter: java.lang.String format(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "formatTo",
      "retType": "void",
      "argType": "java.time.temporal.TemporalAccessor",
      "argType": "java.lang.Appendable",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatter",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatter: void formatTo(java.time.temporal.TemporalAccessor,java.lang.Appendable)>"
    },
    {
      "name": "parse",
      "retType": "java.time.temporal.TemporalAccessor",
      "argType": "java.lang.CharSequence",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatter",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatter: java.time.temporal.TemporalAccessor parse(java.lang.CharSequence)>"
    },
    {
      "name": "parse",
      "retType": "java.time.temporal.TemporalAccessor",
      "argType": "java.lang.CharSequence",
      "argType": "java.text.ParsePosition",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatter",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatter: java.time.temporal.TemporalAccessor parse(java.lang.CharSequence,java.text.ParsePosition)>"
    },
    {
      "name": "parse",
      "retType": "java.lang.Object",
      "argType": "java.lang.CharSequence",
      "argType": "java.time.temporal.TemporalQuery",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatter",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatter: java.lang.Object parse(java.lang.CharSequence,java.time.temporal.TemporalQuery)>"
    },
    {
      "name": "parseBest",
      "retType": "java.time.temporal.TemporalAccessor",
      "argType": "java.lang.CharSequence",
      "argType": "java.time.temporal.TemporalQuery[]",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatter",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatter: java.time.temporal.TemporalAccessor parseBest(java.lang.CharSequence,java.time.temporal.TemporalQuery[])>"
    },
    {
      "name": "parseUnresolved",
      "retType": "java.time.temporal.TemporalAccessor",
      "argType": "java.lang.CharSequence",
      "argType": "java.text.ParsePosition",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatter",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatter: java.time.temporal.TemporalAccessor parseUnresolved(java.lang.CharSequence,java.text.ParsePosition)>"
    },
    {
      "name": "toFormat",
      "retType": "java.text.Format",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatter",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatter: java.text.Format toFormat()>"
    },
    {
      "name": "toFormat",
      "retType": "java.text.Format",
      "argType": "java.time.temporal.TemporalQuery",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatter",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatter: java.text.Format toFormat(java.time.temporal.TemporalQuery)>"
    },
    {
      "name": "compare",
      "retType": "int",
      "argType": "java.lang.String",
      "argType": "java.lang.String",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$2",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$2: int compare(java.lang.String,java.lang.String)>"
    },
    {
      "name": "compare",
      "retType": "int",
      "argType": "java.lang.Object",
      "argType": "java.lang.Object",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$2",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$2: int compare(java.lang.Object,java.lang.Object)>"
    },
    {
      "name": "format",
      "retType": "boolean",
      "argType": "java.time.format.DateTimePrintContext",
      "argType": "java.lang.StringBuilder",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$CharLiteralPrinterParser",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$CharLiteralPrinterParser: boolean format(java.time.format.DateTimePrintContext,java.lang.StringBuilder)>"
    },
    {
      "name": "parse",
      "retType": "int",
      "argType": "java.time.format.DateTimeParseContext",
      "argType": "java.lang.CharSequence",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$CharLiteralPrinterParser",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$CharLiteralPrinterParser: int parse(java.time.format.DateTimeParseContext,java.lang.CharSequence,int)>"
    },
    {
      "name": "format",
      "retType": "boolean",
      "argType": "java.time.format.DateTimePrintContext",
      "argType": "java.lang.StringBuilder",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$ChronoPrinterParser",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$ChronoPrinterParser: boolean format(java.time.format.DateTimePrintContext,java.lang.StringBuilder)>"
    },
    {
      "name": "parse",
      "retType": "int",
      "argType": "java.time.format.DateTimeParseContext",
      "argType": "java.lang.CharSequence",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$ChronoPrinterParser",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$ChronoPrinterParser: int parse(java.time.format.DateTimeParseContext,java.lang.CharSequence,int)>"
    },
    {
      "name": "withOptional",
      "retType": "java.time.format.DateTimeFormatterBuilder$CompositePrinterParser",
      "argType": "boolean",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$CompositePrinterParser",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$CompositePrinterParser: java.time.format.DateTimeFormatterBuilder$CompositePrinterParser withOptional(boolean)>"
    },
    {
      "name": "format",
      "retType": "boolean",
      "argType": "java.time.format.DateTimePrintContext",
      "argType": "java.lang.StringBuilder",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$CompositePrinterParser",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$CompositePrinterParser: boolean format(java.time.format.DateTimePrintContext,java.lang.StringBuilder)>"
    },
    {
      "name": "parse",
      "retType": "int",
      "argType": "java.time.format.DateTimeParseContext",
      "argType": "java.lang.CharSequence",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$CompositePrinterParser",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$CompositePrinterParser: int parse(java.time.format.DateTimeParseContext,java.lang.CharSequence,int)>"
    },
    {
      "name": "format",
      "retType": "boolean",
      "argType": "java.time.format.DateTimePrintContext",
      "argType": "java.lang.StringBuilder",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$DateTimePrinterParser",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$DateTimePrinterParser: boolean format(java.time.format.DateTimePrintContext,java.lang.StringBuilder)>"
    },
    {
      "name": "parse",
      "retType": "int",
      "argType": "java.time.format.DateTimeParseContext",
      "argType": "java.lang.CharSequence",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$DateTimePrinterParser",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$DateTimePrinterParser: int parse(java.time.format.DateTimeParseContext,java.lang.CharSequence,int)>"
    },
    {
      "name": "format",
      "retType": "boolean",
      "argType": "java.time.format.DateTimePrintContext",
      "argType": "java.lang.StringBuilder",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$DefaultValueParser",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$DefaultValueParser: boolean format(java.time.format.DateTimePrintContext,java.lang.StringBuilder)>"
    },
    {
      "name": "parse",
      "retType": "int",
      "argType": "java.time.format.DateTimeParseContext",
      "argType": "java.lang.CharSequence",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$DefaultValueParser",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$DefaultValueParser: int parse(java.time.format.DateTimeParseContext,java.lang.CharSequence,int)>"
    },
    {
      "name": "format",
      "retType": "boolean",
      "argType": "java.time.format.DateTimePrintContext",
      "argType": "java.lang.StringBuilder",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$FractionPrinterParser",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$FractionPrinterParser: boolean format(java.time.format.DateTimePrintContext,java.lang.StringBuilder)>"
    },
    {
      "name": "parse",
      "retType": "int",
      "argType": "java.time.format.DateTimeParseContext",
      "argType": "java.lang.CharSequence",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$FractionPrinterParser",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$FractionPrinterParser: int parse(java.time.format.DateTimeParseContext,java.lang.CharSequence,int)>"
    },
    {
      "name": "format",
      "retType": "boolean",
      "argType": "java.time.format.DateTimePrintContext",
      "argType": "java.lang.StringBuilder",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$InstantPrinterParser",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$InstantPrinterParser: boolean format(java.time.format.DateTimePrintContext,java.lang.StringBuilder)>"
    },
    {
      "name": "parse",
      "retType": "int",
      "argType": "java.time.format.DateTimeParseContext",
      "argType": "java.lang.CharSequence",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$InstantPrinterParser",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$InstantPrinterParser: int parse(java.time.format.DateTimeParseContext,java.lang.CharSequence,int)>"
    },
    {
      "name": "format",
      "retType": "boolean",
      "argType": "java.time.format.DateTimePrintContext",
      "argType": "java.lang.StringBuilder",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$LocalizedOffsetIdPrinterParser",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$LocalizedOffsetIdPrinterParser: boolean format(java.time.format.DateTimePrintContext,java.lang.StringBuilder)>"
    },
    {
      "name": "parse",
      "retType": "int",
      "argType": "java.time.format.DateTimeParseContext",
      "argType": "java.lang.CharSequence",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$LocalizedOffsetIdPrinterParser",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$LocalizedOffsetIdPrinterParser: int parse(java.time.format.DateTimeParseContext,java.lang.CharSequence,int)>"
    },
    {
      "name": "format",
      "retType": "boolean",
      "argType": "java.time.format.DateTimePrintContext",
      "argType": "java.lang.StringBuilder",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$LocalizedPrinterParser",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$LocalizedPrinterParser: boolean format(java.time.format.DateTimePrintContext,java.lang.StringBuilder)>"
    },
    {
      "name": "parse",
      "retType": "int",
      "argType": "java.time.format.DateTimeParseContext",
      "argType": "java.lang.CharSequence",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$LocalizedPrinterParser",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$LocalizedPrinterParser: int parse(java.time.format.DateTimeParseContext,java.lang.CharSequence,int)>"
    },
    {
      "name": "format",
      "retType": "boolean",
      "argType": "java.time.format.DateTimePrintContext",
      "argType": "java.lang.StringBuilder",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$NumberPrinterParser",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$NumberPrinterParser: boolean format(java.time.format.DateTimePrintContext,java.lang.StringBuilder)>"
    },
    {
      "name": "parse",
      "retType": "int",
      "argType": "java.time.format.DateTimeParseContext",
      "argType": "java.lang.CharSequence",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$NumberPrinterParser",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$NumberPrinterParser: int parse(java.time.format.DateTimeParseContext,java.lang.CharSequence,int)>"
    },
    {
      "name": "format",
      "retType": "boolean",
      "argType": "java.time.format.DateTimePrintContext",
      "argType": "java.lang.StringBuilder",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$OffsetIdPrinterParser",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$OffsetIdPrinterParser: boolean format(java.time.format.DateTimePrintContext,java.lang.StringBuilder)>"
    },
    {
      "name": "parse",
      "retType": "int",
      "argType": "java.time.format.DateTimeParseContext",
      "argType": "java.lang.CharSequence",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$OffsetIdPrinterParser",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$OffsetIdPrinterParser: int parse(java.time.format.DateTimeParseContext,java.lang.CharSequence,int)>"
    },
    {
      "name": "format",
      "retType": "boolean",
      "argType": "java.time.format.DateTimePrintContext",
      "argType": "java.lang.StringBuilder",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$PadPrinterParserDecorator",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$PadPrinterParserDecorator: boolean format(java.time.format.DateTimePrintContext,java.lang.StringBuilder)>"
    },
    {
      "name": "parse",
      "retType": "int",
      "argType": "java.time.format.DateTimeParseContext",
      "argType": "java.lang.CharSequence",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$PadPrinterParserDecorator",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$PadPrinterParserDecorator: int parse(java.time.format.DateTimeParseContext,java.lang.CharSequence,int)>"
    },
    {
      "name": "match",
      "retType": "java.lang.String",
      "argType": "java.lang.CharSequence",
      "argType": "java.text.ParsePosition",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$PrefixTree$LENIENT",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$PrefixTree$LENIENT: java.lang.String match(java.lang.CharSequence,java.text.ParsePosition)>"
    },
    {
      "name": "newTree",
      "retType": "java.time.format.DateTimeFormatterBuilder$PrefixTree",
      "argType": "java.time.format.DateTimeParseContext",
      "isStatic": true,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$PrefixTree",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$PrefixTree: java.time.format.DateTimeFormatterBuilder$PrefixTree newTree(java.time.format.DateTimeParseContext)>"
    },
    {
      "name": "newTree",
      "retType": "java.time.format.DateTimeFormatterBuilder$PrefixTree",
      "argType": "java.util.Set",
      "argType": "java.time.format.DateTimeParseContext",
      "isStatic": true,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$PrefixTree",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$PrefixTree: java.time.format.DateTimeFormatterBuilder$PrefixTree newTree(java.util.Set,java.time.format.DateTimeParseContext)>"
    },
    {
      "name": "copyTree",
      "retType": "java.time.format.DateTimeFormatterBuilder$PrefixTree",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$PrefixTree",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$PrefixTree: java.time.format.DateTimeFormatterBuilder$PrefixTree copyTree()>"
    },
    {
      "name": "match",
      "retType": "java.lang.String",
      "argType": "java.lang.CharSequence",
      "argType": "int",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$PrefixTree",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$PrefixTree: java.lang.String match(java.lang.CharSequence,int,int)>"
    },
    {
      "name": "match",
      "retType": "java.lang.String",
      "argType": "java.lang.CharSequence",
      "argType": "java.text.ParsePosition",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$PrefixTree",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$PrefixTree: java.lang.String match(java.lang.CharSequence,java.text.ParsePosition)>"
    },
    {
      "name": "values",
      "retType": "java.time.format.DateTimeFormatterBuilder$SettingsParser[]",
      "isStatic": true,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$SettingsParser",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$SettingsParser: java.time.format.DateTimeFormatterBuilder$SettingsParser[] values()>"
    },
    {
      "name": "valueOf",
      "retType": "java.time.format.DateTimeFormatterBuilder$SettingsParser",
      "argType": "java.lang.String",
      "isStatic": true,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$SettingsParser",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$SettingsParser: java.time.format.DateTimeFormatterBuilder$SettingsParser valueOf(java.lang.String)>"
    },
    {
      "name": "format",
      "retType": "boolean",
      "argType": "java.time.format.DateTimePrintContext",
      "argType": "java.lang.StringBuilder",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$SettingsParser",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$SettingsParser: boolean format(java.time.format.DateTimePrintContext,java.lang.StringBuilder)>"
    },
    {
      "name": "parse",
      "retType": "int",
      "argType": "java.time.format.DateTimeParseContext",
      "argType": "java.lang.CharSequence",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$SettingsParser",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$SettingsParser: int parse(java.time.format.DateTimeParseContext,java.lang.CharSequence,int)>"
    },
    {
      "name": "format",
      "retType": "boolean",
      "argType": "java.time.format.DateTimePrintContext",
      "argType": "java.lang.StringBuilder",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$StringLiteralPrinterParser",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$StringLiteralPrinterParser: boolean format(java.time.format.DateTimePrintContext,java.lang.StringBuilder)>"
    },
    {
      "name": "parse",
      "retType": "int",
      "argType": "java.time.format.DateTimeParseContext",
      "argType": "java.lang.CharSequence",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$StringLiteralPrinterParser",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$StringLiteralPrinterParser: int parse(java.time.format.DateTimeParseContext,java.lang.CharSequence,int)>"
    },
    {
      "name": "format",
      "retType": "boolean",
      "argType": "java.time.format.DateTimePrintContext",
      "argType": "java.lang.StringBuilder",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$TextPrinterParser",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$TextPrinterParser: boolean format(java.time.format.DateTimePrintContext,java.lang.StringBuilder)>"
    },
    {
      "name": "parse",
      "retType": "int",
      "argType": "java.time.format.DateTimeParseContext",
      "argType": "java.lang.CharSequence",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$TextPrinterParser",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$TextPrinterParser: int parse(java.time.format.DateTimeParseContext,java.lang.CharSequence,int)>"
    },
    {
      "name": "format",
      "retType": "boolean",
      "argType": "java.time.format.DateTimePrintContext",
      "argType": "java.lang.StringBuilder",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$WeekBasedFieldPrinterParser",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$WeekBasedFieldPrinterParser: boolean format(java.time.format.DateTimePrintContext,java.lang.StringBuilder)>"
    },
    {
      "name": "parse",
      "retType": "int",
      "argType": "java.time.format.DateTimeParseContext",
      "argType": "java.lang.CharSequence",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$WeekBasedFieldPrinterParser",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$WeekBasedFieldPrinterParser: int parse(java.time.format.DateTimeParseContext,java.lang.CharSequence,int)>"
    },
    {
      "name": "format",
      "retType": "boolean",
      "argType": "java.time.format.DateTimePrintContext",
      "argType": "java.lang.StringBuilder",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$ZoneIdPrinterParser",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$ZoneIdPrinterParser: boolean format(java.time.format.DateTimePrintContext,java.lang.StringBuilder)>"
    },
    {
      "name": "parse",
      "retType": "int",
      "argType": "java.time.format.DateTimeParseContext",
      "argType": "java.lang.CharSequence",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$ZoneIdPrinterParser",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$ZoneIdPrinterParser: int parse(java.time.format.DateTimeParseContext,java.lang.CharSequence,int)>"
    },
    {
      "name": "format",
      "retType": "boolean",
      "argType": "java.time.format.DateTimePrintContext",
      "argType": "java.lang.StringBuilder",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder$ZoneTextPrinterParser",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder$ZoneTextPrinterParser: boolean format(java.time.format.DateTimePrintContext,java.lang.StringBuilder)>"
    },
    {
      "name": "java.time.format.DateTimeFormatterBuilder",
      "retType": "java.time.format.DateTimeFormatterBuilder",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder",
      "isConstructor": true,
      "method": "<java.time.format.DateTimeFormatterBuilder: void <init>()>"
    },
    {
      "name": "parseCaseSensitive",
      "retType": "java.time.format.DateTimeFormatterBuilder",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder parseCaseSensitive()>"
    },
    {
      "name": "parseCaseInsensitive",
      "retType": "java.time.format.DateTimeFormatterBuilder",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder parseCaseInsensitive()>"
    },
    {
      "name": "parseStrict",
      "retType": "java.time.format.DateTimeFormatterBuilder",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder parseStrict()>"
    },
    {
      "name": "parseLenient",
      "retType": "java.time.format.DateTimeFormatterBuilder",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder parseLenient()>"
    },
    {
      "name": "parseDefaulting",
      "retType": "java.time.format.DateTimeFormatterBuilder",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder parseDefaulting(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "appendValue",
      "retType": "java.time.format.DateTimeFormatterBuilder",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendValue(java.time.temporal.TemporalField)>"
    },
    {
      "name": "appendValue",
      "retType": "java.time.format.DateTimeFormatterBuilder",
      "argType": "java.time.temporal.TemporalField",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendValue(java.time.temporal.TemporalField,int)>"
    },
    {
      "name": "appendText",
      "retType": "java.time.format.DateTimeFormatterBuilder",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendText(java.time.temporal.TemporalField)>"
    },
    {
      "name": "appendText",
      "retType": "java.time.format.DateTimeFormatterBuilder",
      "argType": "java.time.temporal.TemporalField",
      "argType": "java.time.format.TextStyle",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendText(java.time.temporal.TemporalField,java.time.format.TextStyle)>"
    },
    {
      "name": "appendText",
      "retType": "java.time.format.DateTimeFormatterBuilder",
      "argType": "java.time.temporal.TemporalField",
      "argType": "java.util.Map",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendText(java.time.temporal.TemporalField,java.util.Map)>"
    },
    {
      "name": "appendInstant",
      "retType": "java.time.format.DateTimeFormatterBuilder",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendInstant()>"
    },
    {
      "name": "appendInstant",
      "retType": "java.time.format.DateTimeFormatterBuilder",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendInstant(int)>"
    },
    {
      "name": "appendOffsetId",
      "retType": "java.time.format.DateTimeFormatterBuilder",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendOffsetId()>"
    },
    {
      "name": "appendOffset",
      "retType": "java.time.format.DateTimeFormatterBuilder",
      "argType": "java.lang.String",
      "argType": "java.lang.String",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendOffset(java.lang.String,java.lang.String)>"
    },
    {
      "name": "appendLocalizedOffset",
      "retType": "java.time.format.DateTimeFormatterBuilder",
      "argType": "java.time.format.TextStyle",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendLocalizedOffset(java.time.format.TextStyle)>"
    },
    {
      "name": "appendZoneId",
      "retType": "java.time.format.DateTimeFormatterBuilder",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendZoneId()>"
    },
    {
      "name": "appendZoneRegionId",
      "retType": "java.time.format.DateTimeFormatterBuilder",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendZoneRegionId()>"
    },
    {
      "name": "appendZoneOrOffsetId",
      "retType": "java.time.format.DateTimeFormatterBuilder",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendZoneOrOffsetId()>"
    },
    {
      "name": "appendZoneText",
      "retType": "java.time.format.DateTimeFormatterBuilder",
      "argType": "java.time.format.TextStyle",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendZoneText(java.time.format.TextStyle)>"
    },
    {
      "name": "appendZoneText",
      "retType": "java.time.format.DateTimeFormatterBuilder",
      "argType": "java.time.format.TextStyle",
      "argType": "java.util.Set",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendZoneText(java.time.format.TextStyle,java.util.Set)>"
    },
    {
      "name": "appendChronologyId",
      "retType": "java.time.format.DateTimeFormatterBuilder",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendChronologyId()>"
    },
    {
      "name": "appendChronologyText",
      "retType": "java.time.format.DateTimeFormatterBuilder",
      "argType": "java.time.format.TextStyle",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendChronologyText(java.time.format.TextStyle)>"
    },
    {
      "name": "appendLocalized",
      "retType": "java.time.format.DateTimeFormatterBuilder",
      "argType": "java.time.format.FormatStyle",
      "argType": "java.time.format.FormatStyle",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendLocalized(java.time.format.FormatStyle,java.time.format.FormatStyle)>"
    },
    {
      "name": "appendLiteral",
      "retType": "java.time.format.DateTimeFormatterBuilder",
      "argType": "char",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendLiteral(char)>"
    },
    {
      "name": "appendLiteral",
      "retType": "java.time.format.DateTimeFormatterBuilder",
      "argType": "java.lang.String",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendLiteral(java.lang.String)>"
    },
    {
      "name": "append",
      "retType": "java.time.format.DateTimeFormatterBuilder",
      "argType": "java.time.format.DateTimeFormatter",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder append(java.time.format.DateTimeFormatter)>"
    },
    {
      "name": "appendOptional",
      "retType": "java.time.format.DateTimeFormatterBuilder",
      "argType": "java.time.format.DateTimeFormatter",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendOptional(java.time.format.DateTimeFormatter)>"
    },
    {
      "name": "appendPattern",
      "retType": "java.time.format.DateTimeFormatterBuilder",
      "argType": "java.lang.String",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder appendPattern(java.lang.String)>"
    },
    {
      "name": "padNext",
      "retType": "java.time.format.DateTimeFormatterBuilder",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder padNext(int)>"
    },
    {
      "name": "padNext",
      "retType": "java.time.format.DateTimeFormatterBuilder",
      "argType": "int",
      "argType": "char",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder padNext(int,char)>"
    },
    {
      "name": "optionalStart",
      "retType": "java.time.format.DateTimeFormatterBuilder",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder optionalStart()>"
    },
    {
      "name": "optionalEnd",
      "retType": "java.time.format.DateTimeFormatterBuilder",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatterBuilder optionalEnd()>"
    },
    {
      "name": "toFormatter",
      "retType": "java.time.format.DateTimeFormatter",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatter toFormatter()>"
    },
    {
      "name": "toFormatter",
      "retType": "java.time.format.DateTimeFormatter",
      "argType": "java.util.Locale",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeFormatterBuilder",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeFormatterBuilder: java.time.format.DateTimeFormatter toFormatter(java.util.Locale)>"
    },
    {
      "name": "java.time.format.DateTimeParseException",
      "retType": "java.time.format.DateTimeParseException",
      "argType": "java.lang.String",
      "argType": "java.lang.CharSequence",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeParseException",
      "isConstructor": true,
      "method": "<java.time.format.DateTimeParseException: void <init>(java.lang.String,java.lang.CharSequence,int)>"
    },
    {
      "name": "getParsedString",
      "retType": "java.lang.String",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeParseException",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeParseException: java.lang.String getParsedString()>"
    },
    {
      "name": "getErrorIndex",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeParseException",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeParseException: int getErrorIndex()>"
    },
    {
      "name": "isSupported",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimePrintContext$1",
      "isConstructor": false,
      "method": "<java.time.format.DateTimePrintContext$1: boolean isSupported(java.time.temporal.TemporalField)>"
    },
    {
      "name": "range",
      "retType": "java.time.temporal.ValueRange",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimePrintContext$1",
      "isConstructor": false,
      "method": "<java.time.format.DateTimePrintContext$1: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
    },
    {
      "name": "getLong",
      "retType": "long",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimePrintContext$1",
      "isConstructor": false,
      "method": "<java.time.format.DateTimePrintContext$1: long getLong(java.time.temporal.TemporalField)>"
    },
    {
      "name": "query",
      "retType": "java.lang.Object",
      "argType": "java.time.temporal.TemporalQuery",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimePrintContext$1",
      "isConstructor": false,
      "method": "<java.time.format.DateTimePrintContext$1: java.lang.Object query(java.time.temporal.TemporalQuery)>"
    },
    {
      "name": "compare",
      "retType": "int",
      "argType": "java.util.Map$Entry",
      "argType": "java.util.Map$Entry",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeTextProvider$1",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeTextProvider$1: int compare(java.util.Map$Entry,java.util.Map$Entry)>"
    },
    {
      "name": "compare",
      "retType": "int",
      "argType": "java.lang.Object",
      "argType": "java.lang.Object",
      "isStatic": false,
      "hostClass": "java.time.format.DateTimeTextProvider$1",
      "isConstructor": false,
      "method": "<java.time.format.DateTimeTextProvider$1: int compare(java.lang.Object,java.lang.Object)>"
    },
    {
      "name": "getAvailableLocales",
      "retType": "java.util.Set",
      "isStatic": true,
      "hostClass": "java.time.format.DecimalStyle",
      "isConstructor": false,
      "method": "<java.time.format.DecimalStyle: java.util.Set getAvailableLocales()>"
    },
    {
      "name": "ofDefaultLocale",
      "retType": "java.time.format.DecimalStyle",
      "isStatic": true,
      "hostClass": "java.time.format.DecimalStyle",
      "isConstructor": false,
      "method": "<java.time.format.DecimalStyle: java.time.format.DecimalStyle ofDefaultLocale()>"
    },
    {
      "name": "of",
      "retType": "java.time.format.DecimalStyle",
      "argType": "java.util.Locale",
      "isStatic": true,
      "hostClass": "java.time.format.DecimalStyle",
      "isConstructor": false,
      "method": "<java.time.format.DecimalStyle: java.time.format.DecimalStyle of(java.util.Locale)>"
    },
    {
      "name": "getZeroDigit",
      "retType": "char",
      "isStatic": false,
      "hostClass": "java.time.format.DecimalStyle",
      "isConstructor": false,
      "method": "<java.time.format.DecimalStyle: char getZeroDigit()>"
    },
    {
      "name": "withZeroDigit",
      "retType": "java.time.format.DecimalStyle",
      "argType": "char",
      "isStatic": false,
      "hostClass": "java.time.format.DecimalStyle",
      "isConstructor": false,
      "method": "<java.time.format.DecimalStyle: java.time.format.DecimalStyle withZeroDigit(char)>"
    },
    {
      "name": "getPositiveSign",
      "retType": "char",
      "isStatic": false,
      "hostClass": "java.time.format.DecimalStyle",
      "isConstructor": false,
      "method": "<java.time.format.DecimalStyle: char getPositiveSign()>"
    },
    {
      "name": "withPositiveSign",
      "retType": "java.time.format.DecimalStyle",
      "argType": "char",
      "isStatic": false,
      "hostClass": "java.time.format.DecimalStyle",
      "isConstructor": false,
      "method": "<java.time.format.DecimalStyle: java.time.format.DecimalStyle withPositiveSign(char)>"
    },
    {
      "name": "getNegativeSign",
      "retType": "char",
      "isStatic": false,
      "hostClass": "java.time.format.DecimalStyle",
      "isConstructor": false,
      "method": "<java.time.format.DecimalStyle: char getNegativeSign()>"
    },
    {
      "name": "withNegativeSign",
      "retType": "java.time.format.DecimalStyle",
      "argType": "char",
      "isStatic": false,
      "hostClass": "java.time.format.DecimalStyle",
      "isConstructor": false,
      "method": "<java.time.format.DecimalStyle: java.time.format.DecimalStyle withNegativeSign(char)>"
    },
    {
      "name": "getDecimalSeparator",
      "retType": "char",
      "isStatic": false,
      "hostClass": "java.time.format.DecimalStyle",
      "isConstructor": false,
      "method": "<java.time.format.DecimalStyle: char getDecimalSeparator()>"
    },
    {
      "name": "withDecimalSeparator",
      "retType": "java.time.format.DecimalStyle",
      "argType": "char",
      "isStatic": false,
      "hostClass": "java.time.format.DecimalStyle",
      "isConstructor": false,
      "method": "<java.time.format.DecimalStyle: java.time.format.DecimalStyle withDecimalSeparator(char)>"
    },
    {
      "name": "equals",
      "retType": "boolean",
      "argType": "java.lang.Object",
      "isStatic": false,
      "hostClass": "java.time.format.DecimalStyle",
      "isConstructor": false,
      "method": "<java.time.format.DecimalStyle: boolean equals(java.lang.Object)>"
    },
    {
      "name": "values",
      "retType": "java.time.format.FormatStyle[]",
      "isStatic": true,
      "hostClass": "java.time.format.FormatStyle",
      "isConstructor": false,
      "method": "<java.time.format.FormatStyle: java.time.format.FormatStyle[] values()>"
    },
    {
      "name": "valueOf",
      "retType": "java.time.format.FormatStyle",
      "argType": "java.lang.String",
      "isStatic": true,
      "hostClass": "java.time.format.FormatStyle",
      "isConstructor": false,
      "method": "<java.time.format.FormatStyle: java.time.format.FormatStyle valueOf(java.lang.String)>"
    },
    {
      "name": "isSupported",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.format.Parsed",
      "isConstructor": false,
      "method": "<java.time.format.Parsed: boolean isSupported(java.time.temporal.TemporalField)>"
    },
    {
      "name": "getLong",
      "retType": "long",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.format.Parsed",
      "isConstructor": false,
      "method": "<java.time.format.Parsed: long getLong(java.time.temporal.TemporalField)>"
    },
    {
      "name": "query",
      "retType": "java.lang.Object",
      "argType": "java.time.temporal.TemporalQuery",
      "isStatic": false,
      "hostClass": "java.time.format.Parsed",
      "isConstructor": false,
      "method": "<java.time.format.Parsed: java.lang.Object query(java.time.temporal.TemporalQuery)>"
    },
    {
      "name": "values",
      "retType": "java.time.format.ResolverStyle[]",
      "isStatic": true,
      "hostClass": "java.time.format.ResolverStyle",
      "isConstructor": false,
      "method": "<java.time.format.ResolverStyle: java.time.format.ResolverStyle[] values()>"
    },
    {
      "name": "valueOf",
      "retType": "java.time.format.ResolverStyle",
      "argType": "java.lang.String",
      "isStatic": true,
      "hostClass": "java.time.format.ResolverStyle",
      "isConstructor": false,
      "method": "<java.time.format.ResolverStyle: java.time.format.ResolverStyle valueOf(java.lang.String)>"
    },
    {
      "name": "values",
      "retType": "java.time.format.SignStyle[]",
      "isStatic": true,
      "hostClass": "java.time.format.SignStyle",
      "isConstructor": false,
      "method": "<java.time.format.SignStyle: java.time.format.SignStyle[] values()>"
    },
    {
      "name": "valueOf",
      "retType": "java.time.format.SignStyle",
      "argType": "java.lang.String",
      "isStatic": true,
      "hostClass": "java.time.format.SignStyle",
      "isConstructor": false,
      "method": "<java.time.format.SignStyle: java.time.format.SignStyle valueOf(java.lang.String)>"
    },
    {
      "name": "values",
      "retType": "java.time.format.TextStyle[]",
      "isStatic": true,
      "hostClass": "java.time.format.TextStyle",
      "isConstructor": false,
      "method": "<java.time.format.TextStyle: java.time.format.TextStyle[] values()>"
    },
    {
      "name": "valueOf",
      "retType": "java.time.format.TextStyle",
      "argType": "java.lang.String",
      "isStatic": true,
      "hostClass": "java.time.format.TextStyle",
      "isConstructor": false,
      "method": "<java.time.format.TextStyle: java.time.format.TextStyle valueOf(java.lang.String)>"
    },
    {
      "name": "isStandalone",
      "retType": "boolean",
      "isStatic": false,
      "hostClass": "java.time.format.TextStyle",
      "isConstructor": false,
      "method": "<java.time.format.TextStyle: boolean isStandalone()>"
    },
    {
      "name": "asStandalone",
      "retType": "java.time.format.TextStyle",
      "isStatic": false,
      "hostClass": "java.time.format.TextStyle",
      "isConstructor": false,
      "method": "<java.time.format.TextStyle: java.time.format.TextStyle asStandalone()>"
    },
    {
      "name": "asNormal",
      "retType": "java.time.format.TextStyle",
      "isStatic": false,
      "hostClass": "java.time.format.TextStyle",
      "isConstructor": false,
      "method": "<java.time.format.TextStyle: java.time.format.TextStyle asNormal()>"
    },
    {
      "name": "toZid",
      "retType": "java.lang.String",
      "argType": "java.lang.String",
      "argType": "java.util.Locale",
      "isStatic": true,
      "hostClass": "java.time.format.ZoneName",
      "isConstructor": false,
      "method": "<java.time.format.ZoneName: java.lang.String toZid(java.lang.String,java.util.Locale)>"
    },
    {
      "name": "toZid",
      "retType": "java.lang.String",
      "argType": "java.lang.String",
      "isStatic": true,
      "hostClass": "java.time.format.ZoneName",
      "isConstructor": false,
      "method": "<java.time.format.ZoneName: java.lang.String toZid(java.lang.String)>"
    },
    {
      "name": "values",
      "retType": "java.time.temporal.ChronoField[]",
      "isStatic": true,
      "hostClass": "java.time.temporal.ChronoField",
      "isConstructor": false,
      "method": "<java.time.temporal.ChronoField: java.time.temporal.ChronoField[] values()>"
    },
    {
      "name": "valueOf",
      "retType": "java.time.temporal.ChronoField",
      "argType": "java.lang.String",
      "isStatic": true,
      "hostClass": "java.time.temporal.ChronoField",
      "isConstructor": false,
      "method": "<java.time.temporal.ChronoField: java.time.temporal.ChronoField valueOf(java.lang.String)>"
    },
    {
      "name": "getDisplayName",
      "retType": "java.lang.String",
      "argType": "java.util.Locale",
      "isStatic": false,
      "hostClass": "java.time.temporal.ChronoField",
      "isConstructor": false,
      "method": "<java.time.temporal.ChronoField: java.lang.String getDisplayName(java.util.Locale)>"
    },
    {
      "name": "getBaseUnit",
      "retType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.temporal.ChronoField",
      "isConstructor": false,
      "method": "<java.time.temporal.ChronoField: java.time.temporal.TemporalUnit getBaseUnit()>"
    },
    {
      "name": "getRangeUnit",
      "retType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.temporal.ChronoField",
      "isConstructor": false,
      "method": "<java.time.temporal.ChronoField: java.time.temporal.TemporalUnit getRangeUnit()>"
    },
    {
      "name": "range",
      "retType": "java.time.temporal.ValueRange",
      "isStatic": false,
      "hostClass": "java.time.temporal.ChronoField",
      "isConstructor": false,
      "method": "<java.time.temporal.ChronoField: java.time.temporal.ValueRange range()>"
    },
    {
      "name": "isDateBased",
      "retType": "boolean",
      "isStatic": false,
      "hostClass": "java.time.temporal.ChronoField",
      "isConstructor": false,
      "method": "<java.time.temporal.ChronoField: boolean isDateBased()>"
    },
    {
      "name": "isTimeBased",
      "retType": "boolean",
      "isStatic": false,
      "hostClass": "java.time.temporal.ChronoField",
      "isConstructor": false,
      "method": "<java.time.temporal.ChronoField: boolean isTimeBased()>"
    },
    {
      "name": "checkValidValue",
      "retType": "long",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.temporal.ChronoField",
      "isConstructor": false,
      "method": "<java.time.temporal.ChronoField: long checkValidValue(long)>"
    },
    {
      "name": "checkValidIntValue",
      "retType": "int",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.temporal.ChronoField",
      "isConstructor": false,
      "method": "<java.time.temporal.ChronoField: int checkValidIntValue(long)>"
    },
    {
      "name": "isSupportedBy",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.temporal.ChronoField",
      "isConstructor": false,
      "method": "<java.time.temporal.ChronoField: boolean isSupportedBy(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "rangeRefinedBy",
      "retType": "java.time.temporal.ValueRange",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.temporal.ChronoField",
      "isConstructor": false,
      "method": "<java.time.temporal.ChronoField: java.time.temporal.ValueRange rangeRefinedBy(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "getFrom",
      "retType": "long",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.temporal.ChronoField",
      "isConstructor": false,
      "method": "<java.time.temporal.ChronoField: long getFrom(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "adjustInto",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.Temporal",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.temporal.ChronoField",
      "isConstructor": false,
      "method": "<java.time.temporal.ChronoField: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal,long)>"
    },
    {
      "name": "values",
      "retType": "java.time.temporal.ChronoUnit[]",
      "isStatic": true,
      "hostClass": "java.time.temporal.ChronoUnit",
      "isConstructor": false,
      "method": "<java.time.temporal.ChronoUnit: java.time.temporal.ChronoUnit[] values()>"
    },
    {
      "name": "valueOf",
      "retType": "java.time.temporal.ChronoUnit",
      "argType": "java.lang.String",
      "isStatic": true,
      "hostClass": "java.time.temporal.ChronoUnit",
      "isConstructor": false,
      "method": "<java.time.temporal.ChronoUnit: java.time.temporal.ChronoUnit valueOf(java.lang.String)>"
    },
    {
      "name": "getDuration",
      "retType": "java.time.Duration",
      "isStatic": false,
      "hostClass": "java.time.temporal.ChronoUnit",
      "isConstructor": false,
      "method": "<java.time.temporal.ChronoUnit: java.time.Duration getDuration()>"
    },
    {
      "name": "isDurationEstimated",
      "retType": "boolean",
      "isStatic": false,
      "hostClass": "java.time.temporal.ChronoUnit",
      "isConstructor": false,
      "method": "<java.time.temporal.ChronoUnit: boolean isDurationEstimated()>"
    },
    {
      "name": "isDateBased",
      "retType": "boolean",
      "isStatic": false,
      "hostClass": "java.time.temporal.ChronoUnit",
      "isConstructor": false,
      "method": "<java.time.temporal.ChronoUnit: boolean isDateBased()>"
    },
    {
      "name": "isTimeBased",
      "retType": "boolean",
      "isStatic": false,
      "hostClass": "java.time.temporal.ChronoUnit",
      "isConstructor": false,
      "method": "<java.time.temporal.ChronoUnit: boolean isTimeBased()>"
    },
    {
      "name": "isSupportedBy",
      "retType": "boolean",
      "argType": "java.time.temporal.Temporal",
      "isStatic": false,
      "hostClass": "java.time.temporal.ChronoUnit",
      "isConstructor": false,
      "method": "<java.time.temporal.ChronoUnit: boolean isSupportedBy(java.time.temporal.Temporal)>"
    },
    {
      "name": "addTo",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.Temporal",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.temporal.ChronoUnit",
      "isConstructor": false,
      "method": "<java.time.temporal.ChronoUnit: java.time.temporal.Temporal addTo(java.time.temporal.Temporal,long)>"
    },
    {
      "name": "between",
      "retType": "long",
      "argType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.Temporal",
      "isStatic": false,
      "hostClass": "java.time.temporal.ChronoUnit",
      "isConstructor": false,
      "method": "<java.time.temporal.ChronoUnit: long between(java.time.temporal.Temporal,java.time.temporal.Temporal)>"
    },
    {
      "name": "getBaseUnit",
      "retType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.temporal.IsoFields$Field$1",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Field$1: java.time.temporal.TemporalUnit getBaseUnit()>"
    },
    {
      "name": "getRangeUnit",
      "retType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.temporal.IsoFields$Field$1",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Field$1: java.time.temporal.TemporalUnit getRangeUnit()>"
    },
    {
      "name": "range",
      "retType": "java.time.temporal.ValueRange",
      "isStatic": false,
      "hostClass": "java.time.temporal.IsoFields$Field$1",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Field$1: java.time.temporal.ValueRange range()>"
    },
    {
      "name": "isSupportedBy",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.temporal.IsoFields$Field$1",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Field$1: boolean isSupportedBy(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "rangeRefinedBy",
      "retType": "java.time.temporal.ValueRange",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.temporal.IsoFields$Field$1",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Field$1: java.time.temporal.ValueRange rangeRefinedBy(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "getFrom",
      "retType": "long",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.temporal.IsoFields$Field$1",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Field$1: long getFrom(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "adjustInto",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.Temporal",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.temporal.IsoFields$Field$1",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Field$1: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal,long)>"
    },
    {
      "name": "resolve",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.util.Map",
      "argType": "java.time.temporal.TemporalAccessor",
      "argType": "java.time.format.ResolverStyle",
      "isStatic": false,
      "hostClass": "java.time.temporal.IsoFields$Field$1",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Field$1: java.time.chrono.ChronoLocalDate resolve(java.util.Map,java.time.temporal.TemporalAccessor,java.time.format.ResolverStyle)>"
    },
    {
      "name": "resolve",
      "retType": "java.time.temporal.TemporalAccessor",
      "argType": "java.util.Map",
      "argType": "java.time.temporal.TemporalAccessor",
      "argType": "java.time.format.ResolverStyle",
      "isStatic": false,
      "hostClass": "java.time.temporal.IsoFields$Field$1",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Field$1: java.time.temporal.TemporalAccessor resolve(java.util.Map,java.time.temporal.TemporalAccessor,java.time.format.ResolverStyle)>"
    },
    {
      "name": "getBaseUnit",
      "retType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.temporal.IsoFields$Field$2",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Field$2: java.time.temporal.TemporalUnit getBaseUnit()>"
    },
    {
      "name": "getRangeUnit",
      "retType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.temporal.IsoFields$Field$2",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Field$2: java.time.temporal.TemporalUnit getRangeUnit()>"
    },
    {
      "name": "range",
      "retType": "java.time.temporal.ValueRange",
      "isStatic": false,
      "hostClass": "java.time.temporal.IsoFields$Field$2",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Field$2: java.time.temporal.ValueRange range()>"
    },
    {
      "name": "isSupportedBy",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.temporal.IsoFields$Field$2",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Field$2: boolean isSupportedBy(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "getFrom",
      "retType": "long",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.temporal.IsoFields$Field$2",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Field$2: long getFrom(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "adjustInto",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.Temporal",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.temporal.IsoFields$Field$2",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Field$2: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal,long)>"
    },
    {
      "name": "getDisplayName",
      "retType": "java.lang.String",
      "argType": "java.util.Locale",
      "isStatic": false,
      "hostClass": "java.time.temporal.IsoFields$Field$3",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Field$3: java.lang.String getDisplayName(java.util.Locale)>"
    },
    {
      "name": "getBaseUnit",
      "retType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.temporal.IsoFields$Field$3",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Field$3: java.time.temporal.TemporalUnit getBaseUnit()>"
    },
    {
      "name": "getRangeUnit",
      "retType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.temporal.IsoFields$Field$3",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Field$3: java.time.temporal.TemporalUnit getRangeUnit()>"
    },
    {
      "name": "range",
      "retType": "java.time.temporal.ValueRange",
      "isStatic": false,
      "hostClass": "java.time.temporal.IsoFields$Field$3",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Field$3: java.time.temporal.ValueRange range()>"
    },
    {
      "name": "isSupportedBy",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.temporal.IsoFields$Field$3",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Field$3: boolean isSupportedBy(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "rangeRefinedBy",
      "retType": "java.time.temporal.ValueRange",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.temporal.IsoFields$Field$3",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Field$3: java.time.temporal.ValueRange rangeRefinedBy(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "getFrom",
      "retType": "long",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.temporal.IsoFields$Field$3",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Field$3: long getFrom(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "adjustInto",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.Temporal",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.temporal.IsoFields$Field$3",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Field$3: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal,long)>"
    },
    {
      "name": "resolve",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.util.Map",
      "argType": "java.time.temporal.TemporalAccessor",
      "argType": "java.time.format.ResolverStyle",
      "isStatic": false,
      "hostClass": "java.time.temporal.IsoFields$Field$3",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Field$3: java.time.chrono.ChronoLocalDate resolve(java.util.Map,java.time.temporal.TemporalAccessor,java.time.format.ResolverStyle)>"
    },
    {
      "name": "resolve",
      "retType": "java.time.temporal.TemporalAccessor",
      "argType": "java.util.Map",
      "argType": "java.time.temporal.TemporalAccessor",
      "argType": "java.time.format.ResolverStyle",
      "isStatic": false,
      "hostClass": "java.time.temporal.IsoFields$Field$3",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Field$3: java.time.temporal.TemporalAccessor resolve(java.util.Map,java.time.temporal.TemporalAccessor,java.time.format.ResolverStyle)>"
    },
    {
      "name": "getBaseUnit",
      "retType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.temporal.IsoFields$Field$4",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Field$4: java.time.temporal.TemporalUnit getBaseUnit()>"
    },
    {
      "name": "getRangeUnit",
      "retType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.temporal.IsoFields$Field$4",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Field$4: java.time.temporal.TemporalUnit getRangeUnit()>"
    },
    {
      "name": "range",
      "retType": "java.time.temporal.ValueRange",
      "isStatic": false,
      "hostClass": "java.time.temporal.IsoFields$Field$4",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Field$4: java.time.temporal.ValueRange range()>"
    },
    {
      "name": "isSupportedBy",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.temporal.IsoFields$Field$4",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Field$4: boolean isSupportedBy(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "getFrom",
      "retType": "long",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.temporal.IsoFields$Field$4",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Field$4: long getFrom(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "adjustInto",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.Temporal",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.temporal.IsoFields$Field$4",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Field$4: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal,long)>"
    },
    {
      "name": "values",
      "retType": "java.time.temporal.IsoFields$Field[]",
      "isStatic": true,
      "hostClass": "java.time.temporal.IsoFields$Field",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Field: java.time.temporal.IsoFields$Field[] values()>"
    },
    {
      "name": "valueOf",
      "retType": "java.time.temporal.IsoFields$Field",
      "argType": "java.lang.String",
      "isStatic": true,
      "hostClass": "java.time.temporal.IsoFields$Field",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Field: java.time.temporal.IsoFields$Field valueOf(java.lang.String)>"
    },
    {
      "name": "isDateBased",
      "retType": "boolean",
      "isStatic": false,
      "hostClass": "java.time.temporal.IsoFields$Field",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Field: boolean isDateBased()>"
    },
    {
      "name": "isTimeBased",
      "retType": "boolean",
      "isStatic": false,
      "hostClass": "java.time.temporal.IsoFields$Field",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Field: boolean isTimeBased()>"
    },
    {
      "name": "rangeRefinedBy",
      "retType": "java.time.temporal.ValueRange",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.temporal.IsoFields$Field",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Field: java.time.temporal.ValueRange rangeRefinedBy(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "values",
      "retType": "java.time.temporal.IsoFields$Unit[]",
      "isStatic": true,
      "hostClass": "java.time.temporal.IsoFields$Unit",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Unit: java.time.temporal.IsoFields$Unit[] values()>"
    },
    {
      "name": "valueOf",
      "retType": "java.time.temporal.IsoFields$Unit",
      "argType": "java.lang.String",
      "isStatic": true,
      "hostClass": "java.time.temporal.IsoFields$Unit",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Unit: java.time.temporal.IsoFields$Unit valueOf(java.lang.String)>"
    },
    {
      "name": "getDuration",
      "retType": "java.time.Duration",
      "isStatic": false,
      "hostClass": "java.time.temporal.IsoFields$Unit",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Unit: java.time.Duration getDuration()>"
    },
    {
      "name": "isDurationEstimated",
      "retType": "boolean",
      "isStatic": false,
      "hostClass": "java.time.temporal.IsoFields$Unit",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Unit: boolean isDurationEstimated()>"
    },
    {
      "name": "isDateBased",
      "retType": "boolean",
      "isStatic": false,
      "hostClass": "java.time.temporal.IsoFields$Unit",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Unit: boolean isDateBased()>"
    },
    {
      "name": "isTimeBased",
      "retType": "boolean",
      "isStatic": false,
      "hostClass": "java.time.temporal.IsoFields$Unit",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Unit: boolean isTimeBased()>"
    },
    {
      "name": "isSupportedBy",
      "retType": "boolean",
      "argType": "java.time.temporal.Temporal",
      "isStatic": false,
      "hostClass": "java.time.temporal.IsoFields$Unit",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Unit: boolean isSupportedBy(java.time.temporal.Temporal)>"
    },
    {
      "name": "addTo",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.Temporal",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.temporal.IsoFields$Unit",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Unit: java.time.temporal.Temporal addTo(java.time.temporal.Temporal,long)>"
    },
    {
      "name": "between",
      "retType": "long",
      "argType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.Temporal",
      "isStatic": false,
      "hostClass": "java.time.temporal.IsoFields$Unit",
      "isConstructor": false,
      "method": "<java.time.temporal.IsoFields$Unit: long between(java.time.temporal.Temporal,java.time.temporal.Temporal)>"
    },
    {
      "name": "values",
      "retType": "java.time.temporal.JulianFields$Field[]",
      "isStatic": true,
      "hostClass": "java.time.temporal.JulianFields$Field",
      "isConstructor": false,
      "method": "<java.time.temporal.JulianFields$Field: java.time.temporal.JulianFields$Field[] values()>"
    },
    {
      "name": "valueOf",
      "retType": "java.time.temporal.JulianFields$Field",
      "argType": "java.lang.String",
      "isStatic": true,
      "hostClass": "java.time.temporal.JulianFields$Field",
      "isConstructor": false,
      "method": "<java.time.temporal.JulianFields$Field: java.time.temporal.JulianFields$Field valueOf(java.lang.String)>"
    },
    {
      "name": "getBaseUnit",
      "retType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.temporal.JulianFields$Field",
      "isConstructor": false,
      "method": "<java.time.temporal.JulianFields$Field: java.time.temporal.TemporalUnit getBaseUnit()>"
    },
    {
      "name": "getRangeUnit",
      "retType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.temporal.JulianFields$Field",
      "isConstructor": false,
      "method": "<java.time.temporal.JulianFields$Field: java.time.temporal.TemporalUnit getRangeUnit()>"
    },
    {
      "name": "isDateBased",
      "retType": "boolean",
      "isStatic": false,
      "hostClass": "java.time.temporal.JulianFields$Field",
      "isConstructor": false,
      "method": "<java.time.temporal.JulianFields$Field: boolean isDateBased()>"
    },
    {
      "name": "isTimeBased",
      "retType": "boolean",
      "isStatic": false,
      "hostClass": "java.time.temporal.JulianFields$Field",
      "isConstructor": false,
      "method": "<java.time.temporal.JulianFields$Field: boolean isTimeBased()>"
    },
    {
      "name": "range",
      "retType": "java.time.temporal.ValueRange",
      "isStatic": false,
      "hostClass": "java.time.temporal.JulianFields$Field",
      "isConstructor": false,
      "method": "<java.time.temporal.JulianFields$Field: java.time.temporal.ValueRange range()>"
    },
    {
      "name": "isSupportedBy",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.temporal.JulianFields$Field",
      "isConstructor": false,
      "method": "<java.time.temporal.JulianFields$Field: boolean isSupportedBy(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "rangeRefinedBy",
      "retType": "java.time.temporal.ValueRange",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.temporal.JulianFields$Field",
      "isConstructor": false,
      "method": "<java.time.temporal.JulianFields$Field: java.time.temporal.ValueRange rangeRefinedBy(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "getFrom",
      "retType": "long",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.temporal.JulianFields$Field",
      "isConstructor": false,
      "method": "<java.time.temporal.JulianFields$Field: long getFrom(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "adjustInto",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.Temporal",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.temporal.JulianFields$Field",
      "isConstructor": false,
      "method": "<java.time.temporal.JulianFields$Field: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal,long)>"
    },
    {
      "name": "resolve",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.util.Map",
      "argType": "java.time.temporal.TemporalAccessor",
      "argType": "java.time.format.ResolverStyle",
      "isStatic": false,
      "hostClass": "java.time.temporal.JulianFields$Field",
      "isConstructor": false,
      "method": "<java.time.temporal.JulianFields$Field: java.time.chrono.ChronoLocalDate resolve(java.util.Map,java.time.temporal.TemporalAccessor,java.time.format.ResolverStyle)>"
    },
    {
      "name": "resolve",
      "retType": "java.time.temporal.TemporalAccessor",
      "argType": "java.util.Map",
      "argType": "java.time.temporal.TemporalAccessor",
      "argType": "java.time.format.ResolverStyle",
      "isStatic": false,
      "hostClass": "java.time.temporal.JulianFields$Field",
      "isConstructor": false,
      "method": "<java.time.temporal.JulianFields$Field: java.time.temporal.TemporalAccessor resolve(java.util.Map,java.time.temporal.TemporalAccessor,java.time.format.ResolverStyle)>"
    },
    {
      "name": "isSupported",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.temporal.Temporal",
      "isConstructor": false,
      "method": "<java.time.temporal.Temporal: boolean isSupported(java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "with",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAdjuster",
      "isStatic": false,
      "hostClass": "java.time.temporal.Temporal",
      "isConstructor": false,
      "method": "<java.time.temporal.Temporal: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalAdjuster)>"
    },
    {
      "name": "with",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalField",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.temporal.Temporal",
      "isConstructor": false,
      "method": "<java.time.temporal.Temporal: java.time.temporal.Temporal 'with'(java.time.temporal.TemporalField,long)>"
    },
    {
      "name": "plus",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.temporal.Temporal",
      "isConstructor": false,
      "method": "<java.time.temporal.Temporal: java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "plus",
      "retType": "java.time.temporal.Temporal",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.temporal.Temporal",
      "isConstructor": false,
      "method": "<java.time.temporal.Temporal: java.time.temporal.Temporal plus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "minus",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalAmount",
      "isStatic": false,
      "hostClass": "java.time.temporal.Temporal",
      "isConstructor": false,
      "method": "<java.time.temporal.Temporal: java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount)>"
    },
    {
      "name": "minus",
      "retType": "java.time.temporal.Temporal",
      "argType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.temporal.Temporal",
      "isConstructor": false,
      "method": "<java.time.temporal.Temporal: java.time.temporal.Temporal minus(long,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "until",
      "retType": "long",
      "argType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.temporal.Temporal",
      "isConstructor": false,
      "method": "<java.time.temporal.Temporal: long until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "isSupported",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.temporal.TemporalAccessor",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalAccessor: boolean isSupported(java.time.temporal.TemporalField)>"
    },
    {
      "name": "range",
      "retType": "java.time.temporal.ValueRange",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.temporal.TemporalAccessor",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalAccessor: java.time.temporal.ValueRange range(java.time.temporal.TemporalField)>"
    },
    {
      "name": "get",
      "retType": "int",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.temporal.TemporalAccessor",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalAccessor: int get(java.time.temporal.TemporalField)>"
    },
    {
      "name": "getLong",
      "retType": "long",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.temporal.TemporalAccessor",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalAccessor: long getLong(java.time.temporal.TemporalField)>"
    },
    {
      "name": "query",
      "retType": "java.lang.Object",
      "argType": "java.time.temporal.TemporalQuery",
      "isStatic": false,
      "hostClass": "java.time.temporal.TemporalAccessor",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalAccessor: java.lang.Object query(java.time.temporal.TemporalQuery)>"
    },
    {
      "name": "adjustInto",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.Temporal",
      "isStatic": false,
      "hostClass": "java.time.temporal.TemporalAdjuster",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalAdjuster: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal)>"
    },
    {
      "name": "ofDateAdjuster",
      "retType": "java.time.temporal.TemporalAdjuster",
      "argType": "java.util.function.UnaryOperator",
      "isStatic": true,
      "hostClass": "java.time.temporal.TemporalAdjusters",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalAdjusters: java.time.temporal.TemporalAdjuster ofDateAdjuster(java.util.function.UnaryOperator)>"
    },
    {
      "name": "firstDayOfMonth",
      "retType": "java.time.temporal.TemporalAdjuster",
      "isStatic": true,
      "hostClass": "java.time.temporal.TemporalAdjusters",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalAdjusters: java.time.temporal.TemporalAdjuster firstDayOfMonth()>"
    },
    {
      "name": "lastDayOfMonth",
      "retType": "java.time.temporal.TemporalAdjuster",
      "isStatic": true,
      "hostClass": "java.time.temporal.TemporalAdjusters",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalAdjusters: java.time.temporal.TemporalAdjuster lastDayOfMonth()>"
    },
    {
      "name": "firstDayOfNextMonth",
      "retType": "java.time.temporal.TemporalAdjuster",
      "isStatic": true,
      "hostClass": "java.time.temporal.TemporalAdjusters",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalAdjusters: java.time.temporal.TemporalAdjuster firstDayOfNextMonth()>"
    },
    {
      "name": "firstDayOfYear",
      "retType": "java.time.temporal.TemporalAdjuster",
      "isStatic": true,
      "hostClass": "java.time.temporal.TemporalAdjusters",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalAdjusters: java.time.temporal.TemporalAdjuster firstDayOfYear()>"
    },
    {
      "name": "lastDayOfYear",
      "retType": "java.time.temporal.TemporalAdjuster",
      "isStatic": true,
      "hostClass": "java.time.temporal.TemporalAdjusters",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalAdjusters: java.time.temporal.TemporalAdjuster lastDayOfYear()>"
    },
    {
      "name": "firstDayOfNextYear",
      "retType": "java.time.temporal.TemporalAdjuster",
      "isStatic": true,
      "hostClass": "java.time.temporal.TemporalAdjusters",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalAdjusters: java.time.temporal.TemporalAdjuster firstDayOfNextYear()>"
    },
    {
      "name": "firstInMonth",
      "retType": "java.time.temporal.TemporalAdjuster",
      "argType": "java.time.DayOfWeek",
      "isStatic": true,
      "hostClass": "java.time.temporal.TemporalAdjusters",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalAdjusters: java.time.temporal.TemporalAdjuster firstInMonth(java.time.DayOfWeek)>"
    },
    {
      "name": "lastInMonth",
      "retType": "java.time.temporal.TemporalAdjuster",
      "argType": "java.time.DayOfWeek",
      "isStatic": true,
      "hostClass": "java.time.temporal.TemporalAdjusters",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalAdjusters: java.time.temporal.TemporalAdjuster lastInMonth(java.time.DayOfWeek)>"
    },
    {
      "name": "dayOfWeekInMonth",
      "retType": "java.time.temporal.TemporalAdjuster",
      "argType": "int",
      "argType": "java.time.DayOfWeek",
      "isStatic": true,
      "hostClass": "java.time.temporal.TemporalAdjusters",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalAdjusters: java.time.temporal.TemporalAdjuster dayOfWeekInMonth(int,java.time.DayOfWeek)>"
    },
    {
      "name": "next",
      "retType": "java.time.temporal.TemporalAdjuster",
      "argType": "java.time.DayOfWeek",
      "isStatic": true,
      "hostClass": "java.time.temporal.TemporalAdjusters",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalAdjusters: java.time.temporal.TemporalAdjuster next(java.time.DayOfWeek)>"
    },
    {
      "name": "nextOrSame",
      "retType": "java.time.temporal.TemporalAdjuster",
      "argType": "java.time.DayOfWeek",
      "isStatic": true,
      "hostClass": "java.time.temporal.TemporalAdjusters",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalAdjusters: java.time.temporal.TemporalAdjuster nextOrSame(java.time.DayOfWeek)>"
    },
    {
      "name": "previous",
      "retType": "java.time.temporal.TemporalAdjuster",
      "argType": "java.time.DayOfWeek",
      "isStatic": true,
      "hostClass": "java.time.temporal.TemporalAdjusters",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalAdjusters: java.time.temporal.TemporalAdjuster previous(java.time.DayOfWeek)>"
    },
    {
      "name": "previousOrSame",
      "retType": "java.time.temporal.TemporalAdjuster",
      "argType": "java.time.DayOfWeek",
      "isStatic": true,
      "hostClass": "java.time.temporal.TemporalAdjusters",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalAdjusters: java.time.temporal.TemporalAdjuster previousOrSame(java.time.DayOfWeek)>"
    },
    {
      "name": "get",
      "retType": "long",
      "argType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.temporal.TemporalAmount",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalAmount: long get(java.time.temporal.TemporalUnit)>"
    },
    {
      "name": "getUnits",
      "retType": "java.util.List",
      "isStatic": false,
      "hostClass": "java.time.temporal.TemporalAmount",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalAmount: java.util.List getUnits()>"
    },
    {
      "name": "addTo",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.Temporal",
      "isStatic": false,
      "hostClass": "java.time.temporal.TemporalAmount",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalAmount: java.time.temporal.Temporal addTo(java.time.temporal.Temporal)>"
    },
    {
      "name": "subtractFrom",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.Temporal",
      "isStatic": false,
      "hostClass": "java.time.temporal.TemporalAmount",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalAmount: java.time.temporal.Temporal subtractFrom(java.time.temporal.Temporal)>"
    },
    {
      "name": "getDisplayName",
      "retType": "java.lang.String",
      "argType": "java.util.Locale",
      "isStatic": false,
      "hostClass": "java.time.temporal.TemporalField",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalField: java.lang.String getDisplayName(java.util.Locale)>"
    },
    {
      "name": "getBaseUnit",
      "retType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.temporal.TemporalField",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalField: java.time.temporal.TemporalUnit getBaseUnit()>"
    },
    {
      "name": "getRangeUnit",
      "retType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.temporal.TemporalField",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalField: java.time.temporal.TemporalUnit getRangeUnit()>"
    },
    {
      "name": "range",
      "retType": "java.time.temporal.ValueRange",
      "isStatic": false,
      "hostClass": "java.time.temporal.TemporalField",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalField: java.time.temporal.ValueRange range()>"
    },
    {
      "name": "isDateBased",
      "retType": "boolean",
      "isStatic": false,
      "hostClass": "java.time.temporal.TemporalField",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalField: boolean isDateBased()>"
    },
    {
      "name": "isTimeBased",
      "retType": "boolean",
      "isStatic": false,
      "hostClass": "java.time.temporal.TemporalField",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalField: boolean isTimeBased()>"
    },
    {
      "name": "isSupportedBy",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.temporal.TemporalField",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalField: boolean isSupportedBy(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "rangeRefinedBy",
      "retType": "java.time.temporal.ValueRange",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.temporal.TemporalField",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalField: java.time.temporal.ValueRange rangeRefinedBy(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "getFrom",
      "retType": "long",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.temporal.TemporalField",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalField: long getFrom(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "adjustInto",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.Temporal",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.temporal.TemporalField",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalField: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal,long)>"
    },
    {
      "name": "resolve",
      "retType": "java.time.temporal.TemporalAccessor",
      "argType": "java.util.Map",
      "argType": "java.time.temporal.TemporalAccessor",
      "argType": "java.time.format.ResolverStyle",
      "isStatic": false,
      "hostClass": "java.time.temporal.TemporalField",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalField: java.time.temporal.TemporalAccessor resolve(java.util.Map,java.time.temporal.TemporalAccessor,java.time.format.ResolverStyle)>"
    },
    {
      "name": "zoneId",
      "retType": "java.time.temporal.TemporalQuery",
      "isStatic": true,
      "hostClass": "java.time.temporal.TemporalQueries",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalQueries: java.time.temporal.TemporalQuery zoneId()>"
    },
    {
      "name": "chronology",
      "retType": "java.time.temporal.TemporalQuery",
      "isStatic": true,
      "hostClass": "java.time.temporal.TemporalQueries",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalQueries: java.time.temporal.TemporalQuery chronology()>"
    },
    {
      "name": "precision",
      "retType": "java.time.temporal.TemporalQuery",
      "isStatic": true,
      "hostClass": "java.time.temporal.TemporalQueries",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalQueries: java.time.temporal.TemporalQuery precision()>"
    },
    {
      "name": "zone",
      "retType": "java.time.temporal.TemporalQuery",
      "isStatic": true,
      "hostClass": "java.time.temporal.TemporalQueries",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalQueries: java.time.temporal.TemporalQuery zone()>"
    },
    {
      "name": "offset",
      "retType": "java.time.temporal.TemporalQuery",
      "isStatic": true,
      "hostClass": "java.time.temporal.TemporalQueries",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalQueries: java.time.temporal.TemporalQuery offset()>"
    },
    {
      "name": "localDate",
      "retType": "java.time.temporal.TemporalQuery",
      "isStatic": true,
      "hostClass": "java.time.temporal.TemporalQueries",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalQueries: java.time.temporal.TemporalQuery localDate()>"
    },
    {
      "name": "localTime",
      "retType": "java.time.temporal.TemporalQuery",
      "isStatic": true,
      "hostClass": "java.time.temporal.TemporalQueries",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalQueries: java.time.temporal.TemporalQuery localTime()>"
    },
    {
      "name": "queryFrom",
      "retType": "java.lang.Object",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.temporal.TemporalQuery",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalQuery: java.lang.Object queryFrom(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "getDuration",
      "retType": "java.time.Duration",
      "isStatic": false,
      "hostClass": "java.time.temporal.TemporalUnit",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalUnit: java.time.Duration getDuration()>"
    },
    {
      "name": "isDurationEstimated",
      "retType": "boolean",
      "isStatic": false,
      "hostClass": "java.time.temporal.TemporalUnit",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalUnit: boolean isDurationEstimated()>"
    },
    {
      "name": "isDateBased",
      "retType": "boolean",
      "isStatic": false,
      "hostClass": "java.time.temporal.TemporalUnit",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalUnit: boolean isDateBased()>"
    },
    {
      "name": "isTimeBased",
      "retType": "boolean",
      "isStatic": false,
      "hostClass": "java.time.temporal.TemporalUnit",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalUnit: boolean isTimeBased()>"
    },
    {
      "name": "isSupportedBy",
      "retType": "boolean",
      "argType": "java.time.temporal.Temporal",
      "isStatic": false,
      "hostClass": "java.time.temporal.TemporalUnit",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalUnit: boolean isSupportedBy(java.time.temporal.Temporal)>"
    },
    {
      "name": "addTo",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.Temporal",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.temporal.TemporalUnit",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalUnit: java.time.temporal.Temporal addTo(java.time.temporal.Temporal,long)>"
    },
    {
      "name": "between",
      "retType": "long",
      "argType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.Temporal",
      "isStatic": false,
      "hostClass": "java.time.temporal.TemporalUnit",
      "isConstructor": false,
      "method": "<java.time.temporal.TemporalUnit: long between(java.time.temporal.Temporal,java.time.temporal.Temporal)>"
    },
    {
      "name": "java.time.temporal.UnsupportedTemporalTypeException",
      "retType": "java.time.temporal.UnsupportedTemporalTypeException",
      "argType": "java.lang.String",
      "isStatic": false,
      "hostClass": "java.time.temporal.UnsupportedTemporalTypeException",
      "isConstructor": true,
      "method": "<java.time.temporal.UnsupportedTemporalTypeException: void <init>(java.lang.String)>"
    },
    {
      "name": "java.time.temporal.UnsupportedTemporalTypeException",
      "retType": "java.time.temporal.UnsupportedTemporalTypeException",
      "argType": "java.lang.String",
      "argType": "java.lang.Throwable",
      "isStatic": false,
      "hostClass": "java.time.temporal.UnsupportedTemporalTypeException",
      "isConstructor": true,
      "method": "<java.time.temporal.UnsupportedTemporalTypeException: void <init>(java.lang.String,java.lang.Throwable)>"
    },
    {
      "name": "of",
      "retType": "java.time.temporal.ValueRange",
      "argType": "long",
      "argType": "long",
      "isStatic": true,
      "hostClass": "java.time.temporal.ValueRange",
      "isConstructor": false,
      "method": "<java.time.temporal.ValueRange: java.time.temporal.ValueRange of(long,long)>"
    },
    {
      "name": "of",
      "retType": "java.time.temporal.ValueRange",
      "argType": "long",
      "argType": "long",
      "argType": "long",
      "isStatic": true,
      "hostClass": "java.time.temporal.ValueRange",
      "isConstructor": false,
      "method": "<java.time.temporal.ValueRange: java.time.temporal.ValueRange of(long,long,long)>"
    },
    {
      "name": "isFixed",
      "retType": "boolean",
      "isStatic": false,
      "hostClass": "java.time.temporal.ValueRange",
      "isConstructor": false,
      "method": "<java.time.temporal.ValueRange: boolean isFixed()>"
    },
    {
      "name": "getMinimum",
      "retType": "long",
      "isStatic": false,
      "hostClass": "java.time.temporal.ValueRange",
      "isConstructor": false,
      "method": "<java.time.temporal.ValueRange: long getMinimum()>"
    },
    {
      "name": "getLargestMinimum",
      "retType": "long",
      "isStatic": false,
      "hostClass": "java.time.temporal.ValueRange",
      "isConstructor": false,
      "method": "<java.time.temporal.ValueRange: long getLargestMinimum()>"
    },
    {
      "name": "getSmallestMaximum",
      "retType": "long",
      "isStatic": false,
      "hostClass": "java.time.temporal.ValueRange",
      "isConstructor": false,
      "method": "<java.time.temporal.ValueRange: long getSmallestMaximum()>"
    },
    {
      "name": "getMaximum",
      "retType": "long",
      "isStatic": false,
      "hostClass": "java.time.temporal.ValueRange",
      "isConstructor": false,
      "method": "<java.time.temporal.ValueRange: long getMaximum()>"
    },
    {
      "name": "isIntValue",
      "retType": "boolean",
      "isStatic": false,
      "hostClass": "java.time.temporal.ValueRange",
      "isConstructor": false,
      "method": "<java.time.temporal.ValueRange: boolean isIntValue()>"
    },
    {
      "name": "isValidValue",
      "retType": "boolean",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.temporal.ValueRange",
      "isConstructor": false,
      "method": "<java.time.temporal.ValueRange: boolean isValidValue(long)>"
    },
    {
      "name": "isValidIntValue",
      "retType": "boolean",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.temporal.ValueRange",
      "isConstructor": false,
      "method": "<java.time.temporal.ValueRange: boolean isValidIntValue(long)>"
    },
    {
      "name": "checkValidValue",
      "retType": "long",
      "argType": "long",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.temporal.ValueRange",
      "isConstructor": false,
      "method": "<java.time.temporal.ValueRange: long checkValidValue(long,java.time.temporal.TemporalField)>"
    },
    {
      "name": "checkValidIntValue",
      "retType": "int",
      "argType": "long",
      "argType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.temporal.ValueRange",
      "isConstructor": false,
      "method": "<java.time.temporal.ValueRange: int checkValidIntValue(long,java.time.temporal.TemporalField)>"
    },
    {
      "name": "equals",
      "retType": "boolean",
      "argType": "java.lang.Object",
      "isStatic": false,
      "hostClass": "java.time.temporal.ValueRange",
      "isConstructor": false,
      "method": "<java.time.temporal.ValueRange: boolean equals(java.lang.Object)>"
    },
    {
      "name": "getFrom",
      "retType": "long",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.temporal.WeekFields$ComputedDayOfField",
      "isConstructor": false,
      "method": "<java.time.temporal.WeekFields$ComputedDayOfField: long getFrom(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "adjustInto",
      "retType": "java.time.temporal.Temporal",
      "argType": "java.time.temporal.Temporal",
      "argType": "long",
      "isStatic": false,
      "hostClass": "java.time.temporal.WeekFields$ComputedDayOfField",
      "isConstructor": false,
      "method": "<java.time.temporal.WeekFields$ComputedDayOfField: java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal,long)>"
    },
    {
      "name": "resolve",
      "retType": "java.time.chrono.ChronoLocalDate",
      "argType": "java.util.Map",
      "argType": "java.time.temporal.TemporalAccessor",
      "argType": "java.time.format.ResolverStyle",
      "isStatic": false,
      "hostClass": "java.time.temporal.WeekFields$ComputedDayOfField",
      "isConstructor": false,
      "method": "<java.time.temporal.WeekFields$ComputedDayOfField: java.time.chrono.ChronoLocalDate resolve(java.util.Map,java.time.temporal.TemporalAccessor,java.time.format.ResolverStyle)>"
    },
    {
      "name": "getDisplayName",
      "retType": "java.lang.String",
      "argType": "java.util.Locale",
      "isStatic": false,
      "hostClass": "java.time.temporal.WeekFields$ComputedDayOfField",
      "isConstructor": false,
      "method": "<java.time.temporal.WeekFields$ComputedDayOfField: java.lang.String getDisplayName(java.util.Locale)>"
    },
    {
      "name": "getBaseUnit",
      "retType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.temporal.WeekFields$ComputedDayOfField",
      "isConstructor": false,
      "method": "<java.time.temporal.WeekFields$ComputedDayOfField: java.time.temporal.TemporalUnit getBaseUnit()>"
    },
    {
      "name": "getRangeUnit",
      "retType": "java.time.temporal.TemporalUnit",
      "isStatic": false,
      "hostClass": "java.time.temporal.WeekFields$ComputedDayOfField",
      "isConstructor": false,
      "method": "<java.time.temporal.WeekFields$ComputedDayOfField: java.time.temporal.TemporalUnit getRangeUnit()>"
    },
    {
      "name": "isDateBased",
      "retType": "boolean",
      "isStatic": false,
      "hostClass": "java.time.temporal.WeekFields$ComputedDayOfField",
      "isConstructor": false,
      "method": "<java.time.temporal.WeekFields$ComputedDayOfField: boolean isDateBased()>"
    },
    {
      "name": "isTimeBased",
      "retType": "boolean",
      "isStatic": false,
      "hostClass": "java.time.temporal.WeekFields$ComputedDayOfField",
      "isConstructor": false,
      "method": "<java.time.temporal.WeekFields$ComputedDayOfField: boolean isTimeBased()>"
    },
    {
      "name": "range",
      "retType": "java.time.temporal.ValueRange",
      "isStatic": false,
      "hostClass": "java.time.temporal.WeekFields$ComputedDayOfField",
      "isConstructor": false,
      "method": "<java.time.temporal.WeekFields$ComputedDayOfField: java.time.temporal.ValueRange range()>"
    },
    {
      "name": "isSupportedBy",
      "retType": "boolean",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.temporal.WeekFields$ComputedDayOfField",
      "isConstructor": false,
      "method": "<java.time.temporal.WeekFields$ComputedDayOfField: boolean isSupportedBy(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "rangeRefinedBy",
      "retType": "java.time.temporal.ValueRange",
      "argType": "java.time.temporal.TemporalAccessor",
      "isStatic": false,
      "hostClass": "java.time.temporal.WeekFields$ComputedDayOfField",
      "isConstructor": false,
      "method": "<java.time.temporal.WeekFields$ComputedDayOfField: java.time.temporal.ValueRange rangeRefinedBy(java.time.temporal.TemporalAccessor)>"
    },
    {
      "name": "resolve",
      "retType": "java.time.temporal.TemporalAccessor",
      "argType": "java.util.Map",
      "argType": "java.time.temporal.TemporalAccessor",
      "argType": "java.time.format.ResolverStyle",
      "isStatic": false,
      "hostClass": "java.time.temporal.WeekFields$ComputedDayOfField",
      "isConstructor": false,
      "method": "<java.time.temporal.WeekFields$ComputedDayOfField: java.time.temporal.TemporalAccessor resolve(java.util.Map,java.time.temporal.TemporalAccessor,java.time.format.ResolverStyle)>"
    },
    {
      "name": "of",
      "retType": "java.time.temporal.WeekFields",
      "argType": "java.util.Locale",
      "isStatic": true,
      "hostClass": "java.time.temporal.WeekFields",
      "isConstructor": false,
      "method": "<java.time.temporal.WeekFields: java.time.temporal.WeekFields of(java.util.Locale)>"
    },
    {
      "name": "of",
      "retType": "java.time.temporal.WeekFields",
      "argType": "java.time.DayOfWeek",
      "argType": "int",
      "isStatic": true,
      "hostClass": "java.time.temporal.WeekFields",
      "isConstructor": false,
      "method": "<java.time.temporal.WeekFields: java.time.temporal.WeekFields of(java.time.DayOfWeek,int)>"
    },
    {
      "name": "getFirstDayOfWeek",
      "retType": "java.time.DayOfWeek",
      "isStatic": false,
      "hostClass": "java.time.temporal.WeekFields",
      "isConstructor": false,
      "method": "<java.time.temporal.WeekFields: java.time.DayOfWeek getFirstDayOfWeek()>"
    },
    {
      "name": "getMinimalDaysInFirstWeek",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.temporal.WeekFields",
      "isConstructor": false,
      "method": "<java.time.temporal.WeekFields: int getMinimalDaysInFirstWeek()>"
    },
    {
      "name": "dayOfWeek",
      "retType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.temporal.WeekFields",
      "isConstructor": false,
      "method": "<java.time.temporal.WeekFields: java.time.temporal.TemporalField dayOfWeek()>"
    },
    {
      "name": "weekOfMonth",
      "retType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.temporal.WeekFields",
      "isConstructor": false,
      "method": "<java.time.temporal.WeekFields: java.time.temporal.TemporalField weekOfMonth()>"
    },
    {
      "name": "weekOfYear",
      "retType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.temporal.WeekFields",
      "isConstructor": false,
      "method": "<java.time.temporal.WeekFields: java.time.temporal.TemporalField weekOfYear()>"
    },
    {
      "name": "weekOfWeekBasedYear",
      "retType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.temporal.WeekFields",
      "isConstructor": false,
      "method": "<java.time.temporal.WeekFields: java.time.temporal.TemporalField weekOfWeekBasedYear()>"
    },
    {
      "name": "weekBasedYear",
      "retType": "java.time.temporal.TemporalField",
      "isStatic": false,
      "hostClass": "java.time.temporal.WeekFields",
      "isConstructor": false,
      "method": "<java.time.temporal.WeekFields: java.time.temporal.TemporalField weekBasedYear()>"
    },
    {
      "name": "equals",
      "retType": "boolean",
      "argType": "java.lang.Object",
      "isStatic": false,
      "hostClass": "java.time.temporal.WeekFields",
      "isConstructor": false,
      "method": "<java.time.temporal.WeekFields: boolean equals(java.lang.Object)>"
    },
    {
      "name": "java.time.zone.Ser",
      "retType": "java.time.zone.Ser",
      "isStatic": false,
      "hostClass": "java.time.zone.Ser",
      "isConstructor": true,
      "method": "<java.time.zone.Ser: void <init>()>"
    },
    {
      "name": "writeExternal",
      "retType": "void",
      "argType": "java.io.ObjectOutput",
      "isStatic": false,
      "hostClass": "java.time.zone.Ser",
      "isConstructor": false,
      "method": "<java.time.zone.Ser: void writeExternal(java.io.ObjectOutput)>"
    },
    {
      "name": "readExternal",
      "retType": "void",
      "argType": "java.io.ObjectInput",
      "isStatic": false,
      "hostClass": "java.time.zone.Ser",
      "isConstructor": false,
      "method": "<java.time.zone.Ser: void readExternal(java.io.ObjectInput)>"
    },
    {
      "name": "java.time.zone.TzdbZoneRulesProvider",
      "retType": "java.time.zone.TzdbZoneRulesProvider",
      "isStatic": false,
      "hostClass": "java.time.zone.TzdbZoneRulesProvider",
      "isConstructor": true,
      "method": "<java.time.zone.TzdbZoneRulesProvider: void <init>()>"
    },
    {
      "name": "of",
      "retType": "java.time.zone.ZoneOffsetTransition",
      "argType": "java.time.LocalDateTime",
      "argType": "java.time.ZoneOffset",
      "argType": "java.time.ZoneOffset",
      "isStatic": true,
      "hostClass": "java.time.zone.ZoneOffsetTransition",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneOffsetTransition: java.time.zone.ZoneOffsetTransition of(java.time.LocalDateTime,java.time.ZoneOffset,java.time.ZoneOffset)>"
    },
    {
      "name": "getInstant",
      "retType": "java.time.Instant",
      "isStatic": false,
      "hostClass": "java.time.zone.ZoneOffsetTransition",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneOffsetTransition: java.time.Instant getInstant()>"
    },
    {
      "name": "toEpochSecond",
      "retType": "long",
      "isStatic": false,
      "hostClass": "java.time.zone.ZoneOffsetTransition",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneOffsetTransition: long toEpochSecond()>"
    },
    {
      "name": "getDateTimeBefore",
      "retType": "java.time.LocalDateTime",
      "isStatic": false,
      "hostClass": "java.time.zone.ZoneOffsetTransition",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneOffsetTransition: java.time.LocalDateTime getDateTimeBefore()>"
    },
    {
      "name": "getDateTimeAfter",
      "retType": "java.time.LocalDateTime",
      "isStatic": false,
      "hostClass": "java.time.zone.ZoneOffsetTransition",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneOffsetTransition: java.time.LocalDateTime getDateTimeAfter()>"
    },
    {
      "name": "getOffsetBefore",
      "retType": "java.time.ZoneOffset",
      "isStatic": false,
      "hostClass": "java.time.zone.ZoneOffsetTransition",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneOffsetTransition: java.time.ZoneOffset getOffsetBefore()>"
    },
    {
      "name": "getOffsetAfter",
      "retType": "java.time.ZoneOffset",
      "isStatic": false,
      "hostClass": "java.time.zone.ZoneOffsetTransition",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneOffsetTransition: java.time.ZoneOffset getOffsetAfter()>"
    },
    {
      "name": "getDuration",
      "retType": "java.time.Duration",
      "isStatic": false,
      "hostClass": "java.time.zone.ZoneOffsetTransition",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneOffsetTransition: java.time.Duration getDuration()>"
    },
    {
      "name": "isGap",
      "retType": "boolean",
      "isStatic": false,
      "hostClass": "java.time.zone.ZoneOffsetTransition",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneOffsetTransition: boolean isGap()>"
    },
    {
      "name": "isOverlap",
      "retType": "boolean",
      "isStatic": false,
      "hostClass": "java.time.zone.ZoneOffsetTransition",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneOffsetTransition: boolean isOverlap()>"
    },
    {
      "name": "isValidOffset",
      "retType": "boolean",
      "argType": "java.time.ZoneOffset",
      "isStatic": false,
      "hostClass": "java.time.zone.ZoneOffsetTransition",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneOffsetTransition: boolean isValidOffset(java.time.ZoneOffset)>"
    },
    {
      "name": "equals",
      "retType": "boolean",
      "argType": "java.lang.Object",
      "isStatic": false,
      "hostClass": "java.time.zone.ZoneOffsetTransition",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneOffsetTransition: boolean equals(java.lang.Object)>"
    },
    {
      "name": "values",
      "retType": "java.time.zone.ZoneOffsetTransitionRule$TimeDefinition[]",
      "isStatic": true,
      "hostClass": "java.time.zone.ZoneOffsetTransitionRule$TimeDefinition",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneOffsetTransitionRule$TimeDefinition: java.time.zone.ZoneOffsetTransitionRule$TimeDefinition[] values()>"
    },
    {
      "name": "valueOf",
      "retType": "java.time.zone.ZoneOffsetTransitionRule$TimeDefinition",
      "argType": "java.lang.String",
      "isStatic": true,
      "hostClass": "java.time.zone.ZoneOffsetTransitionRule$TimeDefinition",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneOffsetTransitionRule$TimeDefinition: java.time.zone.ZoneOffsetTransitionRule$TimeDefinition valueOf(java.lang.String)>"
    },
    {
      "name": "createDateTime",
      "retType": "java.time.LocalDateTime",
      "argType": "java.time.LocalDateTime",
      "argType": "java.time.ZoneOffset",
      "argType": "java.time.ZoneOffset",
      "isStatic": false,
      "hostClass": "java.time.zone.ZoneOffsetTransitionRule$TimeDefinition",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneOffsetTransitionRule$TimeDefinition: java.time.LocalDateTime createDateTime(java.time.LocalDateTime,java.time.ZoneOffset,java.time.ZoneOffset)>"
    },
    {
      "name": "getMonth",
      "retType": "java.time.Month",
      "isStatic": false,
      "hostClass": "java.time.zone.ZoneOffsetTransitionRule",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneOffsetTransitionRule: java.time.Month getMonth()>"
    },
    {
      "name": "getDayOfMonthIndicator",
      "retType": "int",
      "isStatic": false,
      "hostClass": "java.time.zone.ZoneOffsetTransitionRule",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneOffsetTransitionRule: int getDayOfMonthIndicator()>"
    },
    {
      "name": "getDayOfWeek",
      "retType": "java.time.DayOfWeek",
      "isStatic": false,
      "hostClass": "java.time.zone.ZoneOffsetTransitionRule",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneOffsetTransitionRule: java.time.DayOfWeek getDayOfWeek()>"
    },
    {
      "name": "getLocalTime",
      "retType": "java.time.LocalTime",
      "isStatic": false,
      "hostClass": "java.time.zone.ZoneOffsetTransitionRule",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneOffsetTransitionRule: java.time.LocalTime getLocalTime()>"
    },
    {
      "name": "isMidnightEndOfDay",
      "retType": "boolean",
      "isStatic": false,
      "hostClass": "java.time.zone.ZoneOffsetTransitionRule",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneOffsetTransitionRule: boolean isMidnightEndOfDay()>"
    },
    {
      "name": "getTimeDefinition",
      "retType": "java.time.zone.ZoneOffsetTransitionRule$TimeDefinition",
      "isStatic": false,
      "hostClass": "java.time.zone.ZoneOffsetTransitionRule",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneOffsetTransitionRule: java.time.zone.ZoneOffsetTransitionRule$TimeDefinition getTimeDefinition()>"
    },
    {
      "name": "getStandardOffset",
      "retType": "java.time.ZoneOffset",
      "isStatic": false,
      "hostClass": "java.time.zone.ZoneOffsetTransitionRule",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneOffsetTransitionRule: java.time.ZoneOffset getStandardOffset()>"
    },
    {
      "name": "getOffsetBefore",
      "retType": "java.time.ZoneOffset",
      "isStatic": false,
      "hostClass": "java.time.zone.ZoneOffsetTransitionRule",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneOffsetTransitionRule: java.time.ZoneOffset getOffsetBefore()>"
    },
    {
      "name": "getOffsetAfter",
      "retType": "java.time.ZoneOffset",
      "isStatic": false,
      "hostClass": "java.time.zone.ZoneOffsetTransitionRule",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneOffsetTransitionRule: java.time.ZoneOffset getOffsetAfter()>"
    },
    {
      "name": "createTransition",
      "retType": "java.time.zone.ZoneOffsetTransition",
      "argType": "int",
      "isStatic": false,
      "hostClass": "java.time.zone.ZoneOffsetTransitionRule",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneOffsetTransitionRule: java.time.zone.ZoneOffsetTransition createTransition(int)>"
    },
    {
      "name": "equals",
      "retType": "boolean",
      "argType": "java.lang.Object",
      "isStatic": false,
      "hostClass": "java.time.zone.ZoneOffsetTransitionRule",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneOffsetTransitionRule: boolean equals(java.lang.Object)>"
    },
    {
      "name": "of",
      "retType": "java.time.zone.ZoneRules",
      "argType": "java.time.ZoneOffset",
      "isStatic": true,
      "hostClass": "java.time.zone.ZoneRules",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneRules: java.time.zone.ZoneRules of(java.time.ZoneOffset)>"
    },
    {
      "name": "isFixedOffset",
      "retType": "boolean",
      "isStatic": false,
      "hostClass": "java.time.zone.ZoneRules",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneRules: boolean isFixedOffset()>"
    },
    {
      "name": "getOffset",
      "retType": "java.time.ZoneOffset",
      "argType": "java.time.Instant",
      "isStatic": false,
      "hostClass": "java.time.zone.ZoneRules",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneRules: java.time.ZoneOffset getOffset(java.time.Instant)>"
    },
    {
      "name": "getOffset",
      "retType": "java.time.ZoneOffset",
      "argType": "java.time.LocalDateTime",
      "isStatic": false,
      "hostClass": "java.time.zone.ZoneRules",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneRules: java.time.ZoneOffset getOffset(java.time.LocalDateTime)>"
    },
    {
      "name": "getValidOffsets",
      "retType": "java.util.List",
      "argType": "java.time.LocalDateTime",
      "isStatic": false,
      "hostClass": "java.time.zone.ZoneRules",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneRules: java.util.List getValidOffsets(java.time.LocalDateTime)>"
    },
    {
      "name": "getTransition",
      "retType": "java.time.zone.ZoneOffsetTransition",
      "argType": "java.time.LocalDateTime",
      "isStatic": false,
      "hostClass": "java.time.zone.ZoneRules",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneRules: java.time.zone.ZoneOffsetTransition getTransition(java.time.LocalDateTime)>"
    },
    {
      "name": "getStandardOffset",
      "retType": "java.time.ZoneOffset",
      "argType": "java.time.Instant",
      "isStatic": false,
      "hostClass": "java.time.zone.ZoneRules",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneRules: java.time.ZoneOffset getStandardOffset(java.time.Instant)>"
    },
    {
      "name": "getDaylightSavings",
      "retType": "java.time.Duration",
      "argType": "java.time.Instant",
      "isStatic": false,
      "hostClass": "java.time.zone.ZoneRules",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneRules: java.time.Duration getDaylightSavings(java.time.Instant)>"
    },
    {
      "name": "isDaylightSavings",
      "retType": "boolean",
      "argType": "java.time.Instant",
      "isStatic": false,
      "hostClass": "java.time.zone.ZoneRules",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneRules: boolean isDaylightSavings(java.time.Instant)>"
    },
    {
      "name": "isValidOffset",
      "retType": "boolean",
      "argType": "java.time.LocalDateTime",
      "argType": "java.time.ZoneOffset",
      "isStatic": false,
      "hostClass": "java.time.zone.ZoneRules",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneRules: boolean isValidOffset(java.time.LocalDateTime,java.time.ZoneOffset)>"
    },
    {
      "name": "nextTransition",
      "retType": "java.time.zone.ZoneOffsetTransition",
      "argType": "java.time.Instant",
      "isStatic": false,
      "hostClass": "java.time.zone.ZoneRules",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneRules: java.time.zone.ZoneOffsetTransition nextTransition(java.time.Instant)>"
    },
    {
      "name": "previousTransition",
      "retType": "java.time.zone.ZoneOffsetTransition",
      "argType": "java.time.Instant",
      "isStatic": false,
      "hostClass": "java.time.zone.ZoneRules",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneRules: java.time.zone.ZoneOffsetTransition previousTransition(java.time.Instant)>"
    },
    {
      "name": "getTransitions",
      "retType": "java.util.List",
      "isStatic": false,
      "hostClass": "java.time.zone.ZoneRules",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneRules: java.util.List getTransitions()>"
    },
    {
      "name": "getTransitionRules",
      "retType": "java.util.List",
      "isStatic": false,
      "hostClass": "java.time.zone.ZoneRules",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneRules: java.util.List getTransitionRules()>"
    },
    {
      "name": "equals",
      "retType": "boolean",
      "argType": "java.lang.Object",
      "isStatic": false,
      "hostClass": "java.time.zone.ZoneRules",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneRules: boolean equals(java.lang.Object)>"
    },
    {
      "name": "java.time.zone.ZoneRulesException",
      "retType": "java.time.zone.ZoneRulesException",
      "argType": "java.lang.String",
      "isStatic": false,
      "hostClass": "java.time.zone.ZoneRulesException",
      "isConstructor": true,
      "method": "<java.time.zone.ZoneRulesException: void <init>(java.lang.String)>"
    },
    {
      "name": "java.time.zone.ZoneRulesException",
      "retType": "java.time.zone.ZoneRulesException",
      "argType": "java.lang.String",
      "argType": "java.lang.Throwable",
      "isStatic": false,
      "hostClass": "java.time.zone.ZoneRulesException",
      "isConstructor": true,
      "method": "<java.time.zone.ZoneRulesException: void <init>(java.lang.String,java.lang.Throwable)>"
    },
    {
      "name": "run",
      "retType": "java.lang.Object",
      "isStatic": false,
      "hostClass": "java.time.zone.ZoneRulesProvider$1",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneRulesProvider$1: java.lang.Object run()>"
    },
    {
      "name": "getAvailableZoneIds",
      "retType": "java.util.Set",
      "isStatic": true,
      "hostClass": "java.time.zone.ZoneRulesProvider",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneRulesProvider: java.util.Set getAvailableZoneIds()>"
    },
    {
      "name": "getRules",
      "retType": "java.time.zone.ZoneRules",
      "argType": "java.lang.String",
      "argType": "boolean",
      "isStatic": true,
      "hostClass": "java.time.zone.ZoneRulesProvider",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneRulesProvider: java.time.zone.ZoneRules getRules(java.lang.String,boolean)>"
    },
    {
      "name": "getVersions",
      "retType": "java.util.NavigableMap",
      "argType": "java.lang.String",
      "isStatic": true,
      "hostClass": "java.time.zone.ZoneRulesProvider",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneRulesProvider: java.util.NavigableMap getVersions(java.lang.String)>"
    },
    {
      "name": "registerProvider",
      "retType": "void",
      "argType": "java.time.zone.ZoneRulesProvider",
      "isStatic": true,
      "hostClass": "java.time.zone.ZoneRulesProvider",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneRulesProvider: void registerProvider(java.time.zone.ZoneRulesProvider)>"
    },
    {
      "name": "refresh",
      "retType": "boolean",
      "isStatic": true,
      "hostClass": "java.time.zone.ZoneRulesProvider",
      "isConstructor": false,
      "method": "<java.time.zone.ZoneRulesProvider: boolean refresh()>"
    }
  ]
}